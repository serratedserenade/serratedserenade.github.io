{"version":3,"sources":["common/util.ts","reportWebVitals.ts","common/formik-chakra/FormControl.tsx","common/formik-chakra/InputControl.tsx","common/formik-chakra/NumberInputControl.tsx","common/formik-chakra/SwitchControl.tsx","common/hooks.ts","common/npcSlice.ts","common/formik-chakra/TextareaControl.tsx","Characters/ModifyCharacterConditionsField.tsx","Characters/ModifyNPCForm.tsx","Characters/Enemies.tsx","common/playerSlice.ts","Characters/ModifyPlayerForm.tsx","Characters/Players.tsx","common/campaignSlice.ts","common/store.ts","Initiative/EnemyTurn.tsx","Initiative/PlayerTurn.tsx","Initiative/Initiative.tsx","Tracker/Tracker.tsx","index.tsx"],"names":["Dice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","FormControl","props","children","name","label","helperText","hideError","rest","useField","error","touched","isInvalid","htmlFor","InputControl","inputProps","field","id","NumberInputControl","showStepper","numberInputProps","setFieldValue","useFormikContext","onChange","value","Number","$setFieldValue","SwitchControl","switchProps","css","as","Flex","alignItems","isChecked","useAppDispatch","useDispatch","useAppSelector","useSelector","rollDice","max","Math","ceil","random","npcSlice","createSlice","initialState","npcs","reducers","addNPC","state","action","v4","push","payload","removeNPC","index","findIndex","v","splice","console","warn","refreshNPCs","length","modifyNPC","foundNPC","i","rollAllNPCInitiative","forEach","initiative","d20","modifyNPCValidationSchema","Yup","currentHP","integer","required","maxHP","tempHP","default","armourClass","min","initiativeMod","notes","conditions","of","displayOnTurnOrder","isHostile","isFriendly","isBoss","showHealth","showInitiative","showAC","showName","actions","TextareaControl","textareaProps","ModifyCharacterConditionsField","character","context","render","arrayHelpers","p","border","borderRadius","mb","justifyContent","fontWeight","mt","opacity","values","map","condition","idx","variant","size","m","onClick","remove","AddIcon","cursor","element","document","querySelector","tagInput","toString","ModifyNPCForm","npc","dispatch","NPCModifyStatFields","flex","textAlign","fontSize","templateColumns","templateRows","gap","colSpan","width","rightIcon","GiDiceTwentyFacesTwenty","displayString","NPCModifyActions","placement","type","hidden","dirty","colorScheme","IoMdSave","ImRedo","AiFillDelete","initialValues","onSubmit","modifyNPCAction","resetForm","enableReinitialize","validationSchema","className","backgroundColor","color","abs","resize","height","allowToggle","allowMultiple","key","display","Enemies","filter","addEnemyValidationSchema","moreThan","AddNPCForm","addFormFields","IC","playerSlice","players","addPlayer","removePlayer","refreshPlayers","modifyPlayer","foundPlayer","rollAllPlayerInitiative","modifyPlayerValidationSchema","ModifyPlayerForm","player","PlayerModifyStatFields","PlayerModifyActions","modifyPlayerAction","Players","addPlayerValidationSchema","AddPlayerForm","campaignSlice","currentTurnId","campaignTitle","setTurn","setCampaignTitle","APP_VERSION","loadFromLocalStorage","serialisedState","localStorage","getItem","JSON","parse","e","store","configureStore","reducer","playerReducer","campaign","campaignReducer","npcReducer","preloadedState","subscribe","hasFocus","stringify","setItem","saveToLocalStorage","getState","EnemyTurn","enemy","isActive","GiCheckedShield","BsHeartFill","GiWalkingBoot","j","PlayerTurn","Initiative","changePageMethod","getSortedTurns","formattedPlayers","formattedNPCs","sortedTurns","sort","a","b","returnValue","array","currentTurnIndex","slice","divider","position","bottom","left","turns","currentTurnCharacter","nextCharacter","Tracker","useState","editableCampaignTitle","setEditableCampaignTitle","window","addEventListener","persistedStorage","pageNumber","setPageNumber","editTitleEnabled","setEditTitleEnabled","pages","pageTitles","useDisclosure","isOpen","onOpen","onClose","drawerMenu","pt","pb","pl","pr","GiHamburgerMenu","spacing","undefined","maxW","minW","ml","aria-label","icon","GoPencil","onBlur","target","setTitleAction","setTimeout","scrollIntoView","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cc683cb7.chunk.js","sourcesContent":["export enum Dice {\n  d100 = 100,\n  d20 = 20,\n  d12 = 12,\n  d10 = 10,\n  d8 = 8,\n  d6 = 6,\n  d4 = 4,\n  d2 = 2\n}\n\nexport const rollDice = (max: number): number => Math.ceil(Math.random() * max);\n\nexport const rollAdvantage = (max: number): number => Math.max(rollDice(max), rollDice(max));\n\nexport const rollDisadvantage = (max: number): number => Math.min(rollDice(max), rollDice(max))","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\nimport {\n  FormControl as ChakraFormControl,\n  FormControlProps,\n  FormErrorMessage,\n  FormHelperText,\n  FormLabel,\n} from '@chakra-ui/react';\nimport { useField } from 'formik';\nimport React, { FC } from 'react';\n\nexport interface BaseProps extends FormControlProps {\n  name: string;\n  label?: string;\n  helperText?: string;\n  hideError?: boolean;\n}\n\nexport const FormControl: FC<BaseProps> = (props: BaseProps) => {\n  const { children, name, label, helperText, hideError, ...rest } = props;\n  const [, { error, touched }] = useField(name);\n\n  return (\n    <ChakraFormControl isInvalid={!!error && touched} {...rest}>\n      {label && <FormLabel htmlFor={name}>{label}</FormLabel>}\n      {children}\n      {!hideError && error && <FormErrorMessage>{error}</FormErrorMessage>}\n      {helperText && <FormHelperText>{helperText}</FormHelperText>}\n    </ChakraFormControl>\n  );\n};\n\nexport default FormControl;","\nimport { Input, InputProps } from '@chakra-ui/react';\nimport { useField } from 'formik';\nimport React, { FC } from 'react';\nimport { BaseProps, FormControl } from './FormControl';\n\nexport type InputControlProps = BaseProps & { inputProps?: InputProps };\n\nexport const InputControl: FC<InputControlProps> = (\n  props: InputControlProps\n) => {\n  const { name, label, inputProps, ...rest } = props;\n  const [field] = useField(name);\n\n  return (\n    <FormControl name={name} label={label} {...rest}>\n      <Input {...field} id={name} {...inputProps} />\n    </FormControl>\n  );\n};\n\nexport default InputControl;","import {\n  NumberDecrementStepper,\n  NumberIncrementStepper,\n  NumberInput,\n  NumberInputField,\n  NumberInputProps,\n  NumberInputStepper,\n} from '@chakra-ui/react';\nimport { useField, useFormikContext } from 'formik';\nimport React, { FC, ReactNode } from 'react';\nimport { BaseProps, FormControl } from './FormControl';\n\nexport type NumberInputControlProps = BaseProps & {\n  numberInputProps?: NumberInputProps;\n  showStepper?: boolean;\n  children?: ReactNode;\n};\n\nexport const NumberInputControl: FC<NumberInputControlProps> = (\n  props: NumberInputControlProps\n) => {\n  const {\n    name,\n    label,\n    showStepper = true,\n    children,\n    numberInputProps,\n    ...rest\n  } = props;\n  const [field, { error, touched }] = useField(name);\n  const { setFieldValue } = useFormikContext();\n\n  const $setFieldValue = (name: string) => (value: unknown) =>\n    setFieldValue(name, Number(value));\n\n  return (\n    <FormControl name={name} label={label} {...rest}>\n      <NumberInput\n        {...field}\n        id={name}\n        onChange={$setFieldValue(name)}\n        isInvalid={!!error && touched}\n        {...numberInputProps}\n      >\n        <NumberInputField name={name} />\n        {showStepper && (\n          <NumberInputStepper>\n            <NumberIncrementStepper />\n            <NumberDecrementStepper />\n          </NumberInputStepper>\n        )}\n        {children}\n      </NumberInput>\n    </FormControl>\n  );\n};\n\nexport default NumberInputControl;","import { Box, Flex, Switch, SwitchProps } from '@chakra-ui/react';\nimport { css } from '@emotion/react';\nimport { useField } from 'formik';\nimport React, { FC } from 'react';\nimport { BaseProps, FormControl } from './FormControl';\n\nexport type SwitchControlProps = BaseProps & { switchProps?: SwitchProps };\n\nexport const SwitchControl: FC<SwitchControlProps> = (\n  props: SwitchControlProps\n) => {\n  const { name, label, switchProps, ...rest } = props;\n  const [field, { error, touched }] = useField(name);\n\n  return (\n    <Box\n      css={css`\n        .chakra-form__label {\n          margin-bottom: 0;\n        }\n        .chakra-switch {\n          display: flex;\n          align-items: center;\n          margin-right: 0.75rem;\n        }\n        .chakra-form__error-message {\n          margin-top: 0;\n        }\n      `}\n    >\n      <FormControl\n        name={name}\n        label={label}\n        as={Flex}\n        alignItems=\"center\"\n        {...rest}\n      >\n        <Switch\n          {...field}\n          id={name}\n          isInvalid={!!error && touched}\n          isChecked={field.value}\n          {...switchProps}\n        />\n      </FormControl>\n    </Box>\n  );\n};\n\nexport default SwitchControl;","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { v4 } from 'uuid';\nimport { Dice, rollDice } from \"./util\";\nimport { NPC } from \"../Characters/NPC.interfaces\";\nimport * as Yup from 'yup';\n\nexport interface NPCState {\n  npcs: NPC[];\n}\n\nconst initialState: NPCState = {\n  npcs: [],\n};\n\nexport const npcSlice = createSlice({\n  name: 'npc',\n  initialState,\n  reducers: {\n    addNPC: (state, action: PayloadAction<Omit<NPC, 'id'>>) => {\n      const id = v4();\n      state.npcs.push({\n        ...action.payload,\n        id,\n      });\n    },\n    removeNPC: (state, action: PayloadAction<string>) => {\n      const index = state.npcs.findIndex((v) => v.id === action.payload);\n\n      if (index >= 0) {\n        state.npcs.splice(index, 1);\n      } else {\n        console.warn(`Invalid NPC ${action.payload}`);\n      }\n    },\n    refreshNPCs: (state, action: PayloadAction<NPC[] | undefined>) => {\n      if (action.payload) {\n        state.npcs.splice(0, state.npcs.length, ...action.payload);\n      }\n    },\n    modifyNPC: (state, action: PayloadAction<Partial<NPC>>) => {\n      const foundNPC = state.npcs.findIndex(i => i.id === action.payload.id);\n\n      if (foundNPC >= 0) {\n        state.npcs[foundNPC] = {\n          ...state.npcs[foundNPC],\n          ...action.payload,\n        };\n      }\n    },\n    rollAllNPCInitiative: (state) => {\n      state.npcs.forEach(i => {\n        i.initiative = rollDice(Dice.d20);\n      });\n    },\n  }\n});\n\nexport const modifyNPCValidationSchema = Yup.object({\n  name: Yup.string(),\n  currentHP: Yup.number().integer().required(),\n  maxHP: Yup.number().integer().required(),\n  tempHP: Yup.number().integer().default(0).required(),\n  armourClass: Yup.number().integer().required(),\n  initiative: Yup.number().integer().min(1).max(20).required(),\n  initiativeMod: Yup.number().integer().required(),\n  notes: Yup.string(),\n  conditions: Yup.array().of(Yup.string()).required(),\n  displayOnTurnOrder: Yup.boolean().required(),\n  isHostile: Yup.boolean().required(),\n  isFriendly: Yup.boolean().required(),\n  isBoss: Yup.boolean().required(),\n  showHealth: Yup.boolean().required(),\n  showInitiative: Yup.boolean().required(),\n  showAC: Yup.boolean().required(),\n  showName: Yup.boolean().required(),\n});\n\nexport const { addNPC, removeNPC, refreshNPCs, rollAllNPCInitiative, modifyNPC } = npcSlice.actions;\n\nexport default npcSlice.reducer;","import { Textarea, TextareaProps } from '@chakra-ui/react';\nimport { useField } from 'formik';\nimport React, { FC } from 'react';\nimport { BaseProps, FormControl } from './FormControl';\n\nexport type TextareaControlProps = BaseProps & {\n  textareaProps?: TextareaProps;\n};\n\nexport const TextareaControl: FC<TextareaControlProps> = (\n  props: TextareaControlProps\n) => {\n  const { name, label, textareaProps, ...rest } = props;\n  const [field] = useField(name);\n\n  return (\n    <FormControl name={name} label={label} {...rest}>\n      <Textarea {...field} id={name} {...textareaProps} />\n    </FormControl>\n  );\n};\n\nexport default TextareaControl;","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Text, Box, Flex, Divider, Tag, TagLabel, TagCloseButton, Input, TagRightIcon, InputProps } from \"@chakra-ui/react\";\nimport { useFormikContext, FieldArray } from \"formik\";\nimport { Character } from \"./Character.interfaces\";\nimport { NPC } from \"./NPC.interfaces\";\n\nexport const ModifyCharacterConditionsField = ({ character }: { character: Character }) => {\n  const context = useFormikContext<NPC>();\n  return (\n    <FieldArray\n      name=\"conditions\"\n      render={(arrayHelpers) => {\n        return (\n          <Box p={2} border=\"1px solid #00000066\" borderRadius={8} mb={2}>\n            <Flex justifyContent=\"center\"><Text fontWeight=\"bold\">Conditions</Text></Flex>\n            <Divider mt={1} mb={1} opacity=\"0.3\"/>\n            {context.values.conditions.map((condition, idx) => {\n              return (\n                <Tag\n                  variant=\"solid\"\n                  borderRadius=\"full\"\n                  size=\"lg\"\n                  m={2}\n                  key={idx}\n                >\n                  <TagLabel>{condition}</TagLabel>\n                  <TagCloseButton onClick={() => arrayHelpers.remove(idx)} />\n                </Tag>\n              );\n            })}\n            <Tag\n              variant=\"outline\"\n              borderRadius=\"full\"\n              size=\"lg\"\n              m={2}\n            >\n              <Input size=\"xs\" id={`tag-input-${character.id}`}></Input>\n              <TagRightIcon as={AddIcon} cursor=\"pointer\" onClick={() => {\n                const element = document.querySelector(`#tag-input-${character.id}`) as InputProps;\n                if (element?.value) {\n                  const tagInput = element.value.toString();\n                  element.value = '';\n                  arrayHelpers.push(tagInput);\n                }\n              }} />\n            </Tag>\n          </Box>\n        )\n      }}\n    />\n  );\n}","import { Accordion, AccordionButton, AccordionIcon, AccordionItem, AccordionPanel, Box, Button, FormControl, FormLabel, Grid, GridItem, HStack, Icon, SimpleGrid, Spacer, Text, Tooltip, VStack } from \"@chakra-ui/react\";\nimport { Form, Formik, useFormikContext } from \"formik\";\nimport { AiFillDelete } from \"react-icons/ai\";\nimport { GiDiceTwentyFacesTwenty } from \"react-icons/gi\";\nimport { ImRedo } from \"react-icons/im\";\nimport { IoMdSave } from \"react-icons/io\";\nimport { NumberInputControl, SwitchControl } from \"../common/formik-chakra\";\nimport TextareaControl from \"../common/formik-chakra/TextareaControl\";\nimport { useAppDispatch } from \"../common/hooks\";\nimport { modifyNPC, removeNPC } from \"../common/npcSlice\";\nimport { modifyNPCValidationSchema } from \"../common/npcSlice\";\nimport { Dice, rollDice } from \"../common/util\";\nimport { ModifyCharacterConditionsField } from \"./ModifyCharacterConditionsField\";\nimport { NPC } from \"./NPC.interfaces\";\n\ninterface ModifyNPCFormProps {\n  npc: NPC;\n}\n\nexport const ModifyNPCForm = ({ npc }: ModifyNPCFormProps) => {\n  const dispatch = useAppDispatch();\n\n  const modifyNPCAction = (npc: NPC) => dispatch(modifyNPC(npc));\n  const removeNPCAction = (id: string) => dispatch(removeNPC(id));\n\n  const NPCModifyStatFields = () => {\n    const editStatFields: Array<[string, string]> = [\n      ['AC: ', 'armourClass'],\n      ['Initiative: ', 'initiative'],\n      ['Init. Mod: ', 'initiativeMod'],\n      ['Max HP: ', 'maxHP'],\n    ];\n\n    const { setFieldValue } = useFormikContext<NPC>();\n    return (\n      <AccordionItem>\n        <AccordionButton>\n          <Box flex=\"1\" textAlign=\"left\">\n            <strong>Edit Stats</strong>\n          </Box>\n          <AccordionIcon />\n        </AccordionButton>\n        <AccordionPanel>\n          <Grid\n            fontSize=\"sm\"\n            templateColumns=\"repeat(4, 1fr)\"\n            templateRows=\"repeat(2, 1fr)\"\n            gap={4}\n          >\n            <GridItem\n              colSpan={4}\n            >\n              <Button \n                width=\"100%\" \n                onClick={() => setFieldValue('initiative', rollDice(Dice.d20))}\n                variant=\"outline\"\n                rightIcon={<Icon as={GiDiceTwentyFacesTwenty} />}\n              >\n                Roll Initiative\n              </Button>\n            </GridItem>\n            {\n              editStatFields.map(([displayString, value]) => {\n                return (\n                  <GridItem key={value}>\n                    <HStack>\n                      <Text>{displayString}</Text>\n                      <NumberInputControl hideError name={value} width=\"8em\" />\n                    </HStack>\n                  </GridItem>\n                );\n              })\n            }\n          </Grid>\n        </AccordionPanel>\n      </AccordionItem>\n    );\n  }\n\n  const NPCModifyActions = ({ npc }: { npc: NPC }) => {\n    const context = useFormikContext<NPC>();\n\n    return (\n      <HStack mt={4}>\n        <Tooltip label=\"Save\" placement=\"top\">\n          <Button\n            width=\"100%\"\n            type=\"submit\"\n            hidden={!context.dirty}\n            variant=\"solid\"\n            colorScheme=\"green\"\n          >\n            <Icon as={IoMdSave} />\n          </Button>\n        </Tooltip>\n        <Tooltip label=\"Reset\" placement=\"top\">\n          <Button\n            width=\"100%\"\n            type=\"reset\"\n            hidden={!context.dirty}\n            variant=\"solid\"\n          >\n            <Icon as={ImRedo} />\n          </Button>\n        </Tooltip>\n        <Tooltip label=\"Delete\" placement=\"top\">\n          <Button\n            width=\"100%\"\n            onClick={() => removeNPCAction(npc.id)}\n            variant=\"solid\"\n            colorScheme=\"red\"\n          >\n            <Icon as={AiFillDelete} />\n          </Button>\n        </Tooltip>\n      </HStack>\n    );\n  };\n\n  return (\n    <Formik\n      initialValues={npc}\n      onSubmit={(values, actions) => {\n        modifyNPCAction(values);\n        actions.resetForm();\n      }}\n      enableReinitialize\n      validationSchema={modifyNPCValidationSchema}\n    >\n      <Box\n        className=''\n        width=\"100%\"\n        id={`npc-${npc.id}`}\n        border=\"0.2em solid #55000066\"\n        borderRadius={10}\n        p={4}\n      >\n        <Form>\n          <HStack\n            p={1}\n            mb={2}>\n            <Box\n              textAlign=\"center\"\n              width=\"100%\"\n              backgroundColor=\"darkred\"\n              color=\"white\"\n              borderRadius={8}\n              p={2}\n            >\n              <Text fontWeight=\"bold\">{npc.name}</Text>\n            </Box>\n            <NPCModifyActions npc={npc} />\n          </HStack>\n          <SimpleGrid templateColumns=\"repeat(3, 1fr)\" mt={4} mb={4}>\n            <GridItem>\n              <VStack alignItems=\"flex-start\">\n                <Box>\n                  <HStack>\n                    <Text fontWeight=\"bold\">THP </Text>\n                    <NumberInputControl hideError name=\"tempHP\" width=\"6em\" />\n                  </HStack>\n                </Box>\n                <Box>\n                  <HStack>\n                    <Text fontWeight=\"bold\">HP </Text>\n                    <NumberInputControl hideError name=\"currentHP\" width=\"6em\" />\n                    <Text>/ {npc.maxHP}</Text>\n                  </HStack>\n                </Box>\n                <Text>AC {npc.armourClass}, Init. {npc.initiative + npc.initiativeMod} ({npc.initiative}<Icon as={GiDiceTwentyFacesTwenty}></Icon> {npc.initiativeMod >= 0 ? '+' : '-'} {Math.abs(npc.initiativeMod)})</Text>\n              </VStack>\n            </GridItem>\n            <GridItem colSpan={2}>\n              <TextareaControl\n                name=\"notes\"\n                textareaProps={{\n                  resize: 'none',\n                  height: '10em',\n                }}\n              />\n            </GridItem>\n          </SimpleGrid>\n          <ModifyCharacterConditionsField character={npc} />\n          <Accordion allowToggle allowMultiple>\n            <NPCModifyStatFields />\n            <AccordionItem>\n              <AccordionButton>\n                <Box flex=\"1\" textAlign=\"left\">\n                  <strong>Options</strong>\n                </Box>\n                <AccordionIcon />\n              </AccordionButton>\n              <AccordionPanel>\n                <Grid\n                  fontSize=\"sm\"\n                  templateColumns=\"repeat(3, 1fr)\"\n                  templateRows=\"repeat(2, 1fr)\"\n                  gap={6}\n                >\n                  {\n                    ([\n                      ['Reveal Name', 'showName'],\n                      ['Reveal Health', 'showHealth'],\n                      ['Reveal Armour Class', 'showAC'],\n                      ['Reveal Initiative', 'showInitiative'],\n                      ['Show in Turn Order', 'displayOnTurnOrder'],\n                    ] as Array<[string, keyof NPC]>).map(([displayString, key]) => {\n                      return (\n                        <FormControl display=\"flex\" alignItems=\"center\" key={key}>\n                          <FormLabel mb=\"0\">\n                            {displayString}\n                          </FormLabel>\n                          <Spacer></Spacer>\n                          <SwitchControl name={key} />\n                        </FormControl>\n                      );\n                    })\n                  }\n                </Grid>\n              </AccordionPanel>\n            </AccordionItem>\n          </Accordion>\n        </Form>\n      </Box>\n    </Formik>\n  );\n};\n","import { AddIcon } from '@chakra-ui/icons';\nimport { Button, HStack, Icon, VStack } from '@chakra-ui/react';\nimport { Form, Formik } from 'formik';\nimport React from 'react';\nimport * as Yup from 'yup';\nimport { InputControl, NumberInputControl } from '../common/formik-chakra';\nimport { useAppDispatch, useAppSelector } from '../common/hooks';\nimport { addNPC } from '../common/npcSlice';\nimport { Dice, rollDice } from '../common/util';\nimport { ModifyNPCForm } from './ModifyNPCForm';\nimport { NPC } from './NPC.interfaces';\n\nexport function Enemies() {\n  const npcs = useAppSelector((state) => state.npcs.npcs.filter(i => i.isHostile));\n  const dispatch = useAppDispatch();\n\n  const addEnemyValidationSchema = Yup.object({\n    name: Yup.string().required().label('Name'),\n    maxHP: Yup.number().integer().moreThan(0).required().label('Maximum HP'),\n    initiativeMod: Yup.number().integer().required().label('Initiative Modifier'),\n    armourClass: Yup.number().integer().moreThan(0).default(10).label('Armour Class'),\n  });\n\n  const AddNPCForm = () => {\n    const addFormFields: Array<[string, keyof NPC, typeof InputControl | typeof NumberInputControl]> = [\n      ['Enemy Name', 'name', InputControl],\n      ['Maximum HP', 'maxHP', NumberInputControl],\n      ['Initiative Modifier', 'initiativeMod', NumberInputControl],\n      ['Armour Class', 'armourClass', NumberInputControl]\n    ];\n    return (\n      <Formik\n        initialValues={{\n          name: '',\n          maxHP: 0,\n          initiativeMod: 0,\n          armourClass: 0,\n        }}\n        validationSchema={addEnemyValidationSchema}\n        onSubmit={\n          (values, actions) => {\n            dispatch(addNPC({\n              name: values.name,\n              maxHP: values.maxHP,\n              currentHP: values.maxHP,\n              tempHP: 0,\n              initiative: rollDice(Dice.d20),\n              initiativeMod: values.initiativeMod,\n              armourClass: values.armourClass,\n              conditions: [],\n              displayOnTurnOrder: true,\n              notes: '',\n              isFriendly: false,\n              isHostile: true,\n              isBoss: false,\n              showHealth: false,\n              showInitiative: false,\n              showAC: false,\n              showName: false,\n            }));\n            actions.resetForm();\n          }\n        }\n      >\n        <Form>\n          <HStack>\n            {\n              addFormFields.map(([label, key, IC]) => {\n                return <IC\n                  hideError\n                  mt={4}\n                  mb={4}\n                  name={key} label={label} key={key}\n                />;\n              })\n            }\n          </HStack>\n          <Button\n            mb={4}\n            width=\"100%\"\n            type=\"submit\"\n            variant=\"solid\"\n            colorScheme=\"green\"\n            rightIcon={<Icon as={AddIcon} />}\n          >\n            Add Enemy\n          </Button>\n        </Form>\n      </Formik>\n    )\n  }\n\n  return (\n    <>\n      <AddNPCForm />\n      <VStack>\n        {\n          npcs.map(npc => (\n            <ModifyNPCForm\n              key={npc.id}\n              npc={npc}\n            />\n          ))\n        }\n      </VStack>\n    </>\n  );\n}","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Player } from \"../Characters/Player.interfaces\";\nimport { v4 } from 'uuid';\nimport { Dice, rollDice } from \"./util\";\nimport * as Yup from 'yup';\n\nexport interface PlayerState {\n  players: Player[];\n}\n\nconst initialState: PlayerState = {\n  players: [],\n};\n\nexport const playerSlice = createSlice({\n  name: 'player',\n  initialState,\n  reducers: {\n    addPlayer: (state, action: PayloadAction<Omit<Player, 'id'>>) => {\n      const id = v4();\n      state.players.push({\n        ...action.payload,\n        id,\n      });\n    },\n    removePlayer: (state, action: PayloadAction<string>) => {\n      const index = state.players.findIndex((v) => v.id === action.payload);\n\n      if (index >= 0) {\n        state.players.splice(index, 1);\n      } else {\n        console.warn(`Invalid player ${action.payload}`);\n      }\n    },\n    refreshPlayers: (state, action: PayloadAction<Player[] | undefined>) => {\n      if (action.payload) {\n        state.players.splice(0, state.players.length, ...action.payload);\n      }\n    },\n    modifyPlayer: (state, action: PayloadAction<Partial<Player>>) => {\n      const foundPlayer = state.players.findIndex(i => i.id === action.payload.id);\n\n      if (foundPlayer >= 0) {\n        state.players[foundPlayer] = {\n          ...state.players[foundPlayer],\n          ...action.payload,\n        };\n      }\n    },\n    rollAllPlayerInitiative: (state) => {\n      state.players.forEach(i => {\n        i.initiative = rollDice(Dice.d20);\n      });\n    },\n  }\n});\n\nexport const modifyPlayerValidationSchema = Yup.object({\n  name: Yup.string(),\n  currentHP: Yup.number().integer().required(),\n  maxHP: Yup.number().integer().required(),\n  tempHP: Yup.number().integer().default(0).required(),\n  armourClass: Yup.number().integer().required(),\n  initiative: Yup.number().integer().min(1).max(20).required(),\n  initiativeMod: Yup.number().integer().required(),\n  notes: Yup.string(),\n  conditions: Yup.array().of(Yup.string()).required(),\n  displayOnTurnOrder: Yup.boolean().required(),\n});\n\nexport const { addPlayer, removePlayer, refreshPlayers, rollAllPlayerInitiative, modifyPlayer } = playerSlice.actions;\n\nexport default playerSlice.reducer;","import { Accordion, AccordionButton, AccordionIcon, AccordionItem, AccordionPanel, Box, Button, FormControl, FormLabel, Grid, GridItem, HStack, Icon, SimpleGrid, Spacer, Text, Tooltip, VStack } from \"@chakra-ui/react\";\nimport { Form, Formik, useFormikContext } from \"formik\";\nimport { AiFillDelete } from \"react-icons/ai\";\nimport { GiDiceTwentyFacesTwenty } from \"react-icons/gi\";\nimport { ImRedo } from \"react-icons/im\";\nimport { IoMdSave } from \"react-icons/io\";\nimport { NumberInputControl, SwitchControl } from \"../common/formik-chakra\";\nimport TextareaControl from \"../common/formik-chakra/TextareaControl\";\nimport { useAppDispatch } from \"../common/hooks\";\nimport { modifyPlayerValidationSchema, modifyPlayer, removePlayer } from \"../common/playerSlice\";\nimport { Dice, rollDice } from \"../common/util\";\nimport { ModifyCharacterConditionsField } from \"./ModifyCharacterConditionsField\";\nimport { Player } from \"./Player.interfaces\";\n\ninterface ModifyPlayerFormProps {\n  player: Player;\n}\n\nexport const ModifyPlayerForm = ({ player }: ModifyPlayerFormProps) => {\n  const dispatch = useAppDispatch();\n\n  const modifyPlayerAction = (player: Player) => dispatch(modifyPlayer(player));\n  const removePlayerAction = (id: string) => dispatch(removePlayer(id));\n\n  const PlayerModifyStatFields = () => {\n    const editStatFields: Array<[string, string]> = [\n      ['AC: ', 'armourClass'],\n      ['Initiative: ', 'initiative'],\n      ['Init. Mod: ', 'initiativeMod'],\n      ['Max HP: ', 'maxHP'],\n    ];\n\n    const { setFieldValue } = useFormikContext<Player>();\n    return (\n      <AccordionItem>\n        <AccordionButton>\n          <Box flex=\"1\" textAlign=\"left\">\n            <strong>Edit Stats</strong>\n          </Box>\n          <AccordionIcon />\n        </AccordionButton>\n        <AccordionPanel>\n          <Grid\n            fontSize=\"sm\"\n            templateColumns=\"repeat(4, 1fr)\"\n            templateRows=\"repeat(2, 1fr)\"\n            gap={4}\n          >\n            <GridItem\n              colSpan={4}\n            >\n              <Button \n                width=\"100%\" \n                onClick={() => setFieldValue('initiative', rollDice(Dice.d20))}\n                variant=\"outline\"\n                rightIcon={<Icon as={GiDiceTwentyFacesTwenty} />}\n              >\n                Roll Initiative\n              </Button>\n            </GridItem>\n            {\n              editStatFields.map(([displayString, value]) => {\n                return (\n                  <GridItem key={value}>\n                    <HStack>\n                      <Text>{displayString}</Text>\n                      <NumberInputControl hideError name={value} width=\"8em\" />\n                    </HStack>\n                  </GridItem>\n                );\n              })\n            }\n          </Grid>\n        </AccordionPanel>\n      </AccordionItem>\n    );\n  }\n\n  const PlayerModifyActions = ({ player }: { player: Player }) => {\n    const context = useFormikContext<Player>();\n\n    return (\n      <HStack mt={4}>\n        <Tooltip label=\"Save\" placement=\"top\">\n          <Button\n            width=\"100%\"\n            type=\"submit\"\n            hidden={!context.dirty}\n            variant=\"solid\"\n            colorScheme=\"green\"\n          >\n            <Icon as={IoMdSave} />\n          </Button>\n        </Tooltip>\n        <Tooltip label=\"Reset\" placement=\"top\">\n          <Button\n            width=\"100%\"\n            type=\"reset\"\n            hidden={!context.dirty}\n            variant=\"solid\"\n          >\n            <Icon as={ImRedo} />\n          </Button>\n        </Tooltip>\n        <Tooltip label=\"Delete\" placement=\"top\">\n          <Button\n            width=\"100%\"\n            onClick={() => removePlayerAction(player.id)}\n            variant=\"solid\"\n            colorScheme=\"red\"\n          >\n            <Icon as={AiFillDelete} />\n          </Button>\n        </Tooltip>\n      </HStack>\n    );\n  };\n\n  return (\n    <Formik\n      initialValues={player}\n      onSubmit={(values, actions) => {\n        modifyPlayerAction(values);\n        actions.resetForm();\n      }}\n      enableReinitialize\n      validationSchema={modifyPlayerValidationSchema}\n    >\n      <Box\n        className=''\n        width=\"100%\"\n        id={`player-${player.id}`}\n        border=\"0.2em solid #00550066\"\n        borderRadius={10}\n        p={4}\n      >\n        <Form>\n          <HStack\n            p={1}\n            mb={2}>\n            <Box\n              textAlign=\"center\"\n              width=\"100%\"\n              backgroundColor=\"darkgreen\"\n              color=\"white\"\n              borderRadius={8}\n              p={2}\n            >\n              <Text fontWeight=\"bold\">{player.name}</Text>\n            </Box>\n            <PlayerModifyActions player={player} />\n          </HStack>\n          <SimpleGrid templateColumns=\"repeat(3, 1fr)\" mt={4} mb={4}>\n            <GridItem>\n              <VStack alignItems=\"flex-start\">\n                <Box>\n                  <HStack>\n                    <Text fontWeight=\"bold\">THP </Text>\n                    <NumberInputControl hideError name=\"tempHP\" width=\"6em\" />\n                  </HStack>\n                </Box>\n                <Box>\n                  <HStack>\n                    <Text fontWeight=\"bold\">HP </Text>\n                    <NumberInputControl hideError name=\"currentHP\" width=\"6em\" />\n                    <Text>/ {player.maxHP}</Text>\n                  </HStack>\n                </Box>\n                <Text>AC {player.armourClass}, Init. {player.initiative + player.initiativeMod} ({player.initiative}<Icon as={GiDiceTwentyFacesTwenty}></Icon> {player.initiativeMod >= 0 ? '+' : '-'} {Math.abs(player.initiativeMod)})</Text>\n              </VStack>\n            </GridItem>\n            <GridItem colSpan={2}>\n              <TextareaControl\n                name=\"notes\"\n                textareaProps={{\n                  resize: 'none',\n                  height: '10em',\n                }}\n              />\n            </GridItem>\n          </SimpleGrid>\n          <ModifyCharacterConditionsField character={player} />\n          <Accordion allowToggle allowMultiple>\n            <PlayerModifyStatFields />\n            <AccordionItem>\n              <AccordionButton>\n                <Box flex=\"1\" textAlign=\"left\">\n                  <strong>Options</strong>\n                </Box>\n                <AccordionIcon />\n              </AccordionButton>\n              <AccordionPanel>\n                <Grid\n                  fontSize=\"sm\"\n                  templateColumns=\"repeat(3, 1fr)\"\n                  templateRows=\"repeat(1, 1fr)\"\n                  gap={6}\n                >\n                  {\n                    ([\n                      ['Show in Turn Order', 'displayOnTurnOrder'],\n                    ] as Array<[string, keyof Player]>).map(([displayString, key]) => {\n                      return (\n                        <FormControl display=\"flex\" alignItems=\"center\" key={key}>\n                          <FormLabel mb=\"0\">\n                            {displayString}\n                          </FormLabel>\n                          <Spacer></Spacer>\n                          <SwitchControl name={key} />\n                        </FormControl>\n                      );\n                    })\n                  }\n                </Grid>\n              </AccordionPanel>\n            </AccordionItem>\n          </Accordion>\n        </Form>\n      </Box>\n    </Formik>\n  );\n};\n","import { AddIcon } from '@chakra-ui/icons';\nimport { Button, HStack, Icon, VStack } from '@chakra-ui/react';\nimport { Form, Formik } from 'formik';\nimport React from 'react';\nimport * as Yup from 'yup';\nimport { InputControl, NumberInputControl } from '../common/formik-chakra';\nimport { useAppDispatch, useAppSelector } from '../common/hooks';\nimport { addPlayer } from '../common/playerSlice';\nimport { Dice, rollDice } from '../common/util';\nimport { ModifyPlayerForm } from './ModifyPlayerForm';\nimport { Player } from './Player.interfaces';\n\nexport function Players() {\n  const players = useAppSelector((state) => state.players.players);\n  const dispatch = useAppDispatch();\n\n  const addPlayerValidationSchema = Yup.object({\n    name: Yup.string().required().label('Name'),\n    maxHP: Yup.number().integer().moreThan(0).required().label('Maximum HP'),\n    initiativeMod: Yup.number().integer().required().label('Initiative Modifier'),\n    armourClass: Yup.number().integer().moreThan(0).default(10).label('Armour Class'),\n  });\n\n  const AddPlayerForm = () => {\n    const addFormFields: Array<[string, keyof Player, typeof InputControl | typeof NumberInputControl]> = [\n      ['Player Name', 'name', InputControl],\n      ['Maximum HP', 'maxHP', NumberInputControl],\n      ['Initiative Modifier', 'initiativeMod', NumberInputControl],\n      ['Armour Class', 'armourClass', NumberInputControl]\n    ];\n    return (\n      <Formik\n        initialValues={{\n          name: '',\n          maxHP: 0,\n          initiativeMod: 0,\n          armourClass: 0,\n        }}\n        validationSchema={addPlayerValidationSchema}\n        onSubmit={\n          (values, actions) => {\n            dispatch(addPlayer({\n              name: values.name,\n              maxHP: values.maxHP,\n              currentHP: values.maxHP,\n              tempHP: 0,\n              initiative: rollDice(Dice.d20),\n              initiativeMod: values.initiativeMod,\n              armourClass: values.armourClass,\n              conditions: [],\n              displayOnTurnOrder: true,\n              notes: '',\n            }));\n            actions.resetForm();\n          }\n        }\n      >\n        <Form>\n          <HStack>\n            {\n              addFormFields.map(([label, key, IC]) => {\n                return <IC\n                  hideError\n                  mt={4}\n                  mb={4}\n                  name={key} label={label} key={key}\n                />;\n              })\n            }\n          </HStack>\n          <Button\n            mb={4}\n            width=\"100%\"\n            type=\"submit\"\n            variant=\"solid\"\n            colorScheme=\"green\"\n            rightIcon={<Icon as={AddIcon} />}\n          >\n            Add Player\n          </Button>\n        </Form>\n      </Formik>\n    )\n  }\n\n  return (\n    <>\n      <AddPlayerForm />\n      <VStack>\n        {\n          players.map(player => (\n            <ModifyPlayerForm\n              key={player.id}\n              player={player}\n            />\n          ))\n        }\n      </VStack>\n    </>\n  );\n}","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\ninterface CampaignState {\n  currentTurnId: string;\n  campaignTitle: string,\n}\n\nconst initialState: CampaignState = {\n  currentTurnId: '',\n  campaignTitle: 'D&D Tracker',\n};\n\nexport const campaignSlice = createSlice({\n  name: 'campaign',\n  initialState,\n  reducers: {\n    setTurn: (state, action: PayloadAction<string>) => {\n      state.currentTurnId = action.payload;\n    },\n    setCampaignTitle: (state, action: PayloadAction<string>) => {\n      state.campaignTitle = action.payload;\n    }\n  },\n});\n\nexport const { setTurn, setCampaignTitle } = campaignSlice.actions;\n\nexport default campaignSlice.reducer;","import { configureStore } from '@reduxjs/toolkit';\nimport playerReducer from './playerSlice';\nimport campaignReducer from './campaignSlice';\nimport npcReducer from './npcSlice';\n\nconst APP_VERSION = \"0.0.2\";\n\nexport const loadFromLocalStorage = () => {\n  try {\n    const serialisedState = localStorage.getItem(`persistantState_${APP_VERSION}`);\n    if (serialisedState === null) return undefined;\n    return JSON.parse(serialisedState);\n  } catch (e) {\n    console.warn(e);\n    return undefined;\n  }\n}\n\nexport const store = configureStore({\n  reducer: {\n    players: playerReducer,\n    campaign: campaignReducer,\n    npcs: npcReducer,\n  },\n  preloadedState: loadFromLocalStorage(),\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nfunction saveToLocalStorage(state: RootState) {\n  try {\n    const serialisedState = JSON.stringify(state);\n    localStorage.setItem(`persistantState_${APP_VERSION}`, serialisedState);\n  } catch (e) {\n    console.warn(e);\n  }\n}\n\nstore.subscribe(() => {\n  if (document.hasFocus()) {\n    saveToLocalStorage(store.getState());\n  }\n});\n","import { Badge, Box, Grid, HStack, Icon, Text } from \"@chakra-ui/react\";\nimport React from 'react';\nimport { BsHeartFill } from \"react-icons/bs\";\nimport { GiCheckedShield, GiDiceTwentyFacesTwenty, GiWalkingBoot } from \"react-icons/gi\";\nimport { NPC } from \"../Characters/NPC.interfaces\";\n\ninterface EnemyTurnProps {\n  enemy: NPC;\n  isActive: boolean;\n  onClick: () => void;\n}\n\nexport function EnemyTurn({ enemy, isActive, onClick }: EnemyTurnProps) {\n  const tempHP = enemy.tempHP ? ` (${enemy.tempHP})` : '';\n\n  return (\n    <Box className='turn-block turn-block-enemy'\n      border=\"0.2em solid #AA000066\"\n      borderRadius=\"0.4em\"\n      opacity={isActive ? \"100%\" : \"40%\"}\n      cursor=\"pointer\"\n      onClick={onClick}\n    >\n      <Grid templateColumns=\"repeat(3, 1fr)\" fontSize=\"sm\">\n        <Text>{enemy.showName ? enemy.name : '???'}</Text>\n        {\n          enemy.showAC\n          && <Text><Icon as={GiCheckedShield}></Icon> {enemy.armourClass}</Text>\n        }\n        {\n          enemy.showHealth\n          ? <Text><Icon as={BsHeartFill} /> {enemy.currentHP}{tempHP} / {enemy.maxHP}</Text>\n          : <Text><Icon as={BsHeartFill} /> Damage Taken: {enemy.maxHP - enemy.currentHP}</Text>\n        }\n        {\n          enemy.showInitiative\n          && <Text><Icon as={GiWalkingBoot}></Icon> {enemy.initiative + enemy.initiativeMod} ({enemy.initiative}<Icon as={GiDiceTwentyFacesTwenty}></Icon> {enemy.initiativeMod >= 0 ? '+' : '-'} {Math.abs(enemy.initiativeMod)})</Text>\n        }\n      </Grid>\n      {\n        enemy.conditions.length > 0 && <HStack>\n          {enemy.conditions.map((i) => <Badge variant=\"solid\" key={enemy.conditions.findIndex(j => i === j)}>{i}</Badge>)}\n        </HStack>\n      }\n    </Box>\n  );\n}","import { Badge, Box, Grid, HStack, Icon, Text } from \"@chakra-ui/react\";\nimport React from 'react';\nimport { BsHeartFill } from \"react-icons/bs\";\nimport { GiCheckedShield, GiDiceTwentyFacesTwenty, GiWalkingBoot } from \"react-icons/gi\";\nimport { Player } from \"../Characters/Player.interfaces\";\n\ninterface PlayerTurnProps {\n  player: Player;\n  isActive: boolean;\n  onClick: () => void;\n}\n\nexport function PlayerTurn({ player, isActive, onClick }: PlayerTurnProps) {\n  const tempHP = player.tempHP ? ` (${player.tempHP})` : '';\n\n  return (\n    <Box\n      onClick={onClick}\n      className='turn-block turn-block-player'\n      border=\"0.2em solid #00AA0066\"\n      borderRadius=\"0.4em\"\n      opacity={isActive ? \"100%\" : \"40%\"}\n      cursor=\"pointer\"\n    >\n      <Grid templateColumns=\"repeat(4, 1fr)\" fontSize=\"sm\">\n        <Text>{player.name}</Text>\n        <Text><Icon as={GiCheckedShield}></Icon> {player.armourClass}</Text>\n        <Text><Icon as={BsHeartFill}></Icon> {player.currentHP}{tempHP} / {player.maxHP}</Text>\n        <Text><Icon as={GiWalkingBoot}></Icon> {player.initiative + player.initiativeMod} ({player.initiative}<Icon as={GiDiceTwentyFacesTwenty}></Icon> {player.initiativeMod >= 0 ? '+' : '-'} {Math.abs(player.initiativeMod)})</Text>\n      </Grid>\n      {\n        player.conditions.length > 0 && <HStack>\n          {player.conditions.map((i) => <Badge variant=\"solid\" key={player.conditions.findIndex(j => i === j)}>{i}</Badge>)}\n        </HStack>\n      }\n    </Box>\n  );\n}","import { Button, HStack, Icon, StackDivider, Text, VStack } from '@chakra-ui/react';\nimport React from 'react';\nimport { GiDiceTwentyFacesTwenty } from 'react-icons/gi';\nimport { Character } from '../Characters/Character.interfaces';\nimport { NPC } from '../Characters/NPC.interfaces';\nimport { Player } from '../Characters/Player.interfaces';\nimport { useAppDispatch, useAppSelector } from '../common/hooks';\nimport { setTurn } from '../common/campaignSlice';\nimport { rollAllPlayerInitiative } from '../common/playerSlice';\nimport { EnemyTurn } from './EnemyTurn';\nimport './Initiative.css';\nimport { PlayerTurn } from './PlayerTurn';\n\ntype NPCType = 'enemy' | 'ally' | 'neutral';\ntype CharacterType = 'player' | NPCType;\n\nexport function Initiative({ changePageMethod }: { changePageMethod: ({ type, id }: { type: string; id: string; }) => void }) {\n  const players = useAppSelector<Player[]>((state) => state.players.players);\n  const npcs = useAppSelector<NPC[]>((state) => state.npcs.npcs);\n  const currentTurnId = useAppSelector<string>((state) => state.campaign.currentTurnId);\n\n  const dispatch = useAppDispatch();\n\n  const getSortedTurns = () => {\n    const formattedPlayers: Array<{\n      character: Character;\n      type:  'player'\n    }> = players.map(i => ({\n      character: i,\n      type: 'player',\n    }));\n\n    const formattedNPCs: Array<{\n      character: Character;\n      type:  NPCType\n    }> = npcs.map(i => {\n      let type: NPCType = 'neutral';\n\n      if (i.isHostile) {\n        type = 'enemy';\n      } else if (i.isFriendly) {\n        type = 'ally';\n      }\n\n      return {\n        character: i,\n        type,\n      };\n    });\n\n    const sortedTurns: Array<{\n      character: Character;\n      type:  CharacterType\n    }> = [...formattedPlayers, ...formattedNPCs].filter(i => i.character.displayOnTurnOrder).sort((a, b) => (b.character.initiative + b.character.initiativeMod) - (a.character.initiative + a.character.initiativeMod));\n    \n    const returnValue = (array: Array<{\n      character: Character;\n      type:  CharacterType\n    }>): Array<{\n      isActive: boolean;\n      character: Character;\n      type: CharacterType\n    }> => {\n      return array.filter(i => i.character.displayOnTurnOrder).map((i, idx) => {\n        return {\n          isActive: idx === 0,\n          character: i.character,\n          type: i.type,\n        }\n      });\n    }\n\n    if (!currentTurnId) {\n      return returnValue(sortedTurns);\n    }\n\n    const currentTurnIndex = sortedTurns.findIndex(i => i.character.id === currentTurnId) || 0;\n    const getSortedByNextActiveTurn = () => [...sortedTurns.slice(currentTurnIndex + 1, sortedTurns.length), ...sortedTurns.slice(0, currentTurnIndex + 1)];\n\n    return returnValue(getSortedByNextActiveTurn());\n  };\n\n  const rollInitiativesAction = () => {\n    dispatch(rollAllPlayerInitiative());\n    dispatch(setTurn(''));\n  };\n\n  const setTurnAction = () => {\n    const turns = getSortedTurns();\n    if (getSortedTurns().length < 1) {\n      return;\n    }\n\n    if (!currentTurnId) {\n      dispatch(setTurn(turns[0].character.id));\n      return;\n    }\n\n    const currentTurnCharacter = turns.findIndex(i => i.character.id === currentTurnId);\n\n    if (!currentTurnCharacter) {\n      dispatch(setTurn(turns[1].character.id));\n      return;\n    }\n    const nextCharacter = turns[(currentTurnCharacter + 1) % turns.length];\n    dispatch(setTurn(nextCharacter.character.id));\n  };\n\n  return (\n    <div>\n      <VStack divider={<StackDivider color=\"gray.200\"></StackDivider>}>\n        {getSortedTurns().map(({ character, isActive, type }) => {\n          if (type === 'player') {\n            return <PlayerTurn onClick={() => changePageMethod({ type: 'player', id: character.id })} isActive={isActive} player={character} key={character.id} />;\n          } else if (type === 'enemy') {\n            const npc = character as NPC;\n            return <EnemyTurn onClick={() => changePageMethod({ type: 'npc', id: character.id })} isActive={isActive} enemy={npc} key={character.id} />;\n          }\n\n          return false;\n        })};\n      </VStack>\n      <HStack\n        position=\"fixed\"\n        bottom=\"0\"\n        left=\"0\"\n        backgroundColor=\"white\"\n        width=\"100%\"\n      >\n        <Button onClick={rollInitiativesAction} width=\"100%\">Roll Initiative <Icon as={GiDiceTwentyFacesTwenty}></Icon></Button>\n        <Button onClick={setTurnAction} width=\"100%\">Next Turn</Button>\n      </HStack>\n    </div>\n  );\n}","import { Box, Center, Container, Divider, Drawer, DrawerBody, DrawerCloseButton, DrawerContent, DrawerFooter, DrawerHeader, DrawerOverlay, Flex, Heading, Icon, IconButton, Input, Text, useDisclosure, VStack } from '@chakra-ui/react';\nimport React, { useRef, useState } from 'react';\nimport { GiHamburgerMenu } from 'react-icons/gi';\nimport { Enemies } from '../Characters/Enemies';\nimport { Players } from '../Characters/Players';\nimport { useAppDispatch, useAppSelector } from '../common/hooks';\nimport { refreshNPCs } from '../common/npcSlice';\nimport { refreshPlayers } from '../common/playerSlice';\nimport { loadFromLocalStorage, RootState } from '../common/store';\nimport { Initiative } from '../Initiative';\nimport './Tracker.css';\nimport { GoPencil } from 'react-icons/go';\nimport { setCampaignTitle, setTurn } from '../common/campaignSlice';\nimport { IoMdSave } from 'react-icons/io';\nimport { ImRedo } from 'react-icons/im';\n\nexport function Tracker() {\n  const campaignTitle = useAppSelector((state) => state.campaign.campaignTitle);\n\n  const dispatch = useAppDispatch();\n  const setTitleAction = (campaignTitle: string) => dispatch(setCampaignTitle(campaignTitle));\n\n  const [editableCampaignTitle, setEditableCampaignTitle] = useState(campaignTitle);\n\n  window.addEventListener('storage', () => {\n    const persistedStorage: RootState = loadFromLocalStorage();\n\n    if (!document.hasFocus()) {\n      const refreshActions = [\n        refreshPlayers(persistedStorage?.players?.players || []),\n        refreshNPCs(persistedStorage?.npcs?.npcs || []),\n        setCampaignTitle(persistedStorage?.campaign?.campaignTitle || ''),\n        setTurn(persistedStorage?.campaign?.currentTurnId || '')\n      ];\n      refreshActions.map(dispatch);\n    }\n  });\n\n  const [pageNumber, setPageNumber] = useState(0);\n  const [editTitleEnabled, setEditTitleEnabled] = useState(false);\n\n  const pages: Record<string, number> = {\n    initiative: 0,\n    player: 1,\n    enemy: 2,\n    npc: 3,\n  };\n\n  const pageTitles = ['Turn Order', 'Players', 'Enemies'];\n\n  const gotoPage = (id: number) => setPageNumber(id);\n\n  const gotoElementPage = ({ type, id }: { type: string; id: string; }) => {\n    if (pages[type]) {\n      setPageNumber(pages[type]);\n      setTimeout(() => {\n        document.querySelector(`#${type}-${id}`)?.scrollIntoView(true);\n      }, 100);\n    }\n  }\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const drawerMenu = (\n    <>\n      <div className=\"drawer-button\">\n        <Box pt={3} pb={3} pl={4} pr={4} cursor=\"pointer\" onClick={onOpen}>\n          <Icon as={GiHamburgerMenu} />\n        </Box>\n      </div>\n      {/* <Button className=\"drawer-button\" variant=\"ghost\" onClick={onOpen}>\n        <Icon as={GiHamburgerMenu} />\n      </Button> */}\n      <Drawer\n        isOpen={isOpen}\n        placement=\"left\"\n        onClose={onClose}\n      >\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerCloseButton />\n          <DrawerHeader>Menu</DrawerHeader>\n\n          <DrawerBody>\n            <VStack spacing={5}>\n              {\n                pageTitles.map((label, idx) => (\n                  <Text\n                    cursor=\"pointer\"\n                    width=\"100%\"\n                    textAlign=\"left\"\n                    onClick={() => gotoPage(idx)}\n                    backgroundColor={pageNumber === idx ? \"black\" : undefined}\n                    p={4}\n                    fontWeight=\"bold\"\n                    color={pageNumber === idx ? \"white\" : undefined}\n                    key={idx}\n                  >\n                    {label}\n                  </Text>\n                ))\n              }\n            </VStack>\n          </DrawerBody>\n\n          <DrawerFooter>\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n\n  return (\n    <div className=\"Tracker\">\n      <Container maxW=\"900\" minW=\"680\">\n        <Flex\n          mb={4}\n          width=\"100%\"\n          justifyContent=\"center\"\n          alignItems=\"center\">\n          {\n            !editTitleEnabled && (\n              <Flex\n                justifyContent=\"center\"\n                alignItems=\"center\">\n                <Heading>{campaignTitle}</Heading>\n                <IconButton\n                  ml={2}\n                  aria-label=\"Edit Title\"\n                  icon={<Icon as={GoPencil}/>}\n                  onClick={() => {\n                    setEditTitleEnabled(true);\n                  }}\n                />\n              </Flex>\n            )\n          }\n          {\n            editTitleEnabled && (\n              <Flex\n                justifyContent=\"center\"\n                alignItems=\"center\"\n              >\n                <Input\n                  onBlur={(e) => setEditableCampaignTitle(e.target.value)}\n                />\n                <IconButton \n                  ml={2} \n                  aria-label=\"Save\"\n                  icon={<Icon as={IoMdSave}/>}\n                  onClick={() => {\n                    setEditTitleEnabled(false);\n                    setTitleAction(editableCampaignTitle);\n                  }}\n                />\n                <IconButton \n                  ml={2} \n                  aria-label=\"Reset\"\n                  icon={<Icon as={ImRedo}/>}\n                  onClick={() => setEditTitleEnabled(false)}\n                />\n              </Flex>\n            )\n          }\n        </Flex>\n        <Center><Heading size=\"md\">{pageTitles[pageNumber]}</Heading></Center>\n        <Divider mt={4} mb={4} />\n        <Box hidden={pageNumber !== pages.initiative}>\n          <Initiative changePageMethod={gotoElementPage}/>\n        </Box>\n        <Box hidden={pageNumber !== pages.player}>\n          <Players />\n        </Box>\n        <Box hidden={pageNumber !== pages.enemy}>\n          <Enemies />\n        </Box>\n      </Container>\n      {drawerMenu}\n    </div>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider } from '@chakra-ui/react';\nimport { Tracker } from './Tracker';\nimport { Provider } from 'react-redux';\nimport { store } from './common/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <ChakraProvider>\n      <React.StrictMode>\n        <Tracker />\n      </React.StrictMode>\n    </ChakraProvider>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}