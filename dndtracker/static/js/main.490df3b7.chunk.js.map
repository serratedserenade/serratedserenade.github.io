{"version":3,"sources":["common/Enums.ts","reportWebVitals.ts","common/util.ts","common/formik-chakra/FormControl.tsx","common/formik-chakra/InputControl.tsx","common/formik-chakra/NumberInputControl.tsx","common/hooks.ts","common/npcSlice.ts","Characters/Enemies.tsx","common/playerSlice.ts","Characters/Players.tsx","common/initiativeSlice.ts","common/store.ts","Initiative/EnemyTurn.tsx","Initiative/PlayerTurn.tsx","Initiative/Initiative.tsx","Tracker/Tracker.tsx","index.tsx"],"names":["Condition","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Dice","ConditionColour","Blinded","Charmed","Deafened","Frightened","Grappled","Incapacitated","Invisible","Paralyzed","Petrified","Poisoned","Prone","Restrained","Stunned","Unconscious","Exhaustion","Dead","Away","FormControl","props","children","name","label","helperText","rest","useField","error","touched","isInvalid","htmlFor","InputControl","inputProps","field","id","NumberInputControl","showStepper","numberInputProps","setFieldValue","useFormikContext","onChange","value","Number","$setFieldValue","useAppDispatch","useDispatch","useAppSelector","useSelector","rollDice","max","Math","ceil","random","npcSlice","createSlice","initialState","npcs","reducers","addNPC","state","action","v4","push","payload","removeNPC","index","findIndex","v","splice","console","warn","refreshNPCs","length","modifyNPC","foundNPC","i","rollAllNPCInitiative","forEach","initiative","d20","actions","Enemies","enemies","filter","isHostile","dispatch","columns","React","useMemo","Header","accessor","hpString","currentHP","tempHP","maxHP","initiativeMod","Cell","row","direction","map","textTransform","colorScheme","onClick","as","AiFillDelete","useTable","data","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","validationSchema","Yup","required","integer","moreThan","armourClass","default","initialValues","onSubmit","values","conditions","displayOnTurnOrder","notes","isFriendly","isBoss","showHealth","showInitiative","showAC","showName","resetForm","m","width","type","enemy","rowId","className","border","p","templateColumns","placeholder","toString","GiDiceTwentyFacesTwenty","abs","variant","j","allowToggle","allowMultiple","flex","textAlign","fontSize","templateRows","gap","colSpan","display","alignItems","mb","enemyOptions","size","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","getRowProps","cells","cell","getCellProps","playerSlice","players","addPlayer","removePlayer","refreshPlayers","modifyPlayer","foundPlayer","rollAllPlayerInitiative","Players","initiativeSlice","currentTurnId","setTurn","loadFromLocalStorage","serialisedState","localStorage","getItem","JSON","parse","e","store","configureStore","reducer","playerReducer","initiativeReducer","npcReducer","preloadedState","subscribe","document","hasFocus","stringify","setItem","saveToLocalStorage","getState","EnemyTurn","isActive","borderRadius","opacity","cursor","GiCheckedShield","BsHeartFill","GiWalkingBoot","PlayerTurn","player","Initiative","changePageMethod","getSortedTurns","formattedPlayers","character","formattedNPCs","sortedTurns","sort","a","b","returnValue","array","idx","currentTurnIndex","slice","divider","color","npc","position","bottom","left","backgroundColor","turns","currentTurnCharacter","nextCharacter","Tracker","window","addEventListener","persistedStorage","useState","pageNumber","setPageNumber","pages","useDisclosure","isOpen","onOpen","onClose","drawerMenu","pt","pb","pl","pr","GiHamburgerMenu","placement","spacing","maxW","minW","isFitted","setTimeout","querySelector","scrollIntoView","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.490df3b7.chunk.js","sourcesContent":["export enum Condition {\n  Blinded = 'Blinded',\n  Charmed = 'Charmed',\n  Deafened = 'Deafened',\n  Frightened = 'Frightened',\n  Grappled = 'Grappled',\n  Incapacitated = 'Incapacitated',\n  Invisible = 'Invisible',\n  Paralyzed = 'Paralyzed',\n  Petrified = 'Petrified',\n  Poisoned = 'Poisoned',\n  Prone = 'Prone',\n  Restrained = 'Restrained',\n  Stunned = 'Stunned',\n  Unconscious = 'Unconscious',\n  Exhaustion = 'Exhaustion',\n  Dead = 'Dead',\n\n  // Player not present\n  Away = 'Away',\n};\n\nexport const ConditionColour: Record<Condition | string, string> = {\n  [Condition.Blinded]: 'black',\n  [Condition.Charmed]: 'pink',\n  [Condition.Deafened]: 'gray',\n  [Condition.Frightened]: 'black',\n  [Condition.Grappled]: 'red',\n  [Condition.Incapacitated]: 'gray',\n  [Condition.Invisible]: 'white',\n  [Condition.Paralyzed]: 'yellow',\n  [Condition.Petrified]: 'gray',\n  [Condition.Poisoned]: 'green',\n  [Condition.Prone]: 'red',\n  [Condition.Restrained]: 'orange',\n  [Condition.Stunned]: 'yellow',\n  [Condition.Unconscious]: 'black',\n  [Condition.Exhaustion]: 'red',\n  [Condition.Dead]: 'red',\n\n  [Condition.Away]: 'teal',\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export enum Dice {\n  d100 = 100,\n  d20 = 20,\n  d12 = 12,\n  d10 = 10,\n  d8 = 8,\n  d6 = 6,\n  d4 = 4,\n  d2 = 2\n}\n\nexport const rollDice = (max: number): number => Math.ceil(Math.random() * max);\n\nexport const rollAdvantage = (max: number): number => Math.max(rollDice(max), rollDice(max));\n\nexport const rollDisadvantage = (max: number): number => Math.min(rollDice(max), rollDice(max))","\nimport {\n  FormControl as ChakraFormControl,\n  FormControlProps,\n  FormErrorMessage,\n  FormHelperText,\n  FormLabel,\n} from '@chakra-ui/react';\nimport { useField } from 'formik';\nimport React, { FC } from 'react';\n\nexport interface BaseProps extends FormControlProps {\n  name: string;\n  label?: string;\n  helperText?: string;\n}\n\nexport const FormControl: FC<BaseProps> = (props: BaseProps) => {\n  const { children, name, label, helperText, ...rest } = props;\n  const [, { error, touched }] = useField(name);\n\n  return (\n    <ChakraFormControl isInvalid={!!error && touched} {...rest}>\n      {label && <FormLabel htmlFor={name}>{label}</FormLabel>}\n      {children}\n      {error && <FormErrorMessage>{error}</FormErrorMessage>}\n      {helperText && <FormHelperText>{helperText}</FormHelperText>}\n    </ChakraFormControl>\n  );\n};\n\nexport default FormControl;","\nimport { Input, InputProps } from '@chakra-ui/react';\nimport { useField } from 'formik';\nimport React, { FC } from 'react';\nimport { BaseProps, FormControl } from './FormControl';\n\nexport type InputControlProps = BaseProps & { inputProps?: InputProps };\n\nexport const InputControl: FC<InputControlProps> = (\n  props: InputControlProps\n) => {\n  const { name, label, inputProps, ...rest } = props;\n  const [field] = useField(name);\n\n  return (\n    <FormControl name={name} label={label} {...rest}>\n      <Input {...field} id={name} {...inputProps} />\n    </FormControl>\n  );\n};\n\nexport default InputControl;","import {\n  NumberDecrementStepper,\n  NumberIncrementStepper,\n  NumberInput,\n  NumberInputField,\n  NumberInputProps,\n  NumberInputStepper,\n} from '@chakra-ui/react';\nimport { useField, useFormikContext } from 'formik';\nimport React, { FC, ReactNode } from 'react';\nimport { BaseProps, FormControl } from './FormControl';\n\nexport type NumberInputControlProps = BaseProps & {\n  numberInputProps?: NumberInputProps;\n  showStepper?: boolean;\n  children?: ReactNode;\n};\n\nexport const NumberInputControl: FC<NumberInputControlProps> = (\n  props: NumberInputControlProps\n) => {\n  const {\n    name,\n    label,\n    showStepper = true,\n    children,\n    numberInputProps,\n    ...rest\n  } = props;\n  const [field, { error, touched }] = useField(name);\n  const { setFieldValue } = useFormikContext();\n\n  const $setFieldValue = (name: string) => (value: unknown) =>\n    setFieldValue(name, Number(value));\n\n  return (\n    <FormControl name={name} label={label} {...rest}>\n      <NumberInput\n        {...field}\n        id={name}\n        onChange={$setFieldValue(name)}\n        isInvalid={!!error && touched}\n        {...numberInputProps}\n      >\n        <NumberInputField name={name} />\n        {showStepper && (\n          <NumberInputStepper>\n            <NumberIncrementStepper />\n            <NumberDecrementStepper />\n          </NumberInputStepper>\n        )}\n        {children}\n      </NumberInput>\n    </FormControl>\n  );\n};\n\nexport default NumberInputControl;","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { v4 } from 'uuid';\nimport { Dice, rollDice } from \"./util\";\nimport { NPC } from \"../Characters/NPC.interfaces\";\n\nexport interface NPCState {\n  npcs: NPC[];\n}\n\nconst initialState: NPCState = {\n  npcs: [],\n};\n\nexport const npcSlice = createSlice({\n  name: 'npc',\n  initialState,\n  reducers: {\n    addNPC: (state, action: PayloadAction<Omit<NPC, 'id'>>) => {\n      const id = v4();\n      state.npcs.push({\n        ...action.payload,\n        id,\n      });\n    },\n    removeNPC: (state, action: PayloadAction<string>) => {\n      const index = state.npcs.findIndex((v) => v.id === action.payload);\n\n      if (index >= 0) {\n        state.npcs.splice(index, 1);\n      } else {\n        console.warn(`Invalid NPC ${action.payload}`);\n      }\n    },\n    refreshNPCs: (state, action: PayloadAction<NPC[] | undefined>) => {\n      if (action.payload) {\n        state.npcs.splice(0, state.npcs.length, ...action.payload);\n      }\n    },\n    modifyNPC: (state, action: PayloadAction<Partial<NPC>>) => {\n      const foundNPC = state.npcs.findIndex(i => i.id === action.payload.id);\n\n      if (foundNPC >= 0) {\n        state.npcs[foundNPC] = {\n          ...state.npcs[foundNPC],\n          ...action.payload,\n        };\n      }\n    },\n    rollAllNPCInitiative: (state) => {\n      state.npcs.forEach(i => {\n        i.initiative = rollDice(Dice.d20);\n      });\n    },\n  }\n});\n\nexport const { addNPC, removeNPC, refreshNPCs, rollAllNPCInitiative } = npcSlice.actions;\n\nexport default npcSlice.reducer;","import { Accordion, AccordionButton, AccordionIcon, AccordionItem, AccordionPanel, Badge, Box, Button, Center, FormControl, FormLabel, Grid, GridItem, HStack, Icon, NumberInput, NumberInputField, SimpleGrid, Stack, Stat, StatHelpText, StatLabel, StatNumber, Switch, Table, Tbody, Td, Text, Textarea, Th, Thead, Tr, VStack } from '@chakra-ui/react';\nimport { Form, Formik } from 'formik';\nimport React from 'react';\nimport { AiFillDelete } from 'react-icons/ai';\nimport { GiDiceTwentyFacesTwenty } from 'react-icons/gi';\nimport { Column, useTable } from 'react-table';\nimport * as Yup from 'yup';\nimport { ConditionColour } from '../common/Enums';\nimport { InputControl, NumberInputControl } from '../common/formik-chakra';\nimport { useAppDispatch, useAppSelector } from '../common/hooks';\nimport { addNPC, removeNPC } from '../common/npcSlice';\nimport { Dice, rollDice } from '../common/util';\nimport { NPC } from './NPC.interfaces';\n\nexport function Enemies() {\n  const enemies = useAppSelector((state) => state.npcs.npcs.filter(i => i.isHostile));\n  const dispatch = useAppDispatch();\n\n  const removeNPCAction = (id: string) => {\n    dispatch(removeNPC(id));\n  }\n\n  const columns = React.useMemo<Column<NPC>[]>(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n      },\n      {\n        Header: 'HP',\n        accessor: (value) => {\n          let hpString = `${value.currentHP}`;\n          if (value.tempHP) hpString += ` (${value.tempHP})`;\n\n          return `${hpString} / ${value.maxHP}`;\n        },\n      },\n      {\n        Header: 'Init.',\n        accessor: (value) => value.initiative + value.initiativeMod,\n      },\n      {\n        Header: 'AC',\n        accessor: 'armourClass',\n      },\n      {\n        Header: 'Condition(s)',\n        Cell: (row) => {\n          return (\n            <Stack direction=\"column\">\n              {row.value.map(i => (\n                <Badge textTransform=\"uppercase\" key={i} colorScheme={ConditionColour[i] || 'gray'}>\n                  <Center>{i}</Center>\n                </Badge>\n              ))}\n            </Stack>\n          );\n        },\n        accessor: 'conditions',\n      },\n      {\n        Header: '',\n        Cell: (row) => {\n          return (\n            <Button onClick={() => removeNPCAction(row.value)}>\n              <Icon as={AiFillDelete} />\n            </Button>\n          )\n        },\n        accessor: 'id',\n      }\n    ], []\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({ columns, data: enemies });\n\n  const validationSchema = Yup.object({\n    name: Yup.string().required().label('Name'),\n    maxHP: Yup.number().integer().moreThan(0).required().label('Maximum HP'),\n    initiativeMod: Yup.number().integer().required().label('Initiative Modifier'),\n    armourClass: Yup.number().integer().moreThan(0).default(10).label('Armour Class'),\n  });\n\n  const addEnemyForm = () => {\n    return (\n      <Formik\n        initialValues={{\n          name: '',\n          maxHP: 0,\n          initiativeMod: 0,\n          armourClass: 0,\n        }}\n        validationSchema={validationSchema}\n        onSubmit={\n          (values, actions) => {\n            dispatch(addNPC({\n              name: values.name,\n              maxHP: values.maxHP,\n              currentHP: values.maxHP,\n              tempHP: 0,\n              initiative: rollDice(Dice.d20),\n              initiativeMod: values.initiativeMod,\n              armourClass: values.armourClass,\n              conditions: [],\n              displayOnTurnOrder: true,\n              notes: '',\n              isFriendly: false,\n              isHostile: true,\n              isBoss: false,\n              showHealth: false,\n              showInitiative: false,\n              showAC: false,\n              showName: false,\n            }));\n            actions.resetForm();\n          }\n        }\n      >\n        <Form>\n          <HStack>\n            <InputControl\n              m={4}\n              name=\"name\" label=\"Enemy Name\"\n            />\n            <NumberInputControl\n              m={4}\n              name=\"maxHP\" label=\"Maximum HP\"\n            />\n            <NumberInputControl\n              m={4}\n              name=\"initiativeMod\" label=\"Initiative Modifier\"\n            />\n            <NumberInputControl\n              m={4}\n              name=\"armourClass\" label=\"Armour Class\"\n            />\n          </HStack>\n          <Button\n            m={4}\n            width=\"100%\"\n            type=\"submit\"\n          >\n            Add Enemy\n          </Button>\n        </Form>\n      </Formik>\n    )\n  }\n\n  const enemyOptions = (enemy: NPC) => {\n    const rowId = `enemy-${enemy.id}`;\n    return (\n      <Box className='' width=\"100%\" id={rowId} key={rowId} border=\"0.2em solid black\" p={4}>\n        <SimpleGrid templateColumns=\"repeat(2, 1fr)\">\n          <Box>\n            <Stat>\n              <StatLabel>{enemy.name}</StatLabel>\n              <StatNumber>\n                <HStack>\n                  <NumberInput width=\"5em\">\n                    <NumberInputField placeholder={enemy.currentHP.toString()} />\n                  </NumberInput>\n                  <Text>/</Text>\n                  <NumberInput width=\"5em\">\n                    <NumberInputField placeholder={enemy.maxHP.toString()} />\n                  </NumberInput>\n                </HStack>\n              </StatNumber>\n              <StatHelpText>AC {enemy.armourClass}, Init {enemy.initiative + enemy.initiativeMod} ({enemy.initiative}<Icon as={GiDiceTwentyFacesTwenty}></Icon> {enemy.initiativeMod >= 0 ? '+' : '-'} {Math.abs(enemy.initiativeMod)})</StatHelpText>\n            </Stat>\n          </Box>\n          <Box>\n            <Textarea\n            />\n          </Box>\n        </SimpleGrid>\n        {\n          enemy.conditions.length > 0 && <HStack>\n            {enemy.conditions.map((i) => <Badge variant=\"solid\" key={enemy.conditions.findIndex(j => i === j)}>{i}</Badge>)}\n          </HStack>\n        }\n        <Accordion allowToggle allowMultiple>\n          <AccordionItem>\n            <AccordionButton>\n              <Box flex=\"1\" textAlign=\"left\">\n                <strong>Edit Stats</strong>\n              </Box>\n              <AccordionIcon />\n            </AccordionButton>\n            <AccordionPanel>\n              <Grid\n                fontSize=\"sm\"\n                templateColumns=\"repeat(4, 1fr)\"\n                templateRows=\"repeat(3, 1fr)\"\n                gap={4}\n              >\n                <GridItem\n                  colSpan={4}\n                >\n                  <Button width=\"100%\">Roll Initiative</Button>\n                </GridItem>\n                <GridItem>\n                  <HStack>\n                    <Text>AC: </Text>\n                    <NumberInput width=\"5em\">\n                      <NumberInputField placeholder={enemy.armourClass.toString()} />\n                    </NumberInput>\n                  </HStack>\n                </GridItem>\n                <GridItem>\n                  <HStack>\n                    <Text>Initiative: </Text>\n                    <NumberInput width=\"5em\">\n                      <NumberInputField placeholder={enemy.initiative.toString()} />\n                    </NumberInput>\n                  </HStack>\n                </GridItem>\n                <GridItem>\n                  <HStack>\n                    <Text>Init. Mod: </Text>\n                    <NumberInput width=\"5em\">\n                      <NumberInputField placeholder={enemy.initiativeMod.toString()} />\n                    </NumberInput>\n                  </HStack>\n                </GridItem>\n                <GridItem\n                  colSpan={4}\n                >\n                  <Button width=\"100%\">Save</Button>\n                </GridItem>\n              </Grid>\n            </AccordionPanel>\n          </AccordionItem>\n          <AccordionItem>\n            <AccordionButton>\n              <Box flex=\"1\" textAlign=\"left\">\n                <strong>Options</strong>\n              </Box>\n              <AccordionIcon />\n            </AccordionButton>\n            <AccordionPanel>\n              <Grid\n                fontSize=\"sm\"\n                templateColumns=\"repeat(4, 1fr)\"\n                templateRows=\"repeat(3, 1fr)\"\n              >\n                <FormControl display=\"flex\" alignItems=\"center\">\n                  <FormLabel mb=\"0\">\n                    Reveal Name\n                  </FormLabel>\n                  <Switch />\n                </FormControl>\n                <FormControl display=\"flex\" alignItems=\"center\">\n                  <FormLabel mb=\"0\">\n                    Reveal Health\n                  </FormLabel>\n                  <Switch />\n                </FormControl>\n                <FormControl display=\"flex\" alignItems=\"center\">\n                  <FormLabel mb=\"0\">\n                    Reveal Armour Class\n                  </FormLabel>\n                  <Switch />\n                </FormControl>\n                <FormControl display=\"flex\" alignItems=\"center\">\n                  <FormLabel mb=\"0\">\n                    Reveal Initiative\n                  </FormLabel>\n                  <Switch />\n                </FormControl>\n              </Grid>\n            </AccordionPanel>\n          </AccordionItem>\n        </Accordion>\n      </Box>\n    );\n  }\n\n  return (\n    <div>\n      {addEnemyForm()}\n      <VStack>\n        {enemies.map(i => enemyOptions(i))}\n      </VStack>\n      <Table {...getTableProps()} size=\"sm\">\n        <Thead>\n          {headerGroups.map((headerGroup) => (\n            <Tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <Th\n                  {...column.getHeaderProps()}\n                >\n                  {column.render(\"Header\")}\n                </Th>\n              ))}\n            </Tr>\n          ))}\n        </Thead>\n        <Tbody {...getTableBodyProps()}>\n          {rows.map((row) => {\n            prepareRow(row)\n            return (\n              <Tr {...row.getRowProps()}>\n                {row.cells.map((cell) => (\n                  <Td {...cell.getCellProps()}>\n                    {cell.render(\"Cell\")}\n                  </Td>\n                ))}\n              </Tr>\n            )\n          })}\n        </Tbody>\n      </Table>\n    </div>\n  );\n}","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Player } from \"../Characters/Player.interfaces\";\nimport { v4 } from 'uuid';\nimport { Dice, rollDice } from \"./util\";\n\nexport interface PlayerState {\n  players: Player[];\n}\n\nconst initialState: PlayerState = {\n  players: [],\n};\n\nexport const playerSlice = createSlice({\n  name: 'player',\n  initialState,\n  reducers: {\n    addPlayer: (state, action: PayloadAction<Omit<Player, 'id'>>) => {\n      const id = v4();\n      state.players.push({\n        ...action.payload,\n        id,\n      });\n    },\n    removePlayer: (state, action: PayloadAction<string>) => {\n      const index = state.players.findIndex((v) => v.id === action.payload);\n\n      if (index >= 0) {\n        state.players.splice(index, 1);\n      } else {\n        console.warn(`Invalid player ${action.payload}`);\n      }\n    },\n    refreshPlayers: (state, action: PayloadAction<Player[] | undefined>) => {\n      if (action.payload) {\n        state.players.splice(0, state.players.length, ...action.payload);\n      }\n    },\n    modifyPlayer: (state, action: PayloadAction<Partial<Player>>) => {\n      const foundPlayer = state.players.findIndex(i => i.id === action.payload.id);\n\n      if (foundPlayer >= 0) {\n        state.players[foundPlayer] = {\n          ...state.players[foundPlayer],\n          ...action.payload,\n        };\n      }\n    },\n    rollAllPlayerInitiative: (state) => {\n      state.players.forEach(i => {\n        i.initiative = rollDice(Dice.d20);\n      });\n    },\n  }\n});\n\nexport const { addPlayer, removePlayer, refreshPlayers, rollAllPlayerInitiative } = playerSlice.actions;\n\nexport default playerSlice.reducer;","import { Badge, Button, Center, HStack, Icon, Stack, Table, Tbody, Td, Th, Thead, Tr } from '@chakra-ui/react';\nimport { Form, Formik } from 'formik';\nimport React from 'react';\nimport { Column, useTable } from 'react-table';\nimport * as Yup from 'yup';\nimport { ConditionColour } from '../common/Enums';\nimport { InputControl, NumberInputControl } from '../common/formik-chakra';\nimport { useAppDispatch, useAppSelector } from '../common/hooks';\nimport { addPlayer, removePlayer } from '../common/playerSlice';\nimport { Dice, rollDice } from '../common/util';\nimport { Player } from './Player.interfaces';\nimport { AiFillDelete } from 'react-icons/ai';\n\nexport function Players() {\n  const players = useAppSelector((state) => state.players.players);\n  const dispatch = useAppDispatch();\n\n  const removePlayerAction = (id: string) => {\n    dispatch(removePlayer(id));\n  }\n\n  const columns = React.useMemo<Column<Player>[]>(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n      },\n      {\n        Header: 'HP',\n        accessor: (value) => {\n          let hpString = `${value.currentHP}`;\n          if (value.tempHP) hpString += ` (${value.tempHP})`;\n\n          return `${hpString} / ${value.maxHP}`;\n        },\n      },\n      {\n        Header: 'Init.',\n        accessor: (value) => value.initiative + value.initiativeMod,\n      },\n      {\n        Header: 'AC',\n        accessor: 'armourClass',\n      },\n      {\n        Header: 'Condition(s)',\n        Cell: (row) => {\n          return (\n            <Stack direction=\"column\">\n              {row.value.map(i => (\n                <Badge textTransform=\"uppercase\" key={i} colorScheme={ConditionColour[i] || 'gray'}>\n                  <Center>{i}</Center>\n                </Badge>\n              ))}\n            </Stack>\n          );\n        },\n        accessor: 'conditions',\n      },\n      {\n        Header: '',\n        Cell: (row) => {\n          return (\n            <Button onClick={() => removePlayerAction(row.value)}>\n              <Icon as={AiFillDelete} />\n            </Button>\n          )\n        },\n        accessor: 'id',\n      }\n    ],\n    []\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({ columns, data: players });\n\n  const validationSchema = Yup.object({\n    name: Yup.string().required().label('Name'),\n    maxHP: Yup.number().integer().moreThan(0).required().label('Maximum HP'),\n    initiativeMod: Yup.number().integer().required().label('Initiative Modifier'),\n    armourClass: Yup.number().integer().moreThan(0).default(10).label('Armour Class'),\n  });\n\n  return (\n    <div>\n      <Formik\n        initialValues={{\n          name: '',\n          maxHP: 0,\n          initiativeMod: 0,\n          armourClass: 0,\n        }}\n        validationSchema={validationSchema}\n        onSubmit={\n          (values, actions) => {\n            dispatch(addPlayer({\n              name: values.name,\n              maxHP: Number(values.maxHP),\n              currentHP: Number(values.maxHP),\n              tempHP: 0,\n              initiative: rollDice(Dice.d20),\n              initiativeMod: Number(values.initiativeMod),\n              armourClass: Number(values.armourClass),\n              conditions: [],\n              displayOnTurnOrder: true,\n              notes: '',\n            }));\n            actions.resetForm();\n          }\n        }\n      >\n        <Form>\n          <HStack>\n            <InputControl\n              m={4}\n              name=\"name\" label=\"Player Name\"\n            />\n            <NumberInputControl\n              m={4} \n              name=\"maxHP\" label=\"Maximum HP\"\n            />\n            <NumberInputControl\n              m={4} \n              name=\"initiativeMod\" label=\"Initiative Modifier\"\n            />\n            <NumberInputControl\n              m={4} \n              name=\"armourClass\" label=\"Armour Class\"\n            />\n          </HStack>\n          <Button\n            m={4}\n            width=\"100%\"\n            type=\"submit\"\n          >\n            Add Player\n          </Button>\n        </Form>\n      </Formik>\n      <Table {...getTableProps()} size=\"sm\">\n        <Thead>\n          {headerGroups.map((headerGroup) => (\n            <Tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <Th\n                  {...column.getHeaderProps()}\n                >\n                  {column.render(\"Header\")}\n                </Th>\n              ))}\n            </Tr>\n          ))}\n        </Thead>\n        <Tbody {...getTableBodyProps()}>\n          {rows.map((row) => {\n            prepareRow(row);\n            const rowId = `player-${row.values.id}`;\n            return (\n              <Tr {...row.getRowProps()} id={rowId}>\n                {row.cells.map((cell) => (\n                  <Td {...cell.getCellProps()}>\n                    {cell.render(\"Cell\")}\n                  </Td>\n                ))}\n              </Tr>\n            )\n          })}\n        </Tbody>\n      </Table>\n    </div>\n  );\n}","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\ninterface InitiativeState {\n  currentTurnId: string;\n}\n\nconst initialState: InitiativeState = {\n  currentTurnId: '',\n};\n\nexport const initiativeSlice = createSlice({\n  name: 'initiative',\n  initialState,\n  reducers: {\n    setTurn: (state, action: PayloadAction<string>) => {\n      state.currentTurnId = action.payload;\n    },\n  },\n});\n\nexport const { setTurn } = initiativeSlice.actions;\n\nexport default initiativeSlice.reducer;","import { configureStore } from '@reduxjs/toolkit';\nimport playerReducer from './playerSlice';\nimport initiativeReducer from './initiativeSlice';\nimport npcReducer from './npcSlice';\n\nexport const loadFromLocalStorage = () => {\n  try {\n    const serialisedState = localStorage.getItem(\"persistantState\");\n    if (serialisedState === null) return undefined;\n    return JSON.parse(serialisedState);\n  } catch (e) {\n    console.warn(e);\n    return undefined;\n  }\n}\n\nexport const store = configureStore({\n  reducer: {\n    players: playerReducer,\n    initiative: initiativeReducer,\n    npcs: npcReducer,\n  },\n  preloadedState: loadFromLocalStorage(),\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nfunction saveToLocalStorage(state: RootState) {\n  try {\n    const serialisedState = JSON.stringify(state);\n    localStorage.setItem(\"persistantState\", serialisedState);\n  } catch (e) {\n    console.warn(e);\n  }\n}\n\nstore.subscribe(() => {\n  if (document.hasFocus()) {\n    saveToLocalStorage(store.getState());\n  }\n});\n","import { Badge, Box, Grid, HStack, Icon, Text } from \"@chakra-ui/react\";\nimport React from 'react';\nimport { BsHeartFill } from \"react-icons/bs\";\nimport { GiCheckedShield, GiDiceTwentyFacesTwenty, GiWalkingBoot } from \"react-icons/gi\";\nimport { NPC } from \"../Characters/NPC.interfaces\";\n\ninterface EnemyTurnProps {\n  enemy: NPC;\n  isActive: boolean;\n  onClick: () => void;\n}\n\nexport function EnemyTurn({ enemy, isActive, onClick }: EnemyTurnProps) {\n  const tempHP = enemy.tempHP ? ` (${enemy.tempHP})` : '';\n\n  return (\n    <Box className='turn-block turn-block-enemy'\n      border=\"0.2em solid #AA000066\"\n      borderRadius=\"0.4em\"\n      opacity={isActive ? \"100%\" : \"40%\"}\n      cursor=\"pointer\"\n      onClick={onClick}\n    >\n      <Grid templateColumns=\"repeat(3, 1fr)\" fontSize=\"sm\">\n        <Text>{enemy.showName ? enemy.name : '???'}</Text>\n        {\n          enemy.showAC\n          && <Text><Icon as={GiCheckedShield}></Icon> {enemy.armourClass}</Text>\n        }\n        {\n          enemy.showHealth\n          ? <Text><Icon as={BsHeartFill} /> {enemy.currentHP}{tempHP} / {enemy.maxHP}</Text>\n          : <Text><Icon as={BsHeartFill} /> Damage Taken: {enemy.maxHP - enemy.currentHP}</Text>\n        }\n        {\n          enemy.showInitiative\n          && <Text><Icon as={GiWalkingBoot}></Icon> {enemy.initiative + enemy.initiativeMod} ({enemy.initiative}<Icon as={GiDiceTwentyFacesTwenty}></Icon> {enemy.initiativeMod >= 0 ? '+' : '-'} {Math.abs(enemy.initiativeMod)})</Text>\n        }\n      </Grid>\n      {\n        enemy.conditions.length > 0 && <HStack>\n          {enemy.conditions.map((i) => <Badge variant=\"solid\" key={enemy.conditions.findIndex(j => i === j)}>{i}</Badge>)}\n        </HStack>\n      }\n    </Box>\n  );\n}","import { Badge, Box, Grid, HStack, Icon, Text } from \"@chakra-ui/react\";\nimport React from 'react';\nimport { BsHeartFill } from \"react-icons/bs\";\nimport { GiCheckedShield, GiDiceTwentyFacesTwenty, GiWalkingBoot } from \"react-icons/gi\";\nimport { Player } from \"../Characters/Player.interfaces\";\n\ninterface PlayerTurnProps {\n  player: Player;\n  isActive: boolean;\n  onClick: () => void;\n}\n\nexport function PlayerTurn({ player, isActive, onClick }: PlayerTurnProps) {\n  const tempHP = player.tempHP ? ` (${player.tempHP})` : '';\n\n  return (\n    <Box\n      onClick={onClick}\n      className='turn-block turn-block-player'\n      border=\"0.2em solid #00AA0066\"\n      borderRadius=\"0.4em\"\n      opacity={isActive ? \"100%\" : \"40%\"}\n      cursor=\"pointer\"\n    >\n      <Grid templateColumns=\"repeat(4, 1fr)\" fontSize=\"sm\">\n        <Text>{player.name}</Text>\n        <Text><Icon as={GiCheckedShield}></Icon> {player.armourClass}</Text>\n        <Text><Icon as={BsHeartFill}></Icon> {player.currentHP}{tempHP} / {player.maxHP}</Text>\n        <Text><Icon as={GiWalkingBoot}></Icon> {player.initiative + player.initiativeMod} ({player.initiative}<Icon as={GiDiceTwentyFacesTwenty}></Icon> {player.initiativeMod >= 0 ? '+' : '-'} {Math.abs(player.initiativeMod)})</Text>\n      </Grid>\n      {\n        player.conditions.length > 0 && <HStack>\n          {player.conditions.map((i) => <Badge variant=\"solid\" key={player.conditions.findIndex(j => i === j)}>{i}</Badge>)}\n        </HStack>\n      }\n    </Box>\n  );\n}","import { Button, HStack, Icon, StackDivider, Text, VStack } from '@chakra-ui/react';\nimport React from 'react';\nimport { GiDiceTwentyFacesTwenty } from 'react-icons/gi';\nimport { Character } from '../Characters/Character.interfaces';\nimport { NPC } from '../Characters/NPC.interfaces';\nimport { Player } from '../Characters/Player.interfaces';\nimport { useAppDispatch, useAppSelector } from '../common/hooks';\nimport { setTurn } from '../common/initiativeSlice';\nimport { rollAllPlayerInitiative } from '../common/playerSlice';\nimport { EnemyTurn } from './EnemyTurn';\nimport './Initiative.css';\nimport { PlayerTurn } from './PlayerTurn';\n\nexport function Initiative({ changePageMethod }: { changePageMethod: ({ type, id }: { type: string; id: string; }) => void }) {\n  const players = useAppSelector<Player[]>((state) => state.players.players);\n  const npcs = useAppSelector<NPC[]>((state) => state.npcs.npcs);\n  const currentTurnId = useAppSelector<string>((state) => state.initiative.currentTurnId);\n\n  const dispatch = useAppDispatch();\n\n  const getSortedTurns = () => {\n    const formattedPlayers: Array<{\n      character: Character;\n      type:  'player'\n    }> = players.map(i => ({\n      character: i,\n      type: 'player',\n    }));\n\n    const formattedNPCs: Array<{\n      character: Character;\n      type:  'enemy' | 'ally' | 'neutral'\n    }> = npcs.map(i => {\n      let type: 'enemy' | 'ally' | 'neutral' = 'neutral';\n\n      if (i.isHostile) {\n        type = 'enemy';\n      } else if (i.isFriendly) {\n        type = 'ally';\n      }\n\n      return {\n        character: i,\n        type,\n      };\n    });\n\n    const sortedTurns: Array<{\n      character: Character;\n      type:  'player' | 'enemy' | 'ally' | 'neutral'\n    }> = [...formattedPlayers, ...formattedNPCs].sort((a, b) => (b.character.initiative + b.character.initiativeMod) - (a.character.initiative + a.character.initiativeMod));\n    \n    const returnValue = (array: Array<{\n      character: Character;\n      type:  'player' | 'enemy' | 'ally' | 'neutral'\n    }>): Array<{\n      isActive: boolean;\n      character: Character;\n      type: 'player' | 'enemy' | 'ally' | 'neutral'\n    }> => {\n      return array.map((i, idx) => {\n        return {\n          isActive: idx === 0,\n          character: i.character,\n          type: i.type,\n        }\n      });\n    }\n\n    if (!currentTurnId) {\n      return returnValue(sortedTurns);\n    }\n\n    const currentTurnIndex = sortedTurns.findIndex(i => i.character.id === currentTurnId) || 0;\n    const getSortedByNextActiveTurn = () => [...sortedTurns.slice(currentTurnIndex + 1, sortedTurns.length), ...sortedTurns.slice(0, currentTurnIndex + 1)];\n\n    return returnValue(getSortedByNextActiveTurn());\n  };\n\n  const rollInitiativesAction = () => {\n    dispatch(rollAllPlayerInitiative());\n    dispatch(setTurn(''));\n  };\n\n  const setTurnAction = () => {\n    const turns = getSortedTurns();\n    if (getSortedTurns().length < 1) {\n      return;\n    }\n\n    if (!currentTurnId) {\n      dispatch(setTurn(turns[0].character.id));\n      return;\n    }\n\n    const currentTurnCharacter = turns.findIndex(i => i.character.id === currentTurnId);\n\n    if (!currentTurnCharacter) {\n      dispatch(setTurn(turns[1].character.id));\n      return;\n    }\n    const nextCharacter = turns[(currentTurnCharacter + 1) % turns.length];\n    dispatch(setTurn(nextCharacter.character.id));\n  };\n\n  return (\n    <div>\n      <VStack divider={<StackDivider color=\"gray.200\"></StackDivider>}>\n        <Text>Turn order</Text>\n        {getSortedTurns().map(({ character, isActive, type }) => {\n          if (type === 'player') {\n            return <PlayerTurn onClick={() => changePageMethod({ type: 'player', id: character.id })} isActive={isActive} player={character} key={character.id} />;\n          } else if (type === 'enemy') {\n            const npc = character as NPC;\n            return <EnemyTurn onClick={() => changePageMethod({ type: 'enemy', id: character.id })} isActive={isActive} enemy={npc} key={character.id} />;\n          }\n\n          return false;\n        })};\n      </VStack>\n      <HStack\n        position=\"fixed\"\n        bottom=\"0\"\n        left=\"0\"\n        backgroundColor=\"white\"\n        width=\"100%\"\n      >\n        <Button onClick={rollInitiativesAction} width=\"100%\">Roll Initiative <Icon as={GiDiceTwentyFacesTwenty}></Icon></Button>\n        <Button onClick={setTurnAction} width=\"100%\">Next Turn</Button>\n      </HStack>\n    </div>\n  );\n}","import { Box, Center, Container, Drawer, DrawerBody, DrawerCloseButton, DrawerContent, DrawerFooter, DrawerHeader, DrawerOverlay, Heading, Icon, Tab, TabList, TabPanel, TabPanels, Tabs, Text, useDisclosure, VStack } from '@chakra-ui/react';\nimport React, { useState } from 'react';\nimport { GiHamburgerMenu } from 'react-icons/gi';\nimport { Enemies } from '../Characters/Enemies';\nimport { Players } from '../Characters/Players';\nimport { useAppDispatch } from '../common/hooks';\nimport { refreshPlayers } from '../common/playerSlice';\nimport { loadFromLocalStorage, RootState } from '../common/store';\nimport { Initiative } from '../Initiative';\nimport './Tracker.css';\n\nexport function Tracker() {\n  const dispatch = useAppDispatch();\n\n  window.addEventListener('storage', () => {\n    const persistedStorage: RootState = loadFromLocalStorage();\n\n    if (!document.hasFocus()) {\n      const refreshActions = [\n        refreshPlayers(persistedStorage.players?.players)\n      ];\n      refreshActions.map(dispatch);\n    }\n  });\n\n  const [pageNumber, setPageNumber] = useState(0);\n\n  const pages: Record<string, number> = {\n    player: 1,\n    enemy: 2,\n    npc: 3,\n  };\n\n  const gotoElementPage = ({ type, id }: { type: string; id: string; }) => {\n    if (pages[type]) {\n      setPageNumber(pages[type]);\n      setTimeout(() => {\n        document.querySelector(`#${type}-${id}`)?.scrollIntoView(true);\n      }, 100);\n    }\n  }\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const drawerMenu = (\n    <>\n      <div className=\"drawer-button\">\n        <Box pt={3} pb={3} pl={4} pr={4} cursor=\"pointer\" onClick={onOpen}>\n          <Icon as={GiHamburgerMenu} />\n        </Box>\n      </div>\n      {/* <Button className=\"drawer-button\" variant=\"ghost\" onClick={onOpen}>\n        <Icon as={GiHamburgerMenu} />\n      </Button> */}\n      <Drawer\n        isOpen={isOpen}\n        placement=\"left\"\n        onClose={onClose}\n      >\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerCloseButton />\n          <DrawerHeader>Menu</DrawerHeader>\n\n          <DrawerBody>\n            <VStack spacing={5}>\n              <Text cursor=\"pointer\" width=\"100%\" textAlign=\"left\" onClick={onClose}>Overview</Text>\n              <Text cursor=\"pointer\" width=\"100%\" textAlign=\"left\" onClick={onClose}>Players</Text>\n              <Text cursor=\"pointer\" width=\"100%\" textAlign=\"left\" onClick={onClose}>Enemies</Text>\n            </VStack>\n          </DrawerBody>\n\n          <DrawerFooter>\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n\n  return (\n    <div className=\"Tracker\">\n      <Container maxW=\"900\" minW=\"900\">\n        <Center><Heading>D&D Tracker</Heading></Center>\n        <Tabs isFitted index={pageNumber} onChange={(i) => setPageNumber(i)}>\n          <TabList position=\"sticky\">\n            <Tab>Overview</Tab>\n            {/* <Tab>DM Screen</Tab> */}\n            <Tab>Players</Tab>\n            <Tab>Enemies</Tab>\n            {/* <Tab>NPCs</Tab>\n            <Tab>Other</Tab>\n            <Tab>Avrae</Tab> */}\n          </TabList>\n\n          <TabPanels>\n            <TabPanel>\n              <Initiative changePageMethod={gotoElementPage}/>\n            </TabPanel>\n            <TabPanel>\n              <Players />\n            </TabPanel>\n            <TabPanel>\n              <Enemies />\n            </TabPanel>\n            <TabPanel>\n              NPCs\n            </TabPanel>\n            <TabPanel>\n              Other\n            </TabPanel>\n            <TabPanel>\n              Avrae\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Container>\n      {drawerMenu}\n    </div>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider } from '@chakra-ui/react';\nimport { Tracker } from './Tracker';\nimport { Provider } from 'react-redux';\nimport { store } from './common/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <ChakraProvider>\n      <React.StrictMode>\n        <Tracker />\n      </React.StrictMode>\n    </ChakraProvider>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}