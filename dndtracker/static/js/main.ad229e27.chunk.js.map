{"version":3,"sources":["common/util.ts","reportWebVitals.ts","common/formik-chakra/FormControl.tsx","common/formik-chakra/InputControl.tsx","common/formik-chakra/NumberInputControl.tsx","common/formik-chakra/SwitchControl.tsx","common/hooks.ts","common/npcSlice.ts","common/formik-chakra/TextareaControl.tsx","Characters/ModifyCharacterConditionsField.tsx","Characters/ModifyNPCForm.tsx","Characters/NPCs.tsx","common/playerSlice.ts","Characters/ModifyPlayerForm.tsx","Characters/Players.tsx","common/campaignSlice.ts","common/store.ts","Initiative/NPCTurn.tsx","Initiative/PlayerTurn.tsx","Initiative/Initiative.tsx","Settings/Settings.tsx","App/CampaignTitle.tsx","App/MenuItemLink.tsx","App/Sidebar.tsx","App/App.tsx","App/theme.ts","index.tsx"],"names":["Dice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","FormControl","props","children","name","label","helperText","hideError","rest","useField","error","touched","isInvalid","htmlFor","InputControl","inputProps","field","id","NumberInputControl","n","showStepper","numberInputProps","setFieldValue","useFormikContext","onChange","value","Number","SwitchControl","switchProps","css","as","Flex","alignItems","isChecked","useAppDispatch","useDispatch","useAppSelector","useSelector","rollDice","max","Math","ceil","random","npcSlice","createSlice","initialState","npcs","reducers","addNPC","state","action","v4","push","payload","removeNPC","index","findIndex","v","splice","console","warn","refreshNPCs","length","modifyNPC","foundNPC","i","rollAllNPCInitiative","forEach","initiative","d20","modifyNPCValidationSchema","Yup","currentHP","integer","required","maxHP","tempHP","default","armourClass","min","initiativeMod","notes","conditions","of","displayOnTurnOrder","isHostile","isFriendly","isBoss","showHealth","showInitiative","showAC","showName","actions","TextareaControl","textareaProps","ModifyCharacterConditionsField","character","context","render","arrayHelpers","addCondition","element","document","querySelector","tagInput","toString","p","border","borderRadius","mb","justifyContent","fontWeight","mt","opacity","values","map","condition","idx","variant","size","m","onClick","remove","onKeyPress","e","code","AddIcon","cursor","ModifyNPCForm","npc","dispatch","params","useParams","formColour","npcTypeColours","neutral","enemy","friendly","NPCModifyStatFields","flex","textAlign","fontSize","templateColumns","templateRows","gap","colSpan","width","rightIcon","GiDiceTwentyFacesTwenty","displayString","NPCModifyActions","_npc","placement","hidden","dirty","colorScheme","submitForm","IoMdSave","type","ImRedo","AiFillDelete","initialValues","onSubmit","resetForm","enableReinitialize","validationSchema","className","backgroundColor","color","abs","resize","height","allowToggle","allowMultiple","key","display","NPCFormList","NPCs","showHostile","showFriendly","showNeutral","filter","addNPCValidationSchema","moreThan","AddNPCForm","addFormFields","IC","playerSlice","players","addPlayer","removePlayer","refreshPlayers","modifyPlayer","foundPlayer","rollAllPlayerInitiative","modifyPlayerValidationSchema","ModifyPlayerForm","player","PlayerModifyStatFields","PlayerModifyActions","_player","PlayerFormList","Players","addPlayerValidationSchema","AddPlayerForm","campaignSlice","currentTurnId","campaignTitle","setTurn","setCampaignTitle","APP_VERSION","loadFromLocalStorage","serialisedState","localStorage","getItem","JSON","parse","store","configureStore","reducer","playerReducer","campaign","campaignReducer","npcReducer","preloadedState","subscribe","hasFocus","stringify","setItem","saveToLocalStorage","getState","NPCTurn","isActive","GiCheckedShield","BsHeartFill","GiWalkingBoot","j","PlayerTurn","Initiative","history","useHistory","changePageMethod","findElement","_id","iter","maxIter","scrollIntoView","setTimeout","getSortedTurns","formattedPlayers","formattedNPCs","sortedTurns","sort","a","b","aChar","bChar","returnValue","array","currentTurnIndex","slice","divider","position","bottom","left","turns","currentTurnCharacter","nextCharacter","Settings","CampaignTitle","setTitleAction","ct","useState","editableCampaignTitle","setEditableCampaignTitle","editTitleEnabled","setEditTitleEnabled","editTitleRef","React","useRef","ml","aria-label","icon","GoPencil","current","focus","ref","target","MenuItemLink","to","activeOnlyWhenExact","match","useRouteMatch","path","exact","undefined","Sidebar","routes","isLargerThanMinWidth","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","useDisclosure","defaultIsOpen","isOpen","onOpen","onClose","pt","pb","pl","pr","GiHamburgerMenu","blockScrollOnMount","trapFocus","spacing","pageTitle","App","persistedStorage","component","basePath","FaBars","BsPersonFill","GiBirdClaw","AiFillRobot","FaCog","basename","maxW","minW","theme","extendTheme","components","Drawer","variants","alwaysOpen","dialog","pointerEvents","dialogContainer","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ad229e27.chunk.js","sourcesContent":["export enum Dice {\n  d100 = 100,\n  d20 = 20,\n  d12 = 12,\n  d10 = 10,\n  d8 = 8,\n  d6 = 6,\n  d4 = 4,\n  d2 = 2\n}\n\nexport const rollDice = (max: number): number => Math.ceil(Math.random() * max);\n\nexport const rollAdvantage = (max: number): number => Math.max(rollDice(max), rollDice(max));\n\nexport const rollDisadvantage = (max: number): number => Math.min(rollDice(max), rollDice(max));\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n  FormControl as ChakraFormControl,\n  FormControlProps,\n  FormErrorMessage,\n  FormHelperText,\n  FormLabel,\n} from '@chakra-ui/react';\nimport { useField } from 'formik';\nimport React, { FC } from 'react';\n\nexport interface BaseProps extends FormControlProps {\n  name: string;\n  label?: string;\n  helperText?: string;\n  hideError?: boolean;\n}\n\nexport const FormControl: FC<BaseProps> = (props: BaseProps) => {\n  const {\n    children, name, label, helperText, hideError, ...rest\n  } = props;\n  const [, { error, touched }] = useField(name);\n\n  return (\n    <ChakraFormControl isInvalid={!!error && touched} {...rest}>\n      {label && <FormLabel htmlFor={name}>{label}</FormLabel>}\n      {children}\n      {!hideError && error && <FormErrorMessage>{error}</FormErrorMessage>}\n      {helperText && <FormHelperText>{helperText}</FormHelperText>}\n    </ChakraFormControl>\n  );\n};\n\nexport default FormControl;\n","import { Input, InputProps } from '@chakra-ui/react';\nimport { useField } from 'formik';\nimport React, { FC } from 'react';\nimport { BaseProps, FormControl } from './FormControl';\n\nexport type InputControlProps = BaseProps & { inputProps?: InputProps };\n\nexport const InputControl: FC<InputControlProps> = (\n  props: InputControlProps,\n) => {\n  const {\n    name, label, inputProps, ...rest\n  } = props;\n  const [field] = useField(name);\n\n  return (\n    <FormControl name={name} label={label} {...rest}>\n      <Input {...field} id={name} {...inputProps} />\n    </FormControl>\n  );\n};\n\nexport default InputControl;\n","import {\n  NumberDecrementStepper,\n  NumberIncrementStepper,\n  NumberInput,\n  NumberInputField,\n  NumberInputProps,\n  NumberInputStepper,\n} from '@chakra-ui/react';\nimport { useField, useFormikContext } from 'formik';\nimport React, { FC, ReactNode } from 'react';\nimport { BaseProps, FormControl } from './FormControl';\n\nexport type NumberInputControlProps = BaseProps & {\n  numberInputProps?: NumberInputProps;\n  showStepper?: boolean;\n  children?: ReactNode;\n};\n\nexport const NumberInputControl: FC<NumberInputControlProps> = (\n  props: NumberInputControlProps,\n) => {\n  const {\n    name,\n    label,\n    showStepper = true,\n    children,\n    numberInputProps,\n    ...rest\n  } = props;\n  const [field, { error, touched }] = useField(name);\n  const { setFieldValue } = useFormikContext();\n\n  const $setFieldValue = (n: string) => (value: unknown) => setFieldValue(n, Number(value));\n\n  return (\n    <FormControl name={name} label={label} {...rest}>\n      <NumberInput\n        {...field}\n        id={name}\n        onChange={$setFieldValue(name)}\n        isInvalid={!!error && touched}\n        {...numberInputProps}\n      >\n        <NumberInputField name={name} />\n        {showStepper && (\n          <NumberInputStepper>\n            <NumberIncrementStepper />\n            <NumberDecrementStepper />\n          </NumberInputStepper>\n        )}\n        {children}\n      </NumberInput>\n    </FormControl>\n  );\n};\n\nexport default NumberInputControl;\n","import {\n  Box, Flex, Switch, SwitchProps,\n} from '@chakra-ui/react';\nimport { css } from '@emotion/react';\nimport { useField } from 'formik';\nimport React, { FC } from 'react';\nimport { BaseProps, FormControl } from './FormControl';\n\nexport type SwitchControlProps = BaseProps & { switchProps?: SwitchProps };\n\nexport const SwitchControl: FC<SwitchControlProps> = (\n  props: SwitchControlProps,\n) => {\n  const {\n    name, label, switchProps, ...rest\n  } = props;\n  const [field, { error, touched }] = useField(name);\n\n  return (\n    <Box\n      css={css`\n        .chakra-form__label {\n          margin-bottom: 0;\n        }\n        .chakra-switch {\n          display: flex;\n          align-items: center;\n          margin-right: 0.75rem;\n        }\n        .chakra-form__error-message {\n          margin-top: 0;\n        }\n      `}\n    >\n      <FormControl\n        name={name}\n        label={label}\n        as={Flex}\n        alignItems=\"center\"\n        {...rest}\n      >\n        <Switch\n          {...field}\n          id={name}\n          isInvalid={!!error && touched}\n          isChecked={field.value}\n          {...switchProps}\n        />\n      </FormControl>\n    </Box>\n  );\n};\n\nexport default SwitchControl;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { v4 } from 'uuid';\nimport * as Yup from 'yup';\nimport { Dice, rollDice } from './util';\nimport { NPC } from '../Characters/NPC.interfaces';\n\nexport interface NPCState {\n  npcs: NPC[];\n}\n\nconst initialState: NPCState = {\n  npcs: [],\n};\n\nexport const npcSlice = createSlice({\n  name: 'npc',\n  initialState,\n  reducers: {\n    addNPC: (state, action: PayloadAction<Omit<NPC, 'id'>>) => {\n      const id = v4();\n      state.npcs.push({\n        ...action.payload,\n        id,\n      });\n    },\n    removeNPC: (state, action: PayloadAction<string>) => {\n      const index = state.npcs.findIndex((v) => v.id === action.payload);\n\n      if (index >= 0) {\n        state.npcs.splice(index, 1);\n      } else {\n        console.warn(`Invalid NPC ${action.payload}`);\n      }\n    },\n    refreshNPCs: (state, action: PayloadAction<NPC[] | undefined>) => {\n      if (action.payload) {\n        state.npcs.splice(0, state.npcs.length, ...action.payload);\n      }\n    },\n    modifyNPC: (state, action: PayloadAction<Partial<NPC>>) => {\n      const foundNPC = state.npcs.findIndex((i) => i.id === action.payload.id);\n\n      if (foundNPC >= 0) {\n        const { npcs } = state;\n        npcs[foundNPC] = {\n          ...state.npcs[foundNPC],\n          ...action.payload,\n        };\n      }\n    },\n    rollAllNPCInitiative: (state) => {\n      state.npcs.forEach((i) => {\n        const npc = i;\n        npc.initiative = rollDice(Dice.d20);\n      });\n    },\n  },\n});\n\nexport const modifyNPCValidationSchema = Yup.object({\n  name: Yup.string(),\n  currentHP: Yup.number().integer().required(),\n  maxHP: Yup.number().integer().required(),\n  tempHP: Yup.number().integer().default(0).required(),\n  armourClass: Yup.number().integer().required(),\n  initiative: Yup.number().integer().min(1).max(20)\n    .required(),\n  initiativeMod: Yup.number().integer().required(),\n  notes: Yup.string(),\n  conditions: Yup.array().of(Yup.string()).required(),\n  displayOnTurnOrder: Yup.boolean().required(),\n  isHostile: Yup.boolean().required(),\n  isFriendly: Yup.boolean().required(),\n  isBoss: Yup.boolean().required(),\n  showHealth: Yup.boolean().required(),\n  showInitiative: Yup.boolean().required(),\n  showAC: Yup.boolean().required(),\n  showName: Yup.boolean().required(),\n});\n\nexport const {\n  addNPC, removeNPC, refreshNPCs, rollAllNPCInitiative, modifyNPC,\n} = npcSlice.actions;\n\nexport default npcSlice.reducer;\n","import { Textarea, TextareaProps } from '@chakra-ui/react';\nimport { useField } from 'formik';\nimport React, { FC } from 'react';\nimport { BaseProps, FormControl } from './FormControl';\n\nexport type TextareaControlProps = BaseProps & {\n  textareaProps?: TextareaProps;\n};\n\nexport const TextareaControl: FC<TextareaControlProps> = (\n  props: TextareaControlProps,\n) => {\n  const {\n    name, label, textareaProps, ...rest\n  } = props;\n  const [field] = useField(name);\n\n  return (\n    <FormControl name={name} label={label} {...rest}>\n      <Textarea {...field} id={name} {...textareaProps} />\n    </FormControl>\n  );\n};\n\nexport default TextareaControl;\n","import { AddIcon } from '@chakra-ui/icons';\nimport {\n  Text, Box, Flex, Divider, Tag, TagLabel, TagCloseButton, Input, TagRightIcon, InputProps,\n} from '@chakra-ui/react';\nimport { useFormikContext, FieldArray } from 'formik';\nimport React from 'react';\nimport { Character } from './Character.interfaces';\nimport { NPC } from './NPC.interfaces';\n\nexport const ModifyCharacterConditionsField = ({ character }: { character: Character }) => {\n  const context = useFormikContext<NPC>();\n  return (\n    <FieldArray\n      name=\"conditions\"\n      render={(arrayHelpers) => {\n        const addCondition = () => {\n          const element = document.querySelector(`#tag-input-${character.id}`) as InputProps;\n          if (element?.value) {\n            const tagInput = element.value.toString();\n            element.value = '';\n            arrayHelpers.push(tagInput);\n          }\n        };\n\n        return (\n          <Box p={2} border=\"1px solid #00000066\" borderRadius={8} mb={2}>\n            <Flex justifyContent=\"center\"><Text fontWeight=\"bold\">Conditions</Text></Flex>\n            <Divider mt={1} mb={1} opacity=\"0.3\" />\n            {context.values.conditions.map((condition, idx) => (\n              <Tag\n                variant=\"solid\"\n                borderRadius=\"full\"\n                size=\"lg\"\n                m={2}\n                key={condition}\n              >\n                <TagLabel>{condition}</TagLabel>\n                <TagCloseButton onClick={() => arrayHelpers.remove(idx)} />\n              </Tag>\n            ))}\n            <Tag\n              variant=\"outline\"\n              borderRadius=\"full\"\n              size=\"lg\"\n              m={2}\n            >\n              <Input\n                size=\"xs\"\n                id={`tag-input-${character.id}`}\n                onKeyPress={(e) => {\n                  if (e.code === 'Enter') {\n                    addCondition();\n                  }\n                }}\n              />\n              <TagRightIcon\n                as={AddIcon}\n                cursor=\"pointer\"\n                onClick={() => {\n                  addCondition();\n                }}\n              />\n            </Tag>\n          </Box>\n        );\n      }}\n    />\n  );\n};\n","import {\n  Accordion, AccordionButton, AccordionIcon, AccordionItem,\n  AccordionPanel, Box, Button, FormControl, FormLabel, Grid,\n  GridItem, HStack, Icon, SimpleGrid, Spacer, Text, Tooltip, VStack,\n} from '@chakra-ui/react';\nimport { Form, Formik, useFormikContext } from 'formik';\nimport { AiFillDelete } from 'react-icons/ai';\nimport { GiDiceTwentyFacesTwenty } from 'react-icons/gi';\nimport { ImRedo } from 'react-icons/im';\nimport { IoMdSave } from 'react-icons/io';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { NumberInputControl, SwitchControl } from '../common/formik-chakra';\nimport TextareaControl from '../common/formik-chakra/TextareaControl';\nimport { useAppDispatch } from '../common/hooks';\nimport { modifyNPC, removeNPC, modifyNPCValidationSchema } from '../common/npcSlice';\nimport { Dice, rollDice } from '../common/util';\nimport { ModifyCharacterConditionsField } from './ModifyCharacterConditionsField';\nimport { NPC } from './NPC.interfaces';\nimport { npcTypeColours } from '../App';\n\ninterface ModifyNPCFormProps {\n  npc: NPC;\n}\n\nexport const ModifyNPCForm = ({ npc }: ModifyNPCFormProps) => {\n  const dispatch = useAppDispatch();\n\n  const params = useParams<{id: string}>();\n\n  const modifyNPCAction = (n: NPC) => dispatch(modifyNPC(n));\n  const removeNPCAction = (id: string) => dispatch(removeNPC(id));\n\n  let formColour = npcTypeColours.neutral;\n\n  if (npc.isHostile) {\n    formColour = npcTypeColours.enemy;\n  } else if (npc.isFriendly) {\n    formColour = npcTypeColours.friendly;\n  }\n\n  const NPCModifyStatFields = () => {\n    const editStatFields: Array<[string, string]> = [\n      ['AC: ', 'armourClass'],\n      ['Initiative: ', 'initiative'],\n      ['Init. Mod: ', 'initiativeMod'],\n      ['Max HP: ', 'maxHP'],\n    ];\n\n    const { setFieldValue } = useFormikContext<NPC>();\n    return (\n      <AccordionItem>\n        <AccordionButton>\n          <Box flex=\"1\" textAlign=\"left\">\n            <strong>Edit Stats</strong>\n          </Box>\n          <AccordionIcon />\n        </AccordionButton>\n        <AccordionPanel>\n          <Grid\n            fontSize=\"sm\"\n            templateColumns=\"repeat(4, 1fr)\"\n            templateRows=\"repeat(2, 1fr)\"\n            gap={4}\n          >\n            <GridItem\n              colSpan={4}\n            >\n              <Button\n                width=\"100%\"\n                onClick={() => setFieldValue('initiative', rollDice(Dice.d20))}\n                variant=\"outline\"\n                rightIcon={<Icon as={GiDiceTwentyFacesTwenty} />}\n              >\n                Roll Initiative\n              </Button>\n            </GridItem>\n            {\n              editStatFields.map(([displayString, value]) => (\n                <GridItem key={value}>\n                  <HStack>\n                    <Text>{displayString}</Text>\n                    <NumberInputControl hideError name={value} width=\"8em\" />\n                  </HStack>\n                </GridItem>\n              ))\n            }\n          </Grid>\n        </AccordionPanel>\n      </AccordionItem>\n    );\n  };\n\n  const NPCModifyActions = ({ npc: _npc }: { npc: NPC }) => {\n    const context = useFormikContext<NPC>();\n\n    return (\n      <HStack mt={4}>\n        <Tooltip label=\"Save\" placement=\"top\">\n          <Button\n            width=\"100%\"\n            hidden={!context.dirty}\n            variant=\"solid\"\n            colorScheme=\"green\"\n            onClick={() => context.submitForm()}\n          >\n            <Icon as={IoMdSave} />\n          </Button>\n        </Tooltip>\n        <Tooltip label=\"Reset\" placement=\"top\">\n          <Button\n            width=\"100%\"\n            type=\"reset\"\n            hidden={!context.dirty}\n            variant=\"solid\"\n          >\n            <Icon as={ImRedo} />\n          </Button>\n        </Tooltip>\n        <Tooltip label=\"Delete\" placement=\"top\">\n          <Button\n            width=\"100%\"\n            onClick={() => removeNPCAction(_npc.id)}\n            variant=\"solid\"\n            colorScheme=\"red\"\n          >\n            <Icon as={AiFillDelete} />\n          </Button>\n        </Tooltip>\n      </HStack>\n    );\n  };\n\n  return (\n    <Formik\n      initialValues={npc}\n      onSubmit={(values, actions) => {\n        modifyNPCAction(values);\n        actions.resetForm();\n      }}\n      enableReinitialize\n      validationSchema={modifyNPCValidationSchema}\n    >\n      <Box\n        className=\"\"\n        width=\"100%\"\n        id={`character-${npc.id}`}\n        border={`0.3em solid ${formColour}${params.id === npc.id ? 'FF' : 22}`}\n        borderRadius={10}\n        p={4}\n      >\n        <Form>\n          <HStack\n            p={1}\n            mb={2}\n          >\n            <Box\n              textAlign=\"center\"\n              width=\"100%\"\n              backgroundColor={formColour}\n              color=\"white\"\n              borderRadius={8}\n              p={2}\n            >\n              <Text fontWeight=\"bold\">{npc.name}</Text>\n            </Box>\n            <NPCModifyActions npc={npc} />\n          </HStack>\n          <SimpleGrid templateColumns=\"repeat(3, 1fr)\" mt={4} mb={4}>\n            <GridItem>\n              <VStack alignItems=\"flex-start\">\n                <Box>\n                  <HStack>\n                    <Text fontWeight=\"bold\">THP </Text>\n                    <NumberInputControl hideError name=\"tempHP\" width=\"6em\" />\n                  </HStack>\n                </Box>\n                <Box>\n                  <HStack>\n                    <Text fontWeight=\"bold\">HP </Text>\n                    <NumberInputControl hideError name=\"currentHP\" width=\"6em\" />\n                    <Text>\n                      /\n                      {' '}\n                      {npc.maxHP}\n                    </Text>\n                  </HStack>\n                </Box>\n                <Text>\n                  AC\n                  {' '}\n                  {npc.armourClass}\n                  , Init.\n                  {' '}\n                  {npc.initiative + npc.initiativeMod}\n                  {' '}\n                  (\n                  {npc.initiative}\n                  <Icon as={GiDiceTwentyFacesTwenty} />\n                  {' '}\n                  {npc.initiativeMod >= 0 ? '+' : '-'}\n                  {' '}\n                  {Math.abs(npc.initiativeMod)}\n                  )\n                </Text>\n              </VStack>\n            </GridItem>\n            <GridItem colSpan={2}>\n              <TextareaControl\n                name=\"notes\"\n                textareaProps={{\n                  resize: 'none',\n                  height: '10em',\n                }}\n              />\n            </GridItem>\n          </SimpleGrid>\n          <ModifyCharacterConditionsField character={npc} />\n          <Accordion allowToggle allowMultiple>\n            <NPCModifyStatFields />\n            <AccordionItem>\n              <AccordionButton>\n                <Box flex=\"1\" textAlign=\"left\">\n                  <strong>Options</strong>\n                </Box>\n                <AccordionIcon />\n              </AccordionButton>\n              <AccordionPanel>\n                <Grid\n                  fontSize=\"sm\"\n                  templateColumns=\"repeat(4, 1fr)\"\n                  templateRows=\"repeat(2, 1fr)\"\n                  gap={6}\n                >\n                  {\n                    ([\n                      ['Reveal Name', 'showName'],\n                      ['Reveal Health', 'showHealth'],\n                      ['Reveal Armour Class', 'showAC'],\n                      ['Reveal Initiative', 'showInitiative'],\n                      ['Show in Turn Order', 'displayOnTurnOrder'],\n                      ['Hostile to Party', 'isHostile'],\n                      ['Friendly to Party', 'isFriendly'],\n                    ] as Array<[string, keyof NPC]>).map(([displayString, key]) => (\n                      <FormControl\n                        display=\"flex\"\n                        alignItems=\"center\"\n                        key={key}\n                      >\n                        <FormLabel mb=\"0\" fontSize=\"xs\">\n                          {displayString}\n                        </FormLabel>\n                        <Spacer />\n                        <SwitchControl name={key} />\n                      </FormControl>\n                    ))\n                  }\n                </Grid>\n              </AccordionPanel>\n            </AccordionItem>\n          </Accordion>\n        </Form>\n      </Box>\n    </Formik>\n  );\n};\n","import { AddIcon } from '@chakra-ui/icons';\nimport {\n  Button, HStack, Icon, VStack,\n} from '@chakra-ui/react';\nimport { Form, Formik } from 'formik';\nimport React from 'react';\nimport * as Yup from 'yup';\nimport { InputControl, NumberInputControl } from '../common/formik-chakra';\nimport { useAppDispatch, useAppSelector } from '../common/hooks';\nimport { addNPC } from '../common/npcSlice';\nimport { Dice, rollDice } from '../common/util';\nimport { ModifyNPCForm } from './ModifyNPCForm';\nimport { NPC } from './NPC.interfaces';\n\nconst NPCFormList = ({ npcs }: { npcs: NPC[] }) => (\n  <VStack>\n    {\n        npcs.map((npc) => (\n          <ModifyNPCForm\n            key={npc.id}\n            npc={npc}\n          />\n        ))\n      }\n  </VStack>\n);\n\ninterface NPCsProps {\n  showHostile?: boolean;\n  showFriendly?: boolean;\n  showNeutral?: boolean;\n}\n\nexport function NPCs({\n  showHostile, showFriendly, showNeutral,\n}: NPCsProps) {\n  const npcs = useAppSelector((state) => state.npcs.npcs.filter((i) => {\n    if (showHostile && i.isHostile) {\n      return true;\n    }\n    if (showFriendly && i.isFriendly) {\n      return true;\n    }\n    if (showNeutral && (!i.isFriendly && !i.isHostile)) {\n      return true;\n    }\n    return false;\n  }));\n  const dispatch = useAppDispatch();\n\n  const addNPCValidationSchema = Yup.object({\n    name: Yup.string().required().label('Name'),\n    maxHP: Yup.number().integer().moreThan(0).required()\n      .label('Maximum HP'),\n    initiativeMod: Yup.number().integer().required().label('Initiative Modifier'),\n    armourClass: Yup.number().integer().moreThan(0).default(10)\n      .label('Armour Class'),\n  });\n\n  const AddNPCForm = () => {\n    type AddFormFields = Array<\n      [string, keyof NPC, typeof InputControl | typeof NumberInputControl]\n    >;\n\n    const addFormFields: AddFormFields = [\n      ['NPC Name', 'name', InputControl],\n      ['Maximum HP', 'maxHP', NumberInputControl],\n      ['Initiative Modifier', 'initiativeMod', NumberInputControl],\n      ['Armour Class', 'armourClass', NumberInputControl],\n    ];\n    return (\n      <Formik\n        initialValues={{\n          name: '',\n          maxHP: 0,\n          initiativeMod: 0,\n          armourClass: 0,\n        }}\n        validationSchema={addNPCValidationSchema}\n        onSubmit={\n          (values) => {\n            dispatch(addNPC({\n              name: values.name,\n              maxHP: values.maxHP,\n              currentHP: values.maxHP,\n              tempHP: 0,\n              initiative: rollDice(Dice.d20),\n              initiativeMod: values.initiativeMod,\n              armourClass: values.armourClass,\n              conditions: [],\n              displayOnTurnOrder: true,\n              notes: '',\n              isFriendly: showFriendly || false,\n              isHostile: showHostile || false,\n              isBoss: false,\n              showHealth: false,\n              showInitiative: false,\n              showAC: false,\n              showName: false,\n            }));\n          }\n        }\n      >\n        <Form>\n          <HStack>\n            {\n              addFormFields.map(([label, key, IC]) => (\n                <IC\n                  hideError\n                  mt={4}\n                  mb={4}\n                  name={key}\n                  label={label}\n                  key={key}\n                />\n              ))\n            }\n          </HStack>\n          <Button\n            mb={4}\n            width=\"100%\"\n            type=\"submit\"\n            variant=\"solid\"\n            colorScheme=\"green\"\n            rightIcon={<Icon as={AddIcon} />}\n          >\n            Add\n            {' '}\n            {showHostile ? 'Enemy' : 'NPC'}\n          </Button>\n        </Form>\n      </Formik>\n    );\n  };\n\n  return (\n    <>\n      <AddNPCForm />\n      <NPCFormList npcs={npcs} />\n    </>\n  );\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { v4 } from 'uuid';\nimport * as Yup from 'yup';\nimport { Player } from '../Characters/Player.interfaces';\nimport { Dice, rollDice } from './util';\n\nexport interface PlayerState {\n  players: Player[];\n}\n\nconst initialState: PlayerState = {\n  players: [],\n};\n\nexport const playerSlice = createSlice({\n  name: 'player',\n  initialState,\n  reducers: {\n    addPlayer: (state, action: PayloadAction<Omit<Player, 'id'>>) => {\n      const id = v4();\n      state.players.push({\n        ...action.payload,\n        id,\n      });\n    },\n    removePlayer: (state, action: PayloadAction<string>) => {\n      const index = state.players.findIndex((v) => v.id === action.payload);\n\n      if (index >= 0) {\n        state.players.splice(index, 1);\n      } else {\n        console.warn(`Invalid player ${action.payload}`);\n      }\n    },\n    refreshPlayers: (state, action: PayloadAction<Player[] | undefined>) => {\n      if (action.payload) {\n        state.players.splice(0, state.players.length, ...action.payload);\n      }\n    },\n    modifyPlayer: (state, action: PayloadAction<Partial<Player>>) => {\n      const foundPlayer = state.players.findIndex((i) => i.id === action.payload.id);\n\n      if (foundPlayer >= 0) {\n        const { players } = state;\n        players[foundPlayer] = {\n          ...state.players[foundPlayer],\n          ...action.payload,\n        };\n      }\n    },\n    rollAllPlayerInitiative: (state) => {\n      state.players.forEach((i) => {\n        const player = i;\n        player.initiative = rollDice(Dice.d20);\n      });\n    },\n  },\n});\n\nexport const modifyPlayerValidationSchema = Yup.object({\n  name: Yup.string(),\n  currentHP: Yup.number().integer().required(),\n  maxHP: Yup.number().integer().required(),\n  tempHP: Yup.number().integer().default(0).required(),\n  armourClass: Yup.number().integer().required(),\n  initiative: Yup.number().integer().min(1).max(20)\n    .required(),\n  initiativeMod: Yup.number().integer().required(),\n  notes: Yup.string(),\n  conditions: Yup.array().of(Yup.string()).required(),\n  displayOnTurnOrder: Yup.boolean().required(),\n});\n\nexport const {\n  addPlayer, removePlayer, refreshPlayers, rollAllPlayerInitiative, modifyPlayer,\n} = playerSlice.actions;\n\nexport default playerSlice.reducer;\n","import {\n  Accordion, AccordionButton, AccordionIcon, AccordionItem,\n  AccordionPanel, Box, Button, FormControl, FormLabel, Grid,\n  GridItem, HStack, Icon, SimpleGrid, Spacer, Text, Tooltip, VStack,\n} from '@chakra-ui/react';\nimport { Form, Formik, useFormikContext } from 'formik';\nimport { AiFillDelete } from 'react-icons/ai';\nimport { GiDiceTwentyFacesTwenty } from 'react-icons/gi';\nimport { ImRedo } from 'react-icons/im';\nimport { IoMdSave } from 'react-icons/io';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { NumberInputControl, SwitchControl } from '../common/formik-chakra';\nimport TextareaControl from '../common/formik-chakra/TextareaControl';\nimport { useAppDispatch } from '../common/hooks';\nimport { modifyPlayerValidationSchema, modifyPlayer, removePlayer } from '../common/playerSlice';\nimport { Dice, rollDice } from '../common/util';\nimport { ModifyCharacterConditionsField } from './ModifyCharacterConditionsField';\nimport { Player } from './Player.interfaces';\n\ninterface ModifyPlayerFormProps {\n  player: Player;\n}\n\nexport const ModifyPlayerForm = ({ player }: ModifyPlayerFormProps) => {\n  const dispatch = useAppDispatch();\n\n  const params = useParams<{id: string}>();\n\n  const modifyPlayerAction = (p: Player) => dispatch(modifyPlayer(p));\n  const removePlayerAction = (id: string) => dispatch(removePlayer(id));\n\n  const PlayerModifyStatFields = () => {\n    const editStatFields: Array<[string, string]> = [\n      ['AC: ', 'armourClass'],\n      ['Initiative: ', 'initiative'],\n      ['Init. Mod: ', 'initiativeMod'],\n      ['Max HP: ', 'maxHP'],\n    ];\n\n    const { setFieldValue } = useFormikContext<Player>();\n    return (\n      <AccordionItem>\n        <AccordionButton>\n          <Box flex=\"1\" textAlign=\"left\">\n            <strong>Edit Stats</strong>\n          </Box>\n          <AccordionIcon />\n        </AccordionButton>\n        <AccordionPanel>\n          <Grid\n            fontSize=\"sm\"\n            templateColumns=\"repeat(4, 1fr)\"\n            templateRows=\"repeat(2, 1fr)\"\n            gap={4}\n          >\n            <GridItem\n              colSpan={4}\n            >\n              <Button\n                width=\"100%\"\n                onClick={() => setFieldValue('initiative', rollDice(Dice.d20))}\n                variant=\"outline\"\n                rightIcon={<Icon as={GiDiceTwentyFacesTwenty} />}\n              >\n                Roll Initiative\n              </Button>\n            </GridItem>\n            {\n              editStatFields.map(([displayString, value]) => (\n                <GridItem key={value}>\n                  <HStack>\n                    <Text>{displayString}</Text>\n                    <NumberInputControl hideError name={value} width=\"8em\" />\n                  </HStack>\n                </GridItem>\n              ))\n            }\n          </Grid>\n        </AccordionPanel>\n      </AccordionItem>\n    );\n  };\n\n  const PlayerModifyActions = ({ player: _player }: { player: Player }) => {\n    const context = useFormikContext<Player>();\n\n    return (\n      <HStack mt={4}>\n        <Tooltip label=\"Save\" placement=\"top\">\n          <Button\n            width=\"100%\"\n            hidden={!context.dirty}\n            variant=\"solid\"\n            colorScheme=\"green\"\n            onClick={() => context.submitForm()}\n          >\n            <Icon as={IoMdSave} />\n          </Button>\n        </Tooltip>\n        <Tooltip label=\"Reset\" placement=\"top\">\n          <Button\n            width=\"100%\"\n            type=\"reset\"\n            hidden={!context.dirty}\n            variant=\"solid\"\n          >\n            <Icon as={ImRedo} />\n          </Button>\n        </Tooltip>\n        <Tooltip label=\"Delete\" placement=\"top\">\n          <Button\n            width=\"100%\"\n            onClick={() => removePlayerAction(_player.id)}\n            variant=\"solid\"\n            colorScheme=\"red\"\n          >\n            <Icon as={AiFillDelete} />\n          </Button>\n        </Tooltip>\n      </HStack>\n    );\n  };\n\n  return (\n    <Formik\n      initialValues={player}\n      onSubmit={(values, actions) => {\n        modifyPlayerAction(values);\n        actions.resetForm();\n      }}\n      enableReinitialize\n      validationSchema={modifyPlayerValidationSchema}\n    >\n      <Box\n        className=\"\"\n        width=\"100%\"\n        id={`character-${player.id}`}\n        border={`0.3em solid #00AA00${params.id === player.id ? 'FF' : 22}`}\n        borderRadius={10}\n        p={4}\n      >\n        <Form>\n          <HStack\n            p={1}\n            mb={2}\n          >\n            <Box\n              textAlign=\"center\"\n              width=\"100%\"\n              backgroundColor=\"darkgreen\"\n              color=\"white\"\n              borderRadius={8}\n              p={2}\n            >\n              <Text fontWeight=\"bold\">{player.name}</Text>\n            </Box>\n            <PlayerModifyActions player={player} />\n          </HStack>\n          <SimpleGrid templateColumns=\"repeat(3, 1fr)\" mt={4} mb={4}>\n            <GridItem>\n              <VStack alignItems=\"flex-start\">\n                <Box>\n                  <HStack>\n                    <Text fontWeight=\"bold\">THP </Text>\n                    <NumberInputControl hideError name=\"tempHP\" width=\"6em\" />\n                  </HStack>\n                </Box>\n                <Box>\n                  <HStack>\n                    <Text fontWeight=\"bold\">HP </Text>\n                    <NumberInputControl hideError name=\"currentHP\" width=\"6em\" />\n                    <Text>\n                      /\n                      {' '}\n                      {player.maxHP}\n                    </Text>\n                  </HStack>\n                </Box>\n                <Text>\n                  AC\n                  {' '}\n                  {player.armourClass}\n                  , Init.\n                  {' '}\n                  {player.initiative + player.initiativeMod}\n                  {' '}\n                  (\n                  {player.initiative}\n                  <Icon as={GiDiceTwentyFacesTwenty} />\n                  {' '}\n                  {player.initiativeMod >= 0 ? '+' : '-'}\n                  {' '}\n                  {Math.abs(player.initiativeMod)}\n                  )\n                </Text>\n              </VStack>\n            </GridItem>\n            <GridItem colSpan={2}>\n              <TextareaControl\n                name=\"notes\"\n                textareaProps={{\n                  resize: 'none',\n                  height: '10em',\n                }}\n              />\n            </GridItem>\n          </SimpleGrid>\n          <ModifyCharacterConditionsField character={player} />\n          <Accordion allowToggle allowMultiple>\n            <PlayerModifyStatFields />\n            <AccordionItem>\n              <AccordionButton>\n                <Box flex=\"1\" textAlign=\"left\">\n                  <strong>Options</strong>\n                </Box>\n                <AccordionIcon />\n              </AccordionButton>\n              <AccordionPanel>\n                <Grid\n                  fontSize=\"sm\"\n                  templateColumns=\"repeat(3, 1fr)\"\n                  templateRows=\"repeat(1, 1fr)\"\n                  gap={6}\n                >\n                  {\n                    ([\n                      ['Show in Turn Order', 'displayOnTurnOrder'],\n                    ] as Array<[string, keyof Player]>).map(([displayString, key]) => (\n                      <FormControl display=\"flex\" alignItems=\"center\" key={key}>\n                        <FormLabel mb=\"0\">\n                          {displayString}\n                        </FormLabel>\n                        <Spacer />\n                        <SwitchControl name={key} />\n                      </FormControl>\n                    ))\n                  }\n                </Grid>\n              </AccordionPanel>\n            </AccordionItem>\n          </Accordion>\n        </Form>\n      </Box>\n    </Formik>\n  );\n};\n","import { AddIcon } from '@chakra-ui/icons';\nimport {\n  Button, HStack, Icon, VStack,\n} from '@chakra-ui/react';\nimport { Form, Formik } from 'formik';\nimport React from 'react';\nimport * as Yup from 'yup';\nimport { InputControl, NumberInputControl } from '../common/formik-chakra';\nimport { useAppDispatch, useAppSelector } from '../common/hooks';\nimport { addPlayer } from '../common/playerSlice';\nimport { Dice, rollDice } from '../common/util';\nimport { ModifyPlayerForm } from './ModifyPlayerForm';\nimport { Player } from './Player.interfaces';\n\nconst PlayerFormList = ({ players }: { players: Player[] }) => (\n  <VStack>\n    {\n        players.map((player) => (\n          <ModifyPlayerForm\n            key={player.id}\n            player={player}\n          />\n        ))\n      }\n  </VStack>\n);\n\nexport function Players() {\n  const players = useAppSelector((state) => state.players.players);\n  const dispatch = useAppDispatch();\n\n  const addPlayerValidationSchema = Yup.object({\n    name: Yup.string().required().label('Name'),\n    maxHP: Yup.number().integer().moreThan(0).required()\n      .label('Maximum HP'),\n    initiativeMod: Yup.number().integer().required().label('Initiative Modifier'),\n    armourClass: Yup.number().integer().moreThan(0).default(10)\n      .label('Armour Class'),\n  });\n\n  type AddFormFields = Array<[\n    string, keyof Player, typeof InputControl | typeof NumberInputControl]\n  >;\n\n  const AddPlayerForm = () => {\n    const addFormFields: AddFormFields = [\n      ['Player Name', 'name', InputControl],\n      ['Maximum HP', 'maxHP', NumberInputControl],\n      ['Initiative Modifier', 'initiativeMod', NumberInputControl],\n      ['Armour Class', 'armourClass', NumberInputControl],\n    ];\n    return (\n      <Formik\n        initialValues={{\n          name: '',\n          maxHP: 0,\n          initiativeMod: 0,\n          armourClass: 0,\n        }}\n        validationSchema={addPlayerValidationSchema}\n        onSubmit={\n          (values) => {\n            dispatch(addPlayer({\n              name: values.name,\n              maxHP: values.maxHP,\n              currentHP: values.maxHP,\n              tempHP: 0,\n              initiative: rollDice(Dice.d20),\n              initiativeMod: values.initiativeMod,\n              armourClass: values.armourClass,\n              conditions: [],\n              displayOnTurnOrder: true,\n              notes: '',\n            }));\n          }\n        }\n      >\n        <Form>\n          <HStack>\n            {\n              addFormFields.map(([label, key, IC]) => (\n                <IC\n                  hideError\n                  mt={4}\n                  mb={4}\n                  name={key}\n                  label={label}\n                  key={key}\n                />\n              ))\n            }\n          </HStack>\n          <Button\n            mb={4}\n            width=\"100%\"\n            type=\"submit\"\n            variant=\"solid\"\n            colorScheme=\"green\"\n            rightIcon={<Icon as={AddIcon} />}\n          >\n            Add Player\n          </Button>\n        </Form>\n      </Formik>\n    );\n  };\n\n  return (\n    <>\n      <AddPlayerForm />\n      <PlayerFormList players={players} />\n    </>\n  );\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\ninterface CampaignState {\n  currentTurnId: string;\n  campaignTitle: string,\n}\n\nconst initialState: CampaignState = {\n  currentTurnId: '',\n  campaignTitle: 'D&D Tracker',\n};\n\nexport const campaignSlice = createSlice({\n  name: 'campaign',\n  initialState,\n  reducers: {\n    setTurn: (state, action: PayloadAction<string>) => {\n      const modState = state;\n      modState.currentTurnId = action.payload;\n    },\n    setCampaignTitle: (state, action: PayloadAction<string>) => {\n      const modState = state;\n      modState.campaignTitle = action.payload;\n    },\n  },\n});\n\nexport const { setTurn, setCampaignTitle } = campaignSlice.actions;\n\nexport default campaignSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport playerReducer from './playerSlice';\nimport campaignReducer from './campaignSlice';\nimport npcReducer from './npcSlice';\n\nconst APP_VERSION = '0.0.2';\n\nexport const loadFromLocalStorage = () => {\n  try {\n    const serialisedState = localStorage.getItem(`persistantState_${APP_VERSION}`);\n    if (serialisedState === null) return undefined;\n    return JSON.parse(serialisedState);\n  } catch (e) {\n    console.warn(e);\n    return undefined;\n  }\n};\n\nexport const store = configureStore({\n  reducer: {\n    players: playerReducer,\n    campaign: campaignReducer,\n    npcs: npcReducer,\n  },\n  preloadedState: loadFromLocalStorage(),\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nfunction saveToLocalStorage(state: RootState) {\n  try {\n    const serialisedState = JSON.stringify(state);\n    localStorage.setItem(`persistantState_${APP_VERSION}`, serialisedState);\n  } catch (e) {\n    console.warn(e);\n  }\n}\n\nstore.subscribe(() => {\n  if (document.hasFocus()) {\n    saveToLocalStorage(store.getState());\n  }\n});\n","import {\n  Badge, Box, Grid, HStack, Icon, Text,\n} from '@chakra-ui/react';\nimport React from 'react';\nimport { BsHeartFill } from 'react-icons/bs';\nimport { GiCheckedShield, GiDiceTwentyFacesTwenty, GiWalkingBoot } from 'react-icons/gi';\nimport { npcTypeColours } from '../App';\nimport { NPC } from '../Characters/NPC.interfaces';\n\ninterface NPCTurnProps {\n  npc: NPC;\n  isActive: boolean;\n  onClick: () => void;\n}\n\nexport function NPCTurn({ npc, isActive, onClick }: NPCTurnProps) {\n  const tempHP = npc.tempHP ? ` (${npc.tempHP})` : '';\n\n  let formColour = npcTypeColours.neutral;\n\n  if (npc.isHostile) {\n    formColour = npcTypeColours.enemy;\n  } else if (npc.isFriendly) {\n    formColour = npcTypeColours.friendly;\n  }\n\n  return (\n    <Box\n      className=\"turn-block turn-block-npc\"\n      border={`${isActive ? '0.4em' : '0.2em'} solid ${formColour}${isActive ? 'FF' : 22}`}\n      borderRadius=\"0.4em\"\n      opacity={isActive ? '100%' : '80%'}\n      cursor=\"pointer\"\n      onClick={onClick}\n    >\n      <Grid templateColumns=\"repeat(3, 1fr)\" fontSize=\"sm\">\n        <Text fontWeight=\"bold\">{npc.showName ? npc.name : '???'}</Text>\n        {\n          npc.showAC\n          && (\n          <Text>\n            <Icon as={GiCheckedShield} />\n            {' '}\n            {npc.armourClass}\n          </Text>\n          )\n        }\n        {\n          npc.showHealth\n            ? (\n              <Text>\n                <Icon as={BsHeartFill} />\n                {' '}\n                {npc.currentHP}\n                {' '}\n                {tempHP}\n                {' '}\n                /\n                {' '}\n                {npc.maxHP}\n              </Text>\n            )\n            : (\n              <Text>\n                <Icon as={BsHeartFill} />\n                {' '}\n                Damage Taken:\n                {' '}\n                {npc.maxHP - npc.currentHP}\n              </Text>\n            )\n        }\n        {\n          npc.showInitiative\n          && (\n          <Text>\n            <Icon as={GiWalkingBoot} />\n            {' '}\n            {npc.initiative + npc.initiativeMod}\n            {' '}\n            (\n            {npc.initiative}\n            <Icon as={GiDiceTwentyFacesTwenty} />\n            {' '}\n            {npc.initiativeMod >= 0 ? '+' : '-'}\n            {' '}\n            {Math.abs(npc.initiativeMod)}\n            )\n          </Text>\n          )\n        }\n      </Grid>\n      {\n        npc.conditions.length > 0 && (\n        <HStack>\n          {npc.conditions.map((i) => <Badge variant=\"solid\" key={npc.conditions.findIndex((j) => i === j)}>{i}</Badge>)}\n        </HStack>\n        )\n      }\n    </Box>\n  );\n}\n","import {\n  Badge, Box, Grid, HStack, Icon, Text,\n} from '@chakra-ui/react';\nimport React from 'react';\nimport { BsHeartFill } from 'react-icons/bs';\nimport { GiCheckedShield, GiDiceTwentyFacesTwenty, GiWalkingBoot } from 'react-icons/gi';\nimport { Player } from '../Characters/Player.interfaces';\n\ninterface PlayerTurnProps {\n  player: Player;\n  isActive: boolean;\n  onClick: () => void;\n}\n\nexport function PlayerTurn({ player, isActive, onClick }: PlayerTurnProps) {\n  const tempHP = player.tempHP ? ` (${player.tempHP})` : '';\n\n  return (\n    <Box\n      onClick={onClick}\n      className=\"turn-block turn-block-player\"\n      border={`${isActive ? '0.4em' : '0.2em'} solid #00AA00${isActive ? 'FF' : 22}`}\n      borderRadius=\"0.4em\"\n      opacity={isActive ? '100%' : '80%'}\n      cursor=\"pointer\"\n    >\n      <Grid templateColumns=\"repeat(4, 1fr)\" fontSize=\"sm\">\n        <Text fontWeight=\"bold\">{player.name}</Text>\n        <Text>\n          <Icon as={GiCheckedShield} />\n          {' '}\n          {player.armourClass}\n        </Text>\n        <Text>\n          <Icon as={BsHeartFill} />\n          {' '}\n          {player.currentHP}\n          {' '}\n          {tempHP}\n          {' '}\n          /\n          {' '}\n          {player.maxHP}\n        </Text>\n        <Text>\n          <Icon as={GiWalkingBoot} />\n          {' '}\n          {player.initiative + player.initiativeMod}\n          {' '}\n          (\n          {player.initiative}\n          <Icon as={GiDiceTwentyFacesTwenty} />\n          {' '}\n          {player.initiativeMod >= 0 ? '+' : '-'}\n          {' '}\n          {Math.abs(player.initiativeMod)}\n          )\n        </Text>\n      </Grid>\n      {\n        player.conditions.length > 0 && (\n        <HStack>\n          {player.conditions.map((i) => <Badge variant=\"solid\" key={player.conditions.findIndex((j) => i === j)}>{i}</Badge>)}\n        </HStack>\n        )\n      }\n    </Box>\n  );\n}\n","import {\n  Box,\n  Button, HStack, Icon, StackDivider, VStack,\n} from '@chakra-ui/react';\nimport React from 'react';\nimport { GiDiceTwentyFacesTwenty } from 'react-icons/gi';\nimport { useHistory } from 'react-router-dom';\nimport { Character } from '../Characters/Character.interfaces';\nimport { NPC } from '../Characters/NPC.interfaces';\nimport { Player } from '../Characters/Player.interfaces';\nimport { useAppDispatch, useAppSelector } from '../common/hooks';\nimport { setTurn } from '../common/campaignSlice';\nimport { rollAllPlayerInitiative } from '../common/playerSlice';\nimport { NPCTurn } from './NPCTurn';\nimport './Initiative.css';\nimport { PlayerTurn } from './PlayerTurn';\n\ntype CharacterType = 'player' | 'npc';\n\nexport function Initiative() {\n  const history = useHistory();\n\n  const changePageMethod = ({ type, id }: {\n    type: string;\n    id: string\n  }): void => {\n    history.push(`/${type}/${id}`);\n    const findElement = (_id: string, iter = 1) => {\n      const maxIter = 10;\n      if (iter > maxIter) return;\n      const element = document.querySelector(`#character-${_id}`);\n      if (element) {\n        element.scrollIntoView(true);\n      } else {\n        setTimeout(() => {\n          findElement(_id, iter + 1);\n        }, 50);\n      }\n    };\n    setTimeout(() => {\n      findElement(id);\n    }, 50);\n  };\n\n  const players = useAppSelector<Player[]>((state) => state.players.players);\n  const npcs = useAppSelector<NPC[]>((state) => state.npcs.npcs);\n  const currentTurnId = useAppSelector<string>((state) => state.campaign.currentTurnId);\n\n  const dispatch = useAppDispatch();\n\n  const getSortedTurns = () => {\n    const formattedPlayers: Array<{\n      character: Character;\n      type: 'player'\n    }> = players.map((i) => ({\n      character: i,\n      type: 'player',\n    }));\n\n    const formattedNPCs: Array<{\n      character: Character;\n      type: 'npc'\n    }> = npcs.map((i) => ({\n      character: i,\n      type: 'npc',\n    }));\n\n    const sortedTurns: Array<{\n      character: Character;\n      type: CharacterType\n    }> = [\n      ...formattedPlayers,\n      ...formattedNPCs,\n    ]\n      .filter((i) => i.character.displayOnTurnOrder)\n      .sort((a, b) => {\n        const aChar = a.character;\n        const bChar = b.character;\n        return (bChar.initiative + bChar.initiativeMod) - (aChar.initiative + aChar.initiativeMod);\n      });\n\n    const returnValue = (array: Array<{\n      character: Character;\n      type: CharacterType\n    }>): Array<{\n      isActive: boolean;\n      character: Character;\n      type: CharacterType\n    }> => array.filter((i) => i.character.displayOnTurnOrder).map((i, idx) => ({\n      isActive: idx === 0,\n      character: i.character,\n      type: i.type,\n    }));\n\n    if (!currentTurnId) {\n      return returnValue(sortedTurns);\n    }\n\n    const currentTurnIndex = sortedTurns.findIndex((i) => i.character.id === currentTurnId) || 0;\n    const getSortedByNextActiveTurn = () => [\n      ...sortedTurns\n        .slice(currentTurnIndex + 1, sortedTurns.length),\n      ...sortedTurns\n        .slice(0, currentTurnIndex + 1),\n    ];\n\n    return returnValue(getSortedByNextActiveTurn());\n  };\n\n  const rollInitiativesAction = () => {\n    dispatch(rollAllPlayerInitiative());\n    dispatch(setTurn(''));\n  };\n\n  const setTurnAction = () => {\n    const turns = getSortedTurns();\n    if (getSortedTurns().length < 1) {\n      return;\n    }\n\n    if (!currentTurnId) {\n      dispatch(setTurn(turns[0].character.id));\n      return;\n    }\n\n    const currentTurnCharacter = turns.findIndex((i) => i.character.id === currentTurnId);\n\n    if (!currentTurnCharacter) {\n      dispatch(setTurn(turns[1].character.id));\n      return;\n    }\n    const nextCharacter = turns[(currentTurnCharacter + 1) % turns.length];\n    dispatch(setTurn(nextCharacter.character.id));\n  };\n\n  return (\n    <Box\n      mb={20}\n    >\n      <VStack divider={<StackDivider color=\"gray.200\" />}>\n        {getSortedTurns().map(({ character, isActive, type }) => {\n          if (type === 'player') {\n            return (\n              <PlayerTurn\n                onClick={() => changePageMethod({ type: 'players', id: character.id })}\n                isActive={isActive}\n                player={character}\n                key={character.id}\n              />\n            );\n          } if (type === 'npc') {\n            const npc = character as NPC;\n            return (\n              <NPCTurn\n                onClick={() => changePageMethod({ type: 'enemies', id: character.id })}\n                isActive={isActive}\n                npc={npc}\n                key={character.id}\n              />\n            );\n          }\n\n          return false;\n        })}\n        ;\n      </VStack>\n      <HStack\n        position=\"fixed\"\n        bottom=\"0\"\n        left=\"0\"\n        backgroundColor=\"white\"\n        width=\"100%\"\n      >\n        <Button onClick={rollInitiativesAction} width=\"100%\">\n          Roll Initiative\n          <Icon as={GiDiceTwentyFacesTwenty} />\n        </Button>\n        <Button onClick={setTurnAction} width=\"100%\">Next Turn</Button>\n      </HStack>\n    </Box>\n  );\n}\n","import {\n  Grid, Flex, Button,\n} from '@chakra-ui/react';\nimport React from 'react';\n\nexport const Settings = () => (\n  <Grid\n    templateColumns=\"repeat(1, 1fr)\"\n    gap={5}\n  >\n    <Flex>\n      <Button width=\"100%\">Import Saved State</Button>\n    </Flex>\n    <Flex>\n      <Button width=\"100%\">Import Characters</Button>\n    </Flex>\n    <Flex>\n      <Button width=\"100%\">Export Save State</Button>\n    </Flex>\n    <Flex>\n      <Button width=\"100%\">Export Characters</Button>\n    </Flex>\n    <Flex>\n      <Button width=\"100%\" colorScheme=\"red\">Clear State</Button>\n    </Flex>\n    <Flex>\n      <Button width=\"100%\" colorScheme=\"red\">Clear Characters</Button>\n    </Flex>\n  </Grid>\n);\n","import {\n  Flex, Heading, IconButton, Icon, Input,\n} from '@chakra-ui/react';\nimport React, { useState } from 'react';\nimport { GoPencil } from 'react-icons/go';\nimport { ImRedo } from 'react-icons/im';\nimport { IoMdSave } from 'react-icons/io';\nimport { setCampaignTitle } from '../common/campaignSlice';\nimport { useAppSelector, useAppDispatch } from '../common/hooks';\n\nexport const CampaignTitle = () => {\n  const campaignTitle = useAppSelector((state) => state.campaign.campaignTitle);\n  const dispatch = useAppDispatch();\n  const setTitleAction = (ct: string) => dispatch(setCampaignTitle(ct));\n  const [editableCampaignTitle, setEditableCampaignTitle] = useState(campaignTitle);\n  const [editTitleEnabled, setEditTitleEnabled] = useState(false);\n\n  const editTitleRef = React.useRef<HTMLInputElement>(null);\n  return (\n    <Flex\n      mb={4}\n      width=\"100%\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n    >\n      {\n        !editTitleEnabled && (\n          <Flex\n            justifyContent=\"center\"\n            alignItems=\"center\"\n          >\n            <Heading>{campaignTitle}</Heading>\n            <IconButton\n              ml={2}\n              aria-label=\"Edit Title\"\n              icon={<Icon as={GoPencil} />}\n              onClick={() => {\n                setEditTitleEnabled(true);\n                setTimeout(() => {\n                  editTitleRef.current?.focus();\n                }, 100);\n              }}\n            />\n          </Flex>\n        )\n      }\n      {\n        editTitleEnabled && (\n          <Flex\n            justifyContent=\"center\"\n            alignItems=\"center\"\n          >\n            <Input\n              ref={editTitleRef}\n              onChange={(e) => setEditableCampaignTitle(e.target.value)}\n              onKeyPress={(e) => {\n                if (e.code === 'Enter') {\n                  setEditTitleEnabled(false);\n                  setTitleAction(editableCampaignTitle);\n                }\n              }}\n            />\n            <IconButton\n              ml={2}\n              aria-label=\"Save\"\n              icon={<Icon as={IoMdSave} />}\n              onClick={() => {\n                setEditTitleEnabled(false);\n                setTitleAction(editableCampaignTitle);\n              }}\n            />\n            <IconButton\n              ml={2}\n              aria-label=\"Reset\"\n              icon={<Icon as={ImRedo} />}\n              onClick={() => setEditTitleEnabled(false)}\n            />\n          </Flex>\n        )\n      }\n    </Flex>\n  );\n};\n","import { useHistory, useRouteMatch } from 'react-router-dom';\nimport { Flex, Text, Icon } from '@chakra-ui/react';\nimport React from 'react';\nimport { IconType } from 'react-icons';\n\ninterface MenuItemLinkProps {\n  to: string;\n  label: string;\n  activeOnlyWhenExact?: boolean;\n  icon?: IconType;\n}\n\nexport const MenuItemLink = ({\n  to, label, activeOnlyWhenExact, icon,\n}: MenuItemLinkProps) => {\n  const history = useHistory();\n  const match = useRouteMatch({\n    path: to,\n    exact: activeOnlyWhenExact,\n  });\n\n  function handleClick() {\n    history.push(to);\n  }\n\n  return (\n    <Flex\n      cursor=\"pointer\"\n      width=\"100%\"\n      textAlign=\"left\"\n      borderRadius={10}\n      backgroundColor={match ? 'gray' : undefined}\n      p={2}\n      fontWeight=\"bold\"\n      color={match ? 'white' : 'black'}\n      onClick={handleClick}\n      alignItems=\"center\"\n    >\n      <Flex width=\"10%\">\n        {icon && <Icon as={icon} />}\n      </Flex>\n      <Text>{label}</Text>\n    </Flex>\n  );\n};\n","import {\n  Box, Drawer, DrawerBody, DrawerCloseButton,\n  DrawerContent, DrawerFooter, DrawerHeader, DrawerOverlay,\n  Icon, useDisclosure, VStack,\n} from '@chakra-ui/react';\nimport React, { ReactElement, useEffect } from 'react';\nimport { IconType } from 'react-icons';\nimport { GiHamburgerMenu } from 'react-icons/gi';\nimport { MenuItemLink } from './MenuItemLink';\n\ninterface SidebarProps {\n  routes: Array<{\n    component: ReactElement,\n    basePath: string,\n    path: string,\n    exact?: boolean,\n    pageTitle: string,\n    icon?: IconType,\n  }>;\n}\n\nfunction useWindowSize() {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = React.useState<{\n    width: number;\n    height: number;\n  }>({\n    width: 0,\n    height: 0,\n  });\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n    // Add event listener\n    window.addEventListener('resize', handleResize);\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n    // Remove event listener on cleanup\n    return () => window.removeEventListener('resize', handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n  return windowSize;\n}\n\nexport const Sidebar = ({ routes }: SidebarProps) => {\n  const size = useWindowSize();\n  const minWidth = 1400;\n  const isLargerThanMinWidth = size.width > minWidth;\n\n  const { isOpen, onOpen, onClose } = useDisclosure({\n    defaultIsOpen: isLargerThanMinWidth,\n  });\n\n  return (\n    <>\n      <div className=\"drawer-button\">\n        <Box pt={3} pb={3} pl={4} pr={4} cursor=\"pointer\" onClick={onOpen}>\n          <Icon as={GiHamburgerMenu} />\n        </Box>\n      </div>\n      <Drawer\n        isOpen={isLargerThanMinWidth || isOpen}\n        placement=\"left\"\n        onClose={() => {\n          if (!isLargerThanMinWidth) {\n            onClose();\n          }\n        }}\n        blockScrollOnMount={!isLargerThanMinWidth}\n        variant={isLargerThanMinWidth ? 'alwaysOpen' : undefined}\n        trapFocus={!isLargerThanMinWidth}\n      >\n        {!isLargerThanMinWidth && <DrawerOverlay />}\n        <DrawerContent>\n          {!isLargerThanMinWidth && <DrawerCloseButton />}\n          <DrawerHeader>Menu</DrawerHeader>\n\n          <DrawerBody>\n            <VStack spacing={0}>\n              {routes.map(({\n                pageTitle, path, exact, icon,\n              }) => (\n                <MenuItemLink\n                  to={path}\n                  label={pageTitle}\n                  activeOnlyWhenExact={exact}\n                  key={pageTitle}\n                  icon={icon}\n                />\n              ))}\n            </VStack>\n          </DrawerBody>\n\n          <DrawerFooter />\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n};\n","import {\n  Center, Container, Divider, Heading,\n} from '@chakra-ui/react';\nimport { FaBars, FaCog } from 'react-icons/fa';\nimport React, { ReactElement } from 'react';\nimport {\n  BrowserRouter as Router, Route, Switch,\n} from 'react-router-dom';\nimport { IconType } from 'react-icons';\nimport { BsPersonFill } from 'react-icons/bs';\nimport { GiBirdClaw } from 'react-icons/gi';\nimport { AiFillRobot } from 'react-icons/ai';\nimport { NPCs } from '../Characters/NPCs';\nimport { Players } from '../Characters/Players';\nimport { setCampaignTitle, setTurn } from '../common/campaignSlice';\nimport { useAppDispatch } from '../common/hooks';\nimport { refreshNPCs } from '../common/npcSlice';\nimport { refreshPlayers } from '../common/playerSlice';\nimport { loadFromLocalStorage, RootState } from '../common/store';\nimport { Initiative } from '../Initiative';\nimport { Settings } from '../Settings';\nimport { CampaignTitle } from './CampaignTitle';\nimport { Sidebar } from './Sidebar';\nimport './App.css';\n\nexport function App() {\n  const dispatch = useAppDispatch();\n\n  window.addEventListener('storage', () => {\n    const persistedStorage: RootState = loadFromLocalStorage();\n\n    if (!document.hasFocus()) {\n      const refreshActions = [\n        refreshPlayers(persistedStorage?.players?.players || []),\n        refreshNPCs(persistedStorage?.npcs?.npcs || []),\n        setCampaignTitle(persistedStorage?.campaign?.campaignTitle || ''),\n        setTurn(persistedStorage?.campaign?.currentTurnId || ''),\n      ];\n      refreshActions.map(dispatch);\n    }\n  });\n\n  const routes: Array<{\n    component: ReactElement,\n    basePath: string,\n    path: string,\n    exact?: boolean,\n    pageTitle: string,\n    icon?: IconType,\n  }> = [\n    {\n      component: <Initiative />,\n      path: '/',\n      basePath: '/',\n      exact: true,\n      pageTitle: 'Turn Order',\n      icon: FaBars,\n    },\n    {\n      component: <Players />,\n      path: '/players',\n      basePath: '/players/:id?',\n      pageTitle: 'Players',\n      icon: BsPersonFill,\n    },\n    {\n      component: <NPCs showHostile />,\n      path: '/enemies',\n      basePath: '/enemies/:id?',\n      pageTitle: 'Enemies',\n      icon: GiBirdClaw,\n    },\n    {\n      component: <NPCs showFriendly showNeutral />,\n      path: '/npcs',\n      basePath: '/npcs/:id?',\n      pageTitle: 'Other NPCs',\n      icon: AiFillRobot,\n    },\n    {\n      component: <Settings />,\n      path: '/settings',\n      basePath: '/settings',\n      pageTitle: 'Settings',\n      icon: FaCog,\n    },\n  ];\n\n  return (\n    <div className=\"App\">\n      <Router\n        basename=\"/dndtracker\"\n      >\n        <Sidebar routes={routes} />\n        <Container maxW=\"800\" minW=\"650\">\n          <CampaignTitle />\n          <Switch>\n            {\n              routes.map(({\n                component, basePath, pageTitle, exact,\n              }) => (\n                <Route\n                  path={basePath}\n                  exact={exact}\n                  key={pageTitle}\n                >\n                  <Center><Heading size=\"md\">{pageTitle}</Heading></Center>\n                  <Divider mt={4} mb={4} />\n                  {component}\n                </Route>\n              ))\n            }\n          </Switch>\n        </Container>\n      </Router>\n    </div>\n  );\n}\n","import { extendTheme } from '@chakra-ui/react';\n\nexport const theme = extendTheme({\n  components: {\n    Drawer: {\n      variants: {\n        alwaysOpen: {\n          dialog: {\n            pointerEvents: 'auto',\n          },\n          dialogContainer: {\n            pointerEvents: 'none',\n          },\n        },\n      },\n    },\n  },\n});\n\nexport const npcTypeColours = {\n  enemy: '#AA0000',\n  friendly: '#AAAA00',\n  neutral: '#AAAAAA',\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ChakraProvider } from '@chakra-ui/react';\nimport { Provider } from 'react-redux';\nimport reportWebVitals from './reportWebVitals';\nimport { App, theme } from './App';\nimport { store } from './common/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <ChakraProvider theme={theme}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </ChakraProvider>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}