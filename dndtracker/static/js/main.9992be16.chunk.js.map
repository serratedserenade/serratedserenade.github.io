{"version":3,"sources":["common/util.ts","reportWebVitals.ts","common/formik-chakra/FormControl.tsx","common/formik-chakra/InputControl.tsx","common/formik-chakra/NumberInputControl.tsx","common/formik-chakra/SwitchControl.tsx","common/hooks.ts","common/npcSlice.ts","common/formik-chakra/TextareaControl.tsx","Characters/ModifyCharacterConditionsField.tsx","Characters/ModifyNPCForm.tsx","Characters/NPCs.tsx","common/playerSlice.ts","Characters/ModifyPlayerForm.tsx","Characters/Players.tsx","common/campaignSlice.ts","common/store.ts","Initiative/NPCTurn.tsx","Initiative/PlayerTurn.tsx","Initiative/Initiative.tsx","Settings/Settings.tsx","App/CampaignTitle.tsx","App/MenuItemLink.tsx","App/Sidebar.tsx","DMScreen/DMScreen.tsx","App/App.tsx","App/theme.ts","index.tsx"],"names":["Dice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","FormControl","props","children","name","label","helperText","hideError","rest","useField","error","touched","isInvalid","htmlFor","InputControl","inputProps","field","id","NumberInputControl","n","showStepper","numberInputProps","setFieldValue","useFormikContext","onChange","value","Number","SwitchControl","switchProps","css","as","Flex","alignItems","isChecked","useAppDispatch","useDispatch","useAppSelector","useSelector","rollDice","max","Math","ceil","random","npcSlice","createSlice","initialState","npcs","reducers","addNPC","state","action","v4","push","payload","removeNPC","index","findIndex","v","splice","console","warn","refreshNPCs","length","modifyNPC","foundNPC","i","rollAllNPCInitiative","forEach","initiative","d20","modifyNPCValidationSchema","Yup","currentHP","integer","required","maxHP","tempHP","default","armourClass","min","initiativeMod","notes","conditions","of","displayOnTurnOrder","isHostile","isFriendly","isBoss","showHealth","showInitiative","showAC","showName","actions","TextareaControl","textareaProps","ModifyCharacterConditionsField","character","context","render","arrayHelpers","addCondition","element","document","querySelector","tagInput","toString","p","border","borderRadius","mb","justifyContent","fontWeight","mt","opacity","values","map","condition","idx","variant","size","m","onClick","remove","onKeyPress","e","code","AddIcon","cursor","ModifyNPCForm","npc","dispatch","params","useParams","formColour","characterTypeColours","neutral","enemy","friendly","NPCModifyStatFields","flex","textAlign","fontSize","templateColumns","templateRows","gap","colSpan","width","rightIcon","GiDiceTwentyFacesTwenty","displayString","NPCModifyActions","_npc","placement","hidden","dirty","colorScheme","submitForm","IoMdSave","type","ImRedo","AiFillDelete","initialValues","onSubmit","resetForm","enableReinitialize","validationSchema","className","backgroundColor","color","abs","resize","height","allowToggle","allowMultiple","key","display","NPCFormList","NPCs","showHostile","showFriendly","showNeutral","filter","addNPCValidationSchema","moreThan","AddNPCForm","addFormFields","IC","playerSlice","players","addPlayer","removePlayer","refreshPlayers","modifyPlayer","foundPlayer","rollAllPlayerInitiative","modifyPlayerValidationSchema","ModifyPlayerForm","player","PlayerModifyStatFields","PlayerModifyActions","_player","PlayerFormList","Players","addPlayerValidationSchema","AddPlayerForm","campaignSlice","currentTurnId","campaignTitle","setTurn","setCampaignTitle","STORE_KEY","APP_VERSION","loadFromLocalStorage","serialisedState","localStorage","getItem","JSON","parse","store","configureStore","reducer","playerReducer","campaign","campaignReducer","npcReducer","preloadedState","subscribe","hasFocus","stringify","setItem","saveToLocalStorage","getState","NPCTurn","isActive","GiCheckedShield","BsHeartFill","GiWalkingBoot","j","PlayerTurn","getSortedTurns","showAllTurns","formattedPlayers","formattedNPCs","sortedTurns","sort","a","b","aChar","bChar","returnValue","array","currentTurnIndex","slice","Initiative","history","useHistory","changePageMethod","turns","divider","position","bottom","currentTurnCharacter","nextCharacter","AlertDeleteState","confirmAction","useDisclosure","isOpen","onOpen","onClose","cancelRef","useRef","leastDestructiveRef","ref","ml","Settings","s","useState","exportStateLink","setExportStateLink","exportStateRef","importStateRef","importState","importedState","parsedImportedState","window","location","reload","useEffect","data","Blob","version","date","Date","now","URL","revokeObjectURL","createObjectURL","makeExportStateFile","accept","preventDefault","reader","FileReader","onload","_e","text","target","result","readAsText","current","files","click","download","href","removeItem","CampaignTitle","setTitleAction","ct","editableCampaignTitle","setEditableCampaignTitle","editTitleEnabled","setEditTitleEnabled","editTitleRef","React","aria-label","icon","GoPencil","setTimeout","focus","MenuItemLink","to","activeOnlyWhenExact","match","useRouteMatch","path","exact","undefined","Sidebar","routes","isLargerThanMinWidth","windowSize","setWindowSize","handleResize","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","defaultIsOpen","pt","pb","pl","pr","GiHamburgerMenu","blockScrollOnMount","trapFocus","spacing","pageTitle","DMScreen","useCheckboxGroup","defaultValue","selectedCharacters","setSelectedCharacters","setValue","editPanelRef","characters","healthMod","setHealthMod","hPModPanels","title","prop","setMethod","modifyHPValue","reset","dispatchActions","selectedPlayers","includes","propMethod","allExistingConditions","reduce","c","conditionToRemove","setConditionToRemove","conditionToAdd","setConditionToAdd","modifyCondValue","modConditionValue","modifiedCondition","conditionIndex","indexOf","conditionAlreadyExists","flexGrow","disabled","borderColour","AiOutlineLink","cond","clientHeight","direction","in","minW","maxW","placeholder","App","persistedStorage","component","basePath","FaBars","FaRegMap","BsPersonFill","GiBirdClaw","AiFillRobot","FaCog","basename","theme","extendTheme","components","Drawer","variants","alwaysOpen","dialog","pointerEvents","dialogContainer","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9992be16.chunk.js","sourcesContent":["export enum Dice {\n  d100 = 100,\n  d20 = 20,\n  d12 = 12,\n  d10 = 10,\n  d8 = 8,\n  d6 = 6,\n  d4 = 4,\n  d2 = 2\n}\n\nexport const rollDice = (max: number): number => Math.ceil(Math.random() * max);\n\nexport const rollAdvantage = (max: number): number => Math.max(rollDice(max), rollDice(max));\n\nexport const rollDisadvantage = (max: number): number => Math.min(rollDice(max), rollDice(max));\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n  FormControl as ChakraFormControl,\n  FormControlProps,\n  FormErrorMessage,\n  FormHelperText,\n  FormLabel,\n} from '@chakra-ui/react';\nimport { useField } from 'formik';\nimport React, { FC } from 'react';\n\nexport interface BaseProps extends FormControlProps {\n  name: string;\n  label?: string;\n  helperText?: string;\n  hideError?: boolean;\n}\n\nexport const FormControl: FC<BaseProps> = (props: BaseProps) => {\n  const {\n    children, name, label, helperText, hideError, ...rest\n  } = props;\n  const [, { error, touched }] = useField(name);\n\n  return (\n    <ChakraFormControl isInvalid={!!error && touched} {...rest}>\n      {label && <FormLabel htmlFor={name}>{label}</FormLabel>}\n      {children}\n      {!hideError && error && <FormErrorMessage>{error}</FormErrorMessage>}\n      {helperText && <FormHelperText>{helperText}</FormHelperText>}\n    </ChakraFormControl>\n  );\n};\n\nexport default FormControl;\n","import { Input, InputProps } from '@chakra-ui/react';\nimport { useField } from 'formik';\nimport React, { FC } from 'react';\nimport { BaseProps, FormControl } from './FormControl';\n\nexport type InputControlProps = BaseProps & { inputProps?: InputProps };\n\nexport const InputControl: FC<InputControlProps> = (\n  props: InputControlProps,\n) => {\n  const {\n    name, label, inputProps, ...rest\n  } = props;\n  const [field] = useField(name);\n\n  return (\n    <FormControl name={name} label={label} {...rest}>\n      <Input {...field} id={name} {...inputProps} />\n    </FormControl>\n  );\n};\n\nexport default InputControl;\n","import {\n  NumberDecrementStepper,\n  NumberIncrementStepper,\n  NumberInput,\n  NumberInputField,\n  NumberInputProps,\n  NumberInputStepper,\n} from '@chakra-ui/react';\nimport { useField, useFormikContext } from 'formik';\nimport React, { FC, ReactNode } from 'react';\nimport { BaseProps, FormControl } from './FormControl';\n\nexport type NumberInputControlProps = BaseProps & {\n  numberInputProps?: NumberInputProps;\n  showStepper?: boolean;\n  children?: ReactNode;\n};\n\nexport const NumberInputControl: FC<NumberInputControlProps> = (\n  props: NumberInputControlProps,\n) => {\n  const {\n    name,\n    label,\n    showStepper = true,\n    children,\n    numberInputProps,\n    ...rest\n  } = props;\n  const [field, { error, touched }] = useField(name);\n  const { setFieldValue } = useFormikContext();\n\n  const $setFieldValue = (n: string) => (value: unknown) => setFieldValue(n, Number(value));\n\n  return (\n    <FormControl name={name} label={label} {...rest}>\n      <NumberInput\n        {...field}\n        id={name}\n        onChange={$setFieldValue(name)}\n        isInvalid={!!error && touched}\n        {...numberInputProps}\n      >\n        <NumberInputField name={name} />\n        {showStepper && (\n          <NumberInputStepper>\n            <NumberIncrementStepper />\n            <NumberDecrementStepper />\n          </NumberInputStepper>\n        )}\n        {children}\n      </NumberInput>\n    </FormControl>\n  );\n};\n\nexport default NumberInputControl;\n","import {\n  Box, Flex, Switch, SwitchProps,\n} from '@chakra-ui/react';\nimport { css } from '@emotion/react';\nimport { useField } from 'formik';\nimport React, { FC } from 'react';\nimport { BaseProps, FormControl } from './FormControl';\n\nexport type SwitchControlProps = BaseProps & { switchProps?: SwitchProps };\n\nexport const SwitchControl: FC<SwitchControlProps> = (\n  props: SwitchControlProps,\n) => {\n  const {\n    name, label, switchProps, ...rest\n  } = props;\n  const [field, { error, touched }] = useField(name);\n\n  return (\n    <Box\n      css={css`\n        .chakra-form__label {\n          margin-bottom: 0;\n        }\n        .chakra-switch {\n          display: flex;\n          align-items: center;\n          margin-right: 0.75rem;\n        }\n        .chakra-form__error-message {\n          margin-top: 0;\n        }\n      `}\n    >\n      <FormControl\n        name={name}\n        label={label}\n        as={Flex}\n        alignItems=\"center\"\n        {...rest}\n      >\n        <Switch\n          {...field}\n          id={name}\n          isInvalid={!!error && touched}\n          isChecked={field.value}\n          {...switchProps}\n        />\n      </FormControl>\n    </Box>\n  );\n};\n\nexport default SwitchControl;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { v4 } from 'uuid';\nimport * as Yup from 'yup';\nimport { Dice, rollDice } from './util';\nimport { NPC } from '../Characters/NPC.interfaces';\n\nexport interface NPCState {\n  npcs: NPC[];\n}\n\nconst initialState: NPCState = {\n  npcs: [],\n};\n\nexport const npcSlice = createSlice({\n  name: 'npc',\n  initialState,\n  reducers: {\n    addNPC: (state, action: PayloadAction<Omit<NPC, 'id'>>) => {\n      const id = v4();\n      state.npcs.push({\n        ...action.payload,\n        id,\n      });\n    },\n    removeNPC: (state, action: PayloadAction<string>) => {\n      const index = state.npcs.findIndex((v) => v.id === action.payload);\n\n      if (index >= 0) {\n        state.npcs.splice(index, 1);\n      } else {\n        console.warn(`Invalid NPC ${action.payload}`);\n      }\n    },\n    refreshNPCs: (state, action: PayloadAction<NPC[] | undefined>) => {\n      if (action.payload) {\n        state.npcs.splice(0, state.npcs.length, ...action.payload);\n      }\n    },\n    modifyNPC: (state, action: PayloadAction<Partial<NPC>>) => {\n      const foundNPC = state.npcs.findIndex((i) => i.id === action.payload.id);\n\n      if (foundNPC >= 0) {\n        const { npcs } = state;\n        npcs[foundNPC] = {\n          ...state.npcs[foundNPC],\n          ...action.payload,\n        };\n      }\n    },\n    rollAllNPCInitiative: (state) => {\n      state.npcs.forEach((i) => {\n        const npc = i;\n        npc.initiative = rollDice(Dice.d20);\n      });\n    },\n  },\n});\n\nexport const modifyNPCValidationSchema = Yup.object({\n  name: Yup.string(),\n  currentHP: Yup.number().integer().required(),\n  maxHP: Yup.number().integer().required(),\n  tempHP: Yup.number().integer().default(0).required(),\n  armourClass: Yup.number().integer().required(),\n  initiative: Yup.number().integer().min(1).max(20)\n    .required(),\n  initiativeMod: Yup.number().integer().required(),\n  notes: Yup.string(),\n  conditions: Yup.array().of(Yup.string()).required(),\n  displayOnTurnOrder: Yup.boolean().required(),\n  isHostile: Yup.boolean().required(),\n  isFriendly: Yup.boolean().required(),\n  isBoss: Yup.boolean().required(),\n  showHealth: Yup.boolean().required(),\n  showInitiative: Yup.boolean().required(),\n  showAC: Yup.boolean().required(),\n  showName: Yup.boolean().required(),\n});\n\nexport const {\n  addNPC, removeNPC, refreshNPCs, rollAllNPCInitiative, modifyNPC,\n} = npcSlice.actions;\n\nexport default npcSlice.reducer;\n","import { Textarea, TextareaProps } from '@chakra-ui/react';\nimport { useField } from 'formik';\nimport React, { FC } from 'react';\nimport { BaseProps, FormControl } from './FormControl';\n\nexport type TextareaControlProps = BaseProps & {\n  textareaProps?: TextareaProps;\n};\n\nexport const TextareaControl: FC<TextareaControlProps> = (\n  props: TextareaControlProps,\n) => {\n  const {\n    name, label, textareaProps, ...rest\n  } = props;\n  const [field] = useField(name);\n\n  return (\n    <FormControl name={name} label={label} {...rest}>\n      <Textarea {...field} id={name} {...textareaProps} />\n    </FormControl>\n  );\n};\n\nexport default TextareaControl;\n","import { AddIcon } from '@chakra-ui/icons';\nimport {\n  Text, Box, Flex, Divider, Tag, TagLabel, TagCloseButton, Input, TagRightIcon, InputProps,\n} from '@chakra-ui/react';\nimport { useFormikContext, FieldArray } from 'formik';\nimport React from 'react';\nimport { Character } from './Character.interfaces';\nimport { NPC } from './NPC.interfaces';\n\nexport const ModifyCharacterConditionsField = ({ character }: { character: Character }) => {\n  const context = useFormikContext<NPC>();\n  return (\n    <FieldArray\n      name=\"conditions\"\n      render={(arrayHelpers) => {\n        const addCondition = () => {\n          const element = document.querySelector(`#tag-input-${character.id}`) as InputProps;\n          if (element?.value) {\n            const tagInput = element.value.toString();\n            element.value = '';\n            arrayHelpers.push(tagInput);\n          }\n        };\n\n        return (\n          <Box p={2} border=\"1px solid #00000066\" borderRadius={8} mb={2}>\n            <Flex justifyContent=\"center\"><Text fontWeight=\"bold\">Conditions</Text></Flex>\n            <Divider mt={1} mb={1} opacity=\"0.3\" />\n            {context.values.conditions.map((condition, idx) => (\n              <Tag\n                variant=\"solid\"\n                borderRadius=\"full\"\n                size=\"lg\"\n                m={2}\n                key={condition}\n              >\n                <TagLabel>{condition}</TagLabel>\n                <TagCloseButton onClick={() => arrayHelpers.remove(idx)} />\n              </Tag>\n            ))}\n            <Tag\n              variant=\"outline\"\n              borderRadius=\"full\"\n              size=\"lg\"\n              m={2}\n            >\n              <Input\n                size=\"xs\"\n                id={`tag-input-${character.id}`}\n                onKeyPress={(e) => {\n                  if (e.code === 'Enter') {\n                    addCondition();\n                  }\n                }}\n              />\n              <TagRightIcon\n                as={AddIcon}\n                cursor=\"pointer\"\n                onClick={() => {\n                  addCondition();\n                }}\n              />\n            </Tag>\n          </Box>\n        );\n      }}\n    />\n  );\n};\n","import {\n  Accordion, AccordionButton, AccordionIcon, AccordionItem,\n  AccordionPanel, Box, Button, FormControl, FormLabel, Grid,\n  GridItem, HStack, Icon, SimpleGrid, Spacer, Text, Tooltip, VStack,\n} from '@chakra-ui/react';\nimport { Form, Formik, useFormikContext } from 'formik';\nimport { AiFillDelete } from 'react-icons/ai';\nimport { GiDiceTwentyFacesTwenty } from 'react-icons/gi';\nimport { ImRedo } from 'react-icons/im';\nimport { IoMdSave } from 'react-icons/io';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { NumberInputControl, SwitchControl } from '../common/formik-chakra';\nimport TextareaControl from '../common/formik-chakra/TextareaControl';\nimport { useAppDispatch } from '../common/hooks';\nimport { modifyNPC, removeNPC, modifyNPCValidationSchema } from '../common/npcSlice';\nimport { Dice, rollDice } from '../common/util';\nimport { ModifyCharacterConditionsField } from './ModifyCharacterConditionsField';\nimport { NPC } from './NPC.interfaces';\nimport { characterTypeColours } from '../App';\n\ninterface ModifyNPCFormProps {\n  npc: NPC;\n}\n\nexport const ModifyNPCForm = ({ npc }: ModifyNPCFormProps) => {\n  const dispatch = useAppDispatch();\n\n  const params = useParams<{id: string}>();\n\n  const modifyNPCAction = (n: NPC) => dispatch(modifyNPC(n));\n  const removeNPCAction = (id: string) => dispatch(removeNPC(id));\n\n  let formColour = characterTypeColours.neutral;\n\n  if (npc.isHostile) {\n    formColour = characterTypeColours.enemy;\n  } else if (npc.isFriendly) {\n    formColour = characterTypeColours.friendly;\n  }\n\n  const NPCModifyStatFields = () => {\n    const editStatFields: Array<[string, string]> = [\n      ['AC: ', 'armourClass'],\n      ['Initiative: ', 'initiative'],\n      ['Init. Mod: ', 'initiativeMod'],\n      ['Max HP: ', 'maxHP'],\n    ];\n\n    const { setFieldValue } = useFormikContext<NPC>();\n    return (\n      <AccordionItem>\n        <AccordionButton>\n          <Box flex=\"1\" textAlign=\"left\">\n            <strong>Edit Stats</strong>\n          </Box>\n          <AccordionIcon />\n        </AccordionButton>\n        <AccordionPanel>\n          <Grid\n            fontSize=\"sm\"\n            templateColumns=\"repeat(4, 1fr)\"\n            templateRows=\"repeat(2, 1fr)\"\n            gap={4}\n          >\n            <GridItem\n              colSpan={4}\n            >\n              <Button\n                width=\"100%\"\n                onClick={() => setFieldValue('initiative', rollDice(Dice.d20))}\n                variant=\"outline\"\n                rightIcon={<Icon as={GiDiceTwentyFacesTwenty} />}\n              >\n                Roll Initiative\n              </Button>\n            </GridItem>\n            {\n              editStatFields.map(([displayString, value]) => (\n                <GridItem key={value}>\n                  <HStack>\n                    <Text>{displayString}</Text>\n                    <NumberInputControl hideError name={value} width=\"8em\" />\n                  </HStack>\n                </GridItem>\n              ))\n            }\n          </Grid>\n        </AccordionPanel>\n      </AccordionItem>\n    );\n  };\n\n  const NPCModifyActions = ({ npc: _npc }: { npc: NPC }) => {\n    const context = useFormikContext<NPC>();\n\n    return (\n      <HStack mt={4}>\n        <Tooltip label=\"Save\" placement=\"top\">\n          <Button\n            width=\"100%\"\n            hidden={!context.dirty}\n            variant=\"solid\"\n            colorScheme=\"green\"\n            onClick={() => context.submitForm()}\n          >\n            <Icon as={IoMdSave} />\n          </Button>\n        </Tooltip>\n        <Tooltip label=\"Reset\" placement=\"top\">\n          <Button\n            width=\"100%\"\n            type=\"reset\"\n            hidden={!context.dirty}\n            variant=\"solid\"\n          >\n            <Icon as={ImRedo} />\n          </Button>\n        </Tooltip>\n        <Tooltip label=\"Delete\" placement=\"top\">\n          <Button\n            width=\"100%\"\n            onClick={() => removeNPCAction(_npc.id)}\n            variant=\"solid\"\n            colorScheme=\"red\"\n          >\n            <Icon as={AiFillDelete} />\n          </Button>\n        </Tooltip>\n      </HStack>\n    );\n  };\n\n  return (\n    <Formik\n      initialValues={npc}\n      onSubmit={(values, actions) => {\n        modifyNPCAction(values);\n        actions.resetForm();\n      }}\n      enableReinitialize\n      validationSchema={modifyNPCValidationSchema}\n    >\n      <Box\n        className=\"\"\n        width=\"100%\"\n        id={`character-${npc.id}`}\n        border={`0.3em solid ${formColour}${params.id === npc.id ? 'FF' : 22}`}\n        borderRadius={10}\n        p={4}\n      >\n        <Form>\n          <HStack\n            p={1}\n            mb={2}\n          >\n            <Box\n              textAlign=\"center\"\n              width=\"100%\"\n              backgroundColor={formColour}\n              color=\"white\"\n              borderRadius={8}\n              p={2}\n            >\n              <Text fontWeight=\"bold\">{npc.name}</Text>\n            </Box>\n            <NPCModifyActions npc={npc} />\n          </HStack>\n          <SimpleGrid templateColumns=\"repeat(3, 1fr)\" mt={4} mb={4}>\n            <GridItem>\n              <VStack alignItems=\"flex-start\">\n                <Box>\n                  <HStack>\n                    <Text fontWeight=\"bold\">THP </Text>\n                    <NumberInputControl hideError name=\"tempHP\" width=\"6em\" />\n                  </HStack>\n                </Box>\n                <Box>\n                  <HStack>\n                    <Text fontWeight=\"bold\">HP </Text>\n                    <NumberInputControl hideError name=\"currentHP\" width=\"6em\" />\n                    <Text>\n                      /\n                      {' '}\n                      {npc.maxHP}\n                    </Text>\n                  </HStack>\n                </Box>\n                <Text>\n                  AC\n                  {' '}\n                  {npc.armourClass}\n                  , Init.\n                  {' '}\n                  {npc.initiative + npc.initiativeMod}\n                  {' '}\n                  (\n                  {npc.initiative}\n                  <Icon as={GiDiceTwentyFacesTwenty} />\n                  {' '}\n                  {npc.initiativeMod >= 0 ? '+' : '-'}\n                  {' '}\n                  {Math.abs(npc.initiativeMod)}\n                  )\n                </Text>\n              </VStack>\n            </GridItem>\n            <GridItem colSpan={2}>\n              <TextareaControl\n                name=\"notes\"\n                textareaProps={{\n                  resize: 'none',\n                  height: '10em',\n                }}\n              />\n            </GridItem>\n          </SimpleGrid>\n          <ModifyCharacterConditionsField character={npc} />\n          <Accordion allowToggle allowMultiple>\n            <NPCModifyStatFields />\n            <AccordionItem>\n              <AccordionButton>\n                <Box flex=\"1\" textAlign=\"left\">\n                  <strong>Options</strong>\n                </Box>\n                <AccordionIcon />\n              </AccordionButton>\n              <AccordionPanel>\n                <Grid\n                  fontSize=\"sm\"\n                  templateColumns=\"repeat(4, 1fr)\"\n                  templateRows=\"repeat(2, 1fr)\"\n                  gap={6}\n                >\n                  {\n                    ([\n                      ['Reveal Name', 'showName'],\n                      ['Reveal Health', 'showHealth'],\n                      ['Reveal Armour Class', 'showAC'],\n                      ['Reveal Initiative', 'showInitiative'],\n                      ['Show in Turn Order', 'displayOnTurnOrder'],\n                      ['Hostile to Party', 'isHostile'],\n                      ['Friendly to Party', 'isFriendly'],\n                    ] as Array<[string, keyof NPC]>).map(([displayString, key]) => (\n                      <FormControl\n                        display=\"flex\"\n                        alignItems=\"center\"\n                        key={key}\n                      >\n                        <FormLabel mb=\"0\" fontSize=\"xs\">\n                          {displayString}\n                        </FormLabel>\n                        <Spacer />\n                        <SwitchControl name={key} />\n                      </FormControl>\n                    ))\n                  }\n                </Grid>\n              </AccordionPanel>\n            </AccordionItem>\n          </Accordion>\n        </Form>\n      </Box>\n    </Formik>\n  );\n};\n","import { AddIcon } from '@chakra-ui/icons';\nimport {\n  Button, HStack, Icon, VStack,\n} from '@chakra-ui/react';\nimport { Form, Formik } from 'formik';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport { InputControl, NumberInputControl } from '../common/formik-chakra';\nimport { useAppDispatch, useAppSelector } from '../common/hooks';\nimport { addNPC } from '../common/npcSlice';\nimport { Dice, rollDice } from '../common/util';\nimport { ModifyNPCForm } from './ModifyNPCForm';\nimport { NPC } from './NPC.interfaces';\n\nconst NPCFormList = ({ npcs }: { npcs: NPC[] }) => (\n  <VStack>\n    {\n        npcs.map((npc) => (\n          <ModifyNPCForm\n            key={npc.id}\n            npc={npc}\n          />\n        ))\n      }\n  </VStack>\n);\n\ninterface NPCsProps {\n  showHostile?: boolean;\n  showFriendly?: boolean;\n  showNeutral?: boolean;\n}\n\nexport function NPCs({\n  showHostile, showFriendly, showNeutral,\n}: NPCsProps) {\n  const params = useParams<{ id?: string }>();\n  const npcs = useAppSelector((state) => state.npcs.npcs\n    .filter((i) => {\n      if (showHostile && i.isHostile) {\n        return true;\n      }\n      if (showFriendly && i.isFriendly) {\n        return true;\n      }\n      if (showNeutral && (!i.isFriendly && !i.isHostile)) {\n        return true;\n      }\n      return false;\n    })\n    .filter((i) => {\n      if (params.id) {\n        return i.id === params.id;\n      }\n      return true;\n    }));\n  const dispatch = useAppDispatch();\n\n  const addNPCValidationSchema = Yup.object({\n    name: Yup.string().required().label('Name'),\n    maxHP: Yup.number().integer().moreThan(0).required()\n      .label('Maximum HP'),\n    initiativeMod: Yup.number().integer().required().label('Initiative Modifier'),\n    armourClass: Yup.number().integer().moreThan(0).default(10)\n      .label('Armour Class'),\n  });\n\n  const AddNPCForm = () => {\n    type AddFormFields = Array<\n      [string, keyof NPC, typeof InputControl | typeof NumberInputControl]\n    >;\n\n    const addFormFields: AddFormFields = [\n      ['NPC Name', 'name', InputControl],\n      ['Maximum HP', 'maxHP', NumberInputControl],\n      ['Initiative Modifier', 'initiativeMod', NumberInputControl],\n      ['Armour Class', 'armourClass', NumberInputControl],\n    ];\n    return (\n      <Formik\n        initialValues={{\n          name: '',\n          maxHP: 0,\n          initiativeMod: 0,\n          armourClass: 0,\n        }}\n        validationSchema={addNPCValidationSchema}\n        onSubmit={\n          (values) => {\n            dispatch(addNPC({\n              name: values.name,\n              maxHP: values.maxHP,\n              currentHP: values.maxHP,\n              tempHP: 0,\n              initiative: rollDice(Dice.d20),\n              initiativeMod: values.initiativeMod,\n              armourClass: values.armourClass,\n              conditions: [],\n              displayOnTurnOrder: true,\n              notes: '',\n              isFriendly: showFriendly || false,\n              isHostile: showHostile || false,\n              isBoss: false,\n              showHealth: false,\n              showInitiative: false,\n              showAC: false,\n              showName: false,\n            }));\n          }\n        }\n      >\n        <Form>\n          <HStack>\n            {\n              addFormFields.map(([label, key, IC]) => (\n                <IC\n                  hideError\n                  mt={4}\n                  mb={4}\n                  name={key}\n                  label={label}\n                  key={key}\n                />\n              ))\n            }\n          </HStack>\n          <Button\n            mb={4}\n            width=\"100%\"\n            type=\"submit\"\n            variant=\"solid\"\n            colorScheme=\"green\"\n            rightIcon={<Icon as={AddIcon} />}\n          >\n            Add\n            {' '}\n            {showHostile ? 'Enemy' : 'NPC'}\n          </Button>\n        </Form>\n      </Formik>\n    );\n  };\n\n  return (\n    <>\n      {!params.id && <AddNPCForm />}\n      <NPCFormList npcs={npcs} />\n    </>\n  );\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { v4 } from 'uuid';\nimport * as Yup from 'yup';\nimport { Player } from '../Characters/Player.interfaces';\nimport { Dice, rollDice } from './util';\n\nexport interface PlayerState {\n  players: Player[];\n}\n\nconst initialState: PlayerState = {\n  players: [],\n};\n\nexport const playerSlice = createSlice({\n  name: 'player',\n  initialState,\n  reducers: {\n    addPlayer: (state, action: PayloadAction<Omit<Player, 'id'>>) => {\n      const id = v4();\n      state.players.push({\n        ...action.payload,\n        id,\n      });\n    },\n    removePlayer: (state, action: PayloadAction<string>) => {\n      const index = state.players.findIndex((v) => v.id === action.payload);\n\n      if (index >= 0) {\n        state.players.splice(index, 1);\n      } else {\n        console.warn(`Invalid player ${action.payload}`);\n      }\n    },\n    refreshPlayers: (state, action: PayloadAction<Player[] | undefined>) => {\n      if (action.payload) {\n        state.players.splice(0, state.players.length, ...action.payload);\n      }\n    },\n    modifyPlayer: (state, action: PayloadAction<Partial<Player>>) => {\n      const foundPlayer = state.players.findIndex((i) => i.id === action.payload.id);\n\n      if (foundPlayer >= 0) {\n        const { players } = state;\n        players[foundPlayer] = {\n          ...state.players[foundPlayer],\n          ...action.payload,\n        };\n      }\n    },\n    rollAllPlayerInitiative: (state) => {\n      state.players.forEach((i) => {\n        const player = i;\n        player.initiative = rollDice(Dice.d20);\n      });\n    },\n  },\n});\n\nexport const modifyPlayerValidationSchema = Yup.object({\n  name: Yup.string(),\n  currentHP: Yup.number().integer().required(),\n  maxHP: Yup.number().integer().required(),\n  tempHP: Yup.number().integer().default(0).required(),\n  armourClass: Yup.number().integer().required(),\n  initiative: Yup.number().integer().min(1).max(20)\n    .required(),\n  initiativeMod: Yup.number().integer().required(),\n  notes: Yup.string(),\n  conditions: Yup.array().of(Yup.string()).required(),\n  displayOnTurnOrder: Yup.boolean().required(),\n});\n\nexport const {\n  addPlayer, removePlayer, refreshPlayers, rollAllPlayerInitiative, modifyPlayer,\n} = playerSlice.actions;\n\nexport default playerSlice.reducer;\n","import {\n  Accordion, AccordionButton, AccordionIcon, AccordionItem,\n  AccordionPanel, Box, Button, FormControl, FormLabel, Grid,\n  GridItem, HStack, Icon, SimpleGrid, Spacer, Text, Tooltip, VStack,\n} from '@chakra-ui/react';\nimport { Form, Formik, useFormikContext } from 'formik';\nimport { AiFillDelete } from 'react-icons/ai';\nimport { GiDiceTwentyFacesTwenty } from 'react-icons/gi';\nimport { ImRedo } from 'react-icons/im';\nimport { IoMdSave } from 'react-icons/io';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { NumberInputControl, SwitchControl } from '../common/formik-chakra';\nimport TextareaControl from '../common/formik-chakra/TextareaControl';\nimport { useAppDispatch } from '../common/hooks';\nimport { modifyPlayerValidationSchema, modifyPlayer, removePlayer } from '../common/playerSlice';\nimport { Dice, rollDice } from '../common/util';\nimport { ModifyCharacterConditionsField } from './ModifyCharacterConditionsField';\nimport { Player } from './Player.interfaces';\n\ninterface ModifyPlayerFormProps {\n  player: Player;\n}\n\nexport const ModifyPlayerForm = ({ player }: ModifyPlayerFormProps) => {\n  const dispatch = useAppDispatch();\n\n  const params = useParams<{id: string}>();\n\n  const modifyPlayerAction = (p: Player) => dispatch(modifyPlayer(p));\n  const removePlayerAction = (id: string) => dispatch(removePlayer(id));\n\n  const PlayerModifyStatFields = () => {\n    const editStatFields: Array<[string, string]> = [\n      ['AC: ', 'armourClass'],\n      ['Initiative: ', 'initiative'],\n      ['Init. Mod: ', 'initiativeMod'],\n      ['Max HP: ', 'maxHP'],\n    ];\n\n    const { setFieldValue } = useFormikContext<Player>();\n    return (\n      <AccordionItem>\n        <AccordionButton>\n          <Box flex=\"1\" textAlign=\"left\">\n            <strong>Edit Stats</strong>\n          </Box>\n          <AccordionIcon />\n        </AccordionButton>\n        <AccordionPanel>\n          <Grid\n            fontSize=\"sm\"\n            templateColumns=\"repeat(4, 1fr)\"\n            templateRows=\"repeat(2, 1fr)\"\n            gap={4}\n          >\n            <GridItem\n              colSpan={4}\n            >\n              <Button\n                width=\"100%\"\n                onClick={() => setFieldValue('initiative', rollDice(Dice.d20))}\n                variant=\"outline\"\n                rightIcon={<Icon as={GiDiceTwentyFacesTwenty} />}\n              >\n                Roll Initiative\n              </Button>\n            </GridItem>\n            {\n              editStatFields.map(([displayString, value]) => (\n                <GridItem key={value}>\n                  <HStack>\n                    <Text>{displayString}</Text>\n                    <NumberInputControl hideError name={value} width=\"8em\" />\n                  </HStack>\n                </GridItem>\n              ))\n            }\n          </Grid>\n        </AccordionPanel>\n      </AccordionItem>\n    );\n  };\n\n  const PlayerModifyActions = ({ player: _player }: { player: Player }) => {\n    const context = useFormikContext<Player>();\n\n    return (\n      <HStack mt={4}>\n        <Tooltip label=\"Save\" placement=\"top\">\n          <Button\n            width=\"100%\"\n            hidden={!context.dirty}\n            variant=\"solid\"\n            colorScheme=\"green\"\n            onClick={() => context.submitForm()}\n          >\n            <Icon as={IoMdSave} />\n          </Button>\n        </Tooltip>\n        <Tooltip label=\"Reset\" placement=\"top\">\n          <Button\n            width=\"100%\"\n            type=\"reset\"\n            hidden={!context.dirty}\n            variant=\"solid\"\n          >\n            <Icon as={ImRedo} />\n          </Button>\n        </Tooltip>\n        <Tooltip label=\"Delete\" placement=\"top\">\n          <Button\n            width=\"100%\"\n            onClick={() => removePlayerAction(_player.id)}\n            variant=\"solid\"\n            colorScheme=\"red\"\n          >\n            <Icon as={AiFillDelete} />\n          </Button>\n        </Tooltip>\n      </HStack>\n    );\n  };\n\n  return (\n    <Formik\n      initialValues={player}\n      onSubmit={(values, actions) => {\n        modifyPlayerAction(values);\n        actions.resetForm();\n      }}\n      enableReinitialize\n      validationSchema={modifyPlayerValidationSchema}\n    >\n      <Box\n        className=\"\"\n        width=\"100%\"\n        id={`character-${player.id}`}\n        border={`0.3em solid #00AA00${params.id === player.id ? 'FF' : 22}`}\n        borderRadius={10}\n        p={4}\n      >\n        <Form>\n          <HStack\n            p={1}\n            mb={2}\n          >\n            <Box\n              textAlign=\"center\"\n              width=\"100%\"\n              backgroundColor=\"darkgreen\"\n              color=\"white\"\n              borderRadius={8}\n              p={2}\n            >\n              <Text fontWeight=\"bold\">{player.name}</Text>\n            </Box>\n            <PlayerModifyActions player={player} />\n          </HStack>\n          <SimpleGrid templateColumns=\"repeat(3, 1fr)\" mt={4} mb={4}>\n            <GridItem>\n              <VStack alignItems=\"flex-start\">\n                <Box>\n                  <HStack>\n                    <Text fontWeight=\"bold\">THP </Text>\n                    <NumberInputControl hideError name=\"tempHP\" width=\"6em\" />\n                  </HStack>\n                </Box>\n                <Box>\n                  <HStack>\n                    <Text fontWeight=\"bold\">HP </Text>\n                    <NumberInputControl hideError name=\"currentHP\" width=\"6em\" />\n                    <Text>\n                      /\n                      {' '}\n                      {player.maxHP}\n                    </Text>\n                  </HStack>\n                </Box>\n                <Text>\n                  AC\n                  {' '}\n                  {player.armourClass}\n                  , Init.\n                  {' '}\n                  {player.initiative + player.initiativeMod}\n                  {' '}\n                  (\n                  {player.initiative}\n                  <Icon as={GiDiceTwentyFacesTwenty} />\n                  {' '}\n                  {player.initiativeMod >= 0 ? '+' : '-'}\n                  {' '}\n                  {Math.abs(player.initiativeMod)}\n                  )\n                </Text>\n              </VStack>\n            </GridItem>\n            <GridItem colSpan={2}>\n              <TextareaControl\n                name=\"notes\"\n                textareaProps={{\n                  resize: 'none',\n                  height: '10em',\n                }}\n              />\n            </GridItem>\n          </SimpleGrid>\n          <ModifyCharacterConditionsField character={player} />\n          <Accordion allowToggle allowMultiple>\n            <PlayerModifyStatFields />\n            <AccordionItem>\n              <AccordionButton>\n                <Box flex=\"1\" textAlign=\"left\">\n                  <strong>Options</strong>\n                </Box>\n                <AccordionIcon />\n              </AccordionButton>\n              <AccordionPanel>\n                <Grid\n                  fontSize=\"sm\"\n                  templateColumns=\"repeat(3, 1fr)\"\n                  templateRows=\"repeat(1, 1fr)\"\n                  gap={6}\n                >\n                  {\n                    ([\n                      ['Show in Turn Order', 'displayOnTurnOrder'],\n                    ] as Array<[string, keyof Player]>).map(([displayString, key]) => (\n                      <FormControl display=\"flex\" alignItems=\"center\" key={key}>\n                        <FormLabel mb=\"0\">\n                          {displayString}\n                        </FormLabel>\n                        <Spacer />\n                        <SwitchControl name={key} />\n                      </FormControl>\n                    ))\n                  }\n                </Grid>\n              </AccordionPanel>\n            </AccordionItem>\n          </Accordion>\n        </Form>\n      </Box>\n    </Formik>\n  );\n};\n","import { AddIcon } from '@chakra-ui/icons';\nimport {\n  Button, HStack, Icon, VStack,\n} from '@chakra-ui/react';\nimport { Form, Formik } from 'formik';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport { InputControl, NumberInputControl } from '../common/formik-chakra';\nimport { useAppDispatch, useAppSelector } from '../common/hooks';\nimport { addPlayer } from '../common/playerSlice';\nimport { Dice, rollDice } from '../common/util';\nimport { ModifyPlayerForm } from './ModifyPlayerForm';\nimport { Player } from './Player.interfaces';\n\nconst PlayerFormList = ({ players }: { players: Player[] }) => (\n  <VStack>\n    {\n        players.map((player) => (\n          <ModifyPlayerForm\n            key={player.id}\n            player={player}\n          />\n        ))\n      }\n  </VStack>\n);\n\nexport function Players() {\n  const params = useParams<{ id?: string }>();\n  const players = useAppSelector((state) => state.players.players.filter((i) => {\n    if (params.id) {\n      return i.id === params.id;\n    }\n    return true;\n  }));\n\n  const dispatch = useAppDispatch();\n\n  const addPlayerValidationSchema = Yup.object({\n    name: Yup.string().required().label('Name'),\n    maxHP: Yup.number().integer().moreThan(0).required()\n      .label('Maximum HP'),\n    initiativeMod: Yup.number().integer().required().label('Initiative Modifier'),\n    armourClass: Yup.number().integer().moreThan(0).default(10)\n      .label('Armour Class'),\n  });\n\n  type AddFormFields = Array<[\n    string, keyof Player, typeof InputControl | typeof NumberInputControl]\n  >;\n\n  const AddPlayerForm = () => {\n    const addFormFields: AddFormFields = [\n      ['Player Name', 'name', InputControl],\n      ['Maximum HP', 'maxHP', NumberInputControl],\n      ['Initiative Modifier', 'initiativeMod', NumberInputControl],\n      ['Armour Class', 'armourClass', NumberInputControl],\n    ];\n    return (\n      <Formik\n        initialValues={{\n          name: '',\n          maxHP: 0,\n          initiativeMod: 0,\n          armourClass: 0,\n        }}\n        validationSchema={addPlayerValidationSchema}\n        onSubmit={\n          (values) => {\n            dispatch(addPlayer({\n              name: values.name,\n              maxHP: values.maxHP,\n              currentHP: values.maxHP,\n              tempHP: 0,\n              initiative: rollDice(Dice.d20),\n              initiativeMod: values.initiativeMod,\n              armourClass: values.armourClass,\n              conditions: [],\n              displayOnTurnOrder: true,\n              notes: '',\n            }));\n          }\n        }\n      >\n        <Form>\n          <HStack>\n            {\n              addFormFields.map(([label, key, IC]) => (\n                <IC\n                  hideError\n                  mt={4}\n                  mb={4}\n                  name={key}\n                  label={label}\n                  key={key}\n                />\n              ))\n            }\n          </HStack>\n          <Button\n            mb={4}\n            width=\"100%\"\n            type=\"submit\"\n            variant=\"solid\"\n            colorScheme=\"green\"\n            rightIcon={<Icon as={AddIcon} />}\n          >\n            Add Player\n          </Button>\n        </Form>\n      </Formik>\n    );\n  };\n\n  return (\n    <>\n      {!params.id && <AddPlayerForm />}\n      <PlayerFormList players={players} />\n    </>\n  );\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\ninterface CampaignState {\n  currentTurnId: string;\n  campaignTitle: string,\n}\n\nconst initialState: CampaignState = {\n  currentTurnId: '',\n  campaignTitle: 'D&D Tracker',\n};\n\nexport const campaignSlice = createSlice({\n  name: 'campaign',\n  initialState,\n  reducers: {\n    setTurn: (state, action: PayloadAction<string>) => {\n      const modState = state;\n      modState.currentTurnId = action.payload;\n    },\n    setCampaignTitle: (state, action: PayloadAction<string>) => {\n      const modState = state;\n      modState.campaignTitle = action.payload;\n    },\n  },\n});\n\nexport const { setTurn, setCampaignTitle } = campaignSlice.actions;\n\nexport default campaignSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport playerReducer from './playerSlice';\nimport campaignReducer from './campaignSlice';\nimport npcReducer from './npcSlice';\n\nexport const STORE_KEY = 'persistantState';\nexport const APP_VERSION = '0.0.2';\n\nexport const loadFromLocalStorage = () => {\n  try {\n    const serialisedState = localStorage.getItem(`persistantState_${APP_VERSION}`);\n    if (serialisedState === null) return undefined;\n    return JSON.parse(serialisedState);\n  } catch (e) {\n    console.warn(e);\n    return undefined;\n  }\n};\n\nexport const store = configureStore({\n  reducer: {\n    players: playerReducer,\n    campaign: campaignReducer,\n    npcs: npcReducer,\n  },\n  preloadedState: loadFromLocalStorage(),\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nfunction saveToLocalStorage(state: RootState) {\n  try {\n    const serialisedState = JSON.stringify(state);\n    localStorage.setItem(`persistantState_${APP_VERSION}`, serialisedState);\n  } catch (e) {\n    console.warn(e);\n  }\n}\n\nstore.subscribe(() => {\n  if (document.hasFocus()) {\n    saveToLocalStorage(store.getState());\n  }\n});\n","import {\n  Badge, Box, Grid, HStack, Icon, Text,\n} from '@chakra-ui/react';\nimport React from 'react';\nimport { BsHeartFill } from 'react-icons/bs';\nimport { GiCheckedShield, GiDiceTwentyFacesTwenty, GiWalkingBoot } from 'react-icons/gi';\nimport { characterTypeColours } from '../App';\nimport { NPC } from '../Characters/NPC.interfaces';\n\ninterface NPCTurnProps {\n  npc: NPC;\n  isActive: boolean;\n  onClick: () => void;\n}\n\nexport function NPCTurn({ npc, isActive, onClick }: NPCTurnProps) {\n  const tempHP = npc.tempHP ? ` (${npc.tempHP})` : '';\n\n  let formColour = characterTypeColours.neutral;\n\n  if (npc.isHostile) {\n    formColour = characterTypeColours.enemy;\n  } else if (npc.isFriendly) {\n    formColour = characterTypeColours.friendly;\n  }\n\n  return (\n    <Box\n      className=\"turn-block turn-block-npc\"\n      border={`${isActive ? '0.4em' : '0.2em'} solid ${formColour}${isActive ? 'FF' : 22}`}\n      borderRadius=\"0.4em\"\n      opacity={isActive ? '100%' : '80%'}\n      cursor=\"pointer\"\n      onClick={onClick}\n    >\n      <Grid templateColumns=\"repeat(4, 1fr)\" fontSize=\"sm\">\n        <Text fontWeight=\"bold\">{npc.showName ? npc.name : '???'}</Text>\n        {\n          npc.showAC\n          && (\n          <Text>\n            <Icon as={GiCheckedShield} />\n            {' '}\n            {npc.armourClass}\n          </Text>\n          )\n        }\n        {\n          npc.showHealth\n            ? (\n              <Text>\n                <Icon as={BsHeartFill} />\n                {' '}\n                {npc.currentHP}\n                {' '}\n                {tempHP}\n                {' '}\n                /\n                {' '}\n                {npc.maxHP}\n              </Text>\n            )\n            : (\n              <Text>\n                <Icon as={BsHeartFill} />\n                {' '}\n                Damage Taken:\n                {' '}\n                {Math.max(npc.maxHP - npc.currentHP, 0)}\n              </Text>\n            )\n        }\n        {\n          npc.showInitiative\n          && (\n          <Text>\n            <Icon as={GiWalkingBoot} />\n            {' '}\n            {npc.initiative + npc.initiativeMod}\n            {' '}\n            (\n            {npc.initiative}\n            <Icon as={GiDiceTwentyFacesTwenty} />\n            {' '}\n            {npc.initiativeMod >= 0 ? '+' : '-'}\n            {' '}\n            {Math.abs(npc.initiativeMod)}\n            )\n          </Text>\n          )\n        }\n      </Grid>\n      {\n        npc.conditions.length > 0 && (\n        <HStack>\n          {npc.conditions.map((i) => <Badge variant=\"solid\" key={npc.conditions.findIndex((j) => i === j)}>{i}</Badge>)}\n        </HStack>\n        )\n      }\n    </Box>\n  );\n}\n","import {\n  Badge, Box, Grid, HStack, Icon, Text,\n} from '@chakra-ui/react';\nimport React from 'react';\nimport { BsHeartFill } from 'react-icons/bs';\nimport { GiCheckedShield, GiDiceTwentyFacesTwenty, GiWalkingBoot } from 'react-icons/gi';\nimport { Player } from '../Characters/Player.interfaces';\n\ninterface PlayerTurnProps {\n  player: Player;\n  isActive: boolean;\n  onClick: () => void;\n}\n\nexport function PlayerTurn({ player, isActive, onClick }: PlayerTurnProps) {\n  const tempHP = player.tempHP ? ` (${player.tempHP})` : '';\n\n  return (\n    <Box\n      onClick={onClick}\n      className=\"turn-block turn-block-player\"\n      border={`${isActive ? '0.4em' : '0.2em'} solid #00AA00${isActive ? 'FF' : 22}`}\n      borderRadius=\"0.4em\"\n      opacity={isActive ? '100%' : '80%'}\n      cursor=\"pointer\"\n    >\n      <Grid templateColumns=\"repeat(4, 1fr)\" fontSize=\"sm\">\n        <Text fontWeight=\"bold\">{player.name}</Text>\n        <Text>\n          <Icon as={GiCheckedShield} />\n          {' '}\n          {player.armourClass}\n        </Text>\n        <Text>\n          <Icon as={BsHeartFill} />\n          {' '}\n          {player.currentHP}\n          {' '}\n          {tempHP}\n          {' '}\n          /\n          {' '}\n          {player.maxHP}\n        </Text>\n        <Text>\n          <Icon as={GiWalkingBoot} />\n          {' '}\n          {player.initiative + player.initiativeMod}\n          {' '}\n          (\n          {player.initiative}\n          <Icon as={GiDiceTwentyFacesTwenty} />\n          {' '}\n          {player.initiativeMod >= 0 ? '+' : '-'}\n          {' '}\n          {Math.abs(player.initiativeMod)}\n          )\n        </Text>\n      </Grid>\n      {\n        player.conditions.length > 0 && (\n        <HStack>\n          {player.conditions.map((i) => <Badge variant=\"solid\" key={player.conditions.findIndex((j) => i === j)}>{i}</Badge>)}\n        </HStack>\n        )\n      }\n    </Box>\n  );\n}\n","import {\n  Box,\n  Button, HStack, Icon, StackDivider, VStack,\n} from '@chakra-ui/react';\nimport React from 'react';\nimport { GiDiceTwentyFacesTwenty } from 'react-icons/gi';\nimport { useHistory } from 'react-router-dom';\nimport { Character } from '../Characters/Character.interfaces';\nimport { NPC } from '../Characters/NPC.interfaces';\nimport { Player } from '../Characters/Player.interfaces';\nimport { useAppDispatch, useAppSelector } from '../common/hooks';\nimport { setTurn } from '../common/campaignSlice';\nimport { rollAllPlayerInitiative } from '../common/playerSlice';\nimport { NPCTurn } from './NPCTurn';\nimport './Initiative.css';\nimport { PlayerTurn } from './PlayerTurn';\n\ntype CharacterType = 'player' | 'npc';\n\ntype SortedTurnsArray<T = CharacterType> = Array<{\n  character: Character;\n  type: T;\n}>\n\nexport const getSortedTurns = (\n  {\n    players,\n    npcs,\n    showAllTurns,\n    currentTurnId,\n  } : {\n    players: Player[];\n    npcs: NPC[];\n    showAllTurns?: boolean;\n    currentTurnId?: string;\n  },\n) => {\n  const formattedPlayers: SortedTurnsArray<'player'> = players.map((i) => ({\n    character: i,\n    type: 'player',\n  }));\n\n  const formattedNPCs: SortedTurnsArray<'npc'> = npcs.map((i) => ({\n    character: i,\n    type: 'npc',\n  }));\n\n  const sortedTurns: SortedTurnsArray = [\n    ...formattedPlayers,\n    ...formattedNPCs,\n  ]\n    .filter((i) => i.character.displayOnTurnOrder)\n    .sort((a, b) => {\n      const aChar = a.character;\n      const bChar = b.character;\n      return (bChar.initiative + bChar.initiativeMod) - (aChar.initiative + aChar.initiativeMod);\n    });\n\n  const returnValue = (array: SortedTurnsArray): Array<{\n    isActive: boolean;\n    character: Character;\n    type: CharacterType\n  }> => array.filter((i) => showAllTurns || i.character.displayOnTurnOrder).map((i, idx) => ({\n    isActive: idx === 0,\n    character: i.character,\n    type: i.type,\n  }));\n\n  if (!currentTurnId) {\n    return returnValue(sortedTurns);\n  }\n\n  const currentTurnIndex = sortedTurns.findIndex((i) => i.character.id === currentTurnId) || 0;\n  const getSortedByNextActiveTurn = () => [\n    ...sortedTurns\n      .slice(currentTurnIndex + 1, sortedTurns.length),\n    ...sortedTurns\n      .slice(0, currentTurnIndex + 1),\n  ];\n\n  return returnValue(getSortedByNextActiveTurn());\n};\n\nexport function Initiative() {\n  const history = useHistory();\n\n  const changePageMethod = ({ type, id }: {\n    type: string;\n    id: string\n  }): void => {\n    history.push(`/${type}/${id}`);\n  };\n\n  const players = useAppSelector<Player[]>((state) => state.players.players);\n  const npcs = useAppSelector<NPC[]>((state) => state.npcs.npcs);\n  const currentTurnId = useAppSelector<string>((state) => state.campaign.currentTurnId);\n\n  const dispatch = useAppDispatch();\n\n  const turns = getSortedTurns({\n    players,\n    npcs,\n    showAllTurns: false,\n    currentTurnId,\n  });\n\n  const rollInitiativesAction = () => {\n    dispatch(rollAllPlayerInitiative());\n    dispatch(setTurn(''));\n  };\n\n  const setTurnAction = () => {\n    if (turns.length < 1) {\n      return;\n    }\n\n    if (!currentTurnId) {\n      dispatch(setTurn(turns[0].character.id));\n      return;\n    }\n\n    const currentTurnCharacter = turns.findIndex((i) => i.character.id === currentTurnId);\n\n    if (!currentTurnCharacter) {\n      dispatch(setTurn(turns[1].character.id));\n      return;\n    }\n    const nextCharacter = turns[(currentTurnCharacter + 1) % turns.length];\n    dispatch(setTurn(nextCharacter.character.id));\n  };\n\n  return (\n    <Box>\n      <VStack\n        divider={<StackDivider color=\"gray.200\" />}\n        mb={2}\n      >\n        {turns.map(({ character, isActive, type }) => {\n          if (type === 'player') {\n            return (\n              <PlayerTurn\n                onClick={() => changePageMethod({ type: 'players', id: character.id })}\n                isActive={isActive}\n                player={character}\n                key={character.id}\n              />\n            );\n          } if (type === 'npc') {\n            const npc = character as NPC;\n            return (\n              <NPCTurn\n                onClick={() => changePageMethod({\n                  type: npc.isHostile ? 'enemies' : 'npcs',\n                  id: character.id,\n                })}\n                isActive={isActive}\n                npc={npc}\n                key={character.id}\n              />\n            );\n          }\n\n          return false;\n        })}\n        ;\n      </VStack>\n      <HStack\n        position=\"sticky\"\n        backgroundColor=\"white\"\n        bottom=\"0\"\n        width=\"100%\"\n      >\n        <Button onClick={rollInitiativesAction} width=\"100%\">\n          Roll Initiative\n          <Icon as={GiDiceTwentyFacesTwenty} />\n        </Button>\n        <Button onClick={setTurnAction} width=\"100%\">Next Turn</Button>\n      </HStack>\n    </Box>\n  );\n}\n","import {\n  Grid, Flex, Button, useDisclosure, AlertDialog,\n  AlertDialogBody, AlertDialogContent, AlertDialogFooter,\n  AlertDialogHeader, AlertDialogOverlay,\n} from '@chakra-ui/react';\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useAppSelector } from '../common/hooks';\nimport { APP_VERSION, RootState, STORE_KEY } from '../common/store';\n\ninterface StateFormat {\n  version: string;\n  date: number;\n  state: RootState;\n}\n\nconst AlertDeleteState = ({ confirmAction }: { confirmAction: () => void }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const cancelRef = useRef(null);\n  return (\n    <>\n      <Button\n        width=\"100%\"\n        colorScheme=\"red\"\n        onClick={onOpen}\n      >\n        Clear State\n      </Button>\n      <AlertDialog\n        isOpen={isOpen}\n        leastDestructiveRef={cancelRef}\n        onClose={onClose}\n      >\n        <AlertDialogOverlay>\n          <AlertDialogContent>\n            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\n              Clear State\n            </AlertDialogHeader>\n            <AlertDialogBody>\n              Are you sure? This action cannot be undone.\n            </AlertDialogBody>\n            <AlertDialogFooter>\n              <Button ref={cancelRef} onClick={onClose}>\n                Cancel\n              </Button>\n              <Button\n                colorScheme=\"red\"\n                onClick={() => {\n                  onClose();\n                  confirmAction();\n                }}\n                ml={3}\n              >\n                Delete\n              </Button>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialogOverlay>\n      </AlertDialog>\n    </>\n  );\n};\n\nexport const Settings = () => {\n  const state = useAppSelector((s) => s);\n\n  const exportStateFormat = (): StateFormat => ({\n    version: APP_VERSION,\n    state,\n    date: Date.now(),\n  });\n\n  const [exportStateLink, setExportStateLink] = useState('');\n\n  const exportStateRef = useRef<HTMLAnchorElement>(null);\n  const importStateRef = useRef<HTMLInputElement>(null);\n  const makeExportStateFileName = () => `${Date.now()}_${APP_VERSION}_${state.campaign.campaignTitle}.json`;\n  const makeExportStateFile = () => {\n    // This creates the file.\n    // In my case, I have an array, and each item in\n    // the array should be on a new line, which is why\n    // I use .join('\\n') here.\n    const data = new Blob([JSON.stringify(exportStateFormat())], { type: 'application/json' });\n\n    // this part avoids Memory Leaks\n    if (exportStateLink !== '') window.URL.revokeObjectURL(exportStateLink);\n\n    // update the download link state\n    setExportStateLink(window.URL.createObjectURL(data));\n  };\n\n  const clearState = () => {\n    localStorage.removeItem(`${STORE_KEY}_${APP_VERSION}`);\n    window.location.reload();\n  };\n\n  const importState = (importedState: string) => {\n    try {\n      const parsedImportedState: StateFormat = JSON.parse(importedState);\n      localStorage.setItem(`${STORE_KEY}_${APP_VERSION}`, JSON.stringify(parsedImportedState.state));\n      window.location.reload();\n    } catch (e) {\n      console.error('Failed to import state');\n    }\n  };\n\n  useEffect(() => {\n    makeExportStateFile();\n  }, [state]);\n\n  return (\n    <Grid\n      templateColumns=\"repeat(1, 1fr)\"\n      gap={5}\n    >\n      <Flex>\n        <input\n          type=\"file\"\n          accept=\"application/json\"\n          onChange={async (e) => {\n            e.preventDefault();\n            const reader = new FileReader();\n            reader.onload = async (_e) => {\n              const text = _e?.target?.result;\n              if (typeof text === 'string') {\n                importState(text as string);\n              }\n            };\n            reader.readAsText(importStateRef.current?.files?.[0] as Blob);\n          }}\n          ref={importStateRef}\n          hidden\n        />\n        <Button\n          width=\"100%\"\n          onClick={() => {\n            importStateRef.current?.click();\n          }}\n        >\n          Import Saved State\n        </Button>\n      </Flex>\n      {/* <Flex>\n        <Button width=\"100%\">Import Characters</Button>\n      </Flex> */}\n      <Flex>\n        <a\n          hidden\n          download={makeExportStateFileName()}\n          href={exportStateLink}\n          ref={exportStateRef}\n        >\n          Export\n        </a>\n        <Button width=\"100%\" onClick={() => exportStateRef.current?.click()}>Export Save State</Button>\n      </Flex>\n      <AlertDeleteState confirmAction={clearState} />\n    </Grid>\n  );\n};\n","import {\n  Flex, Heading, IconButton, Icon, Input,\n} from '@chakra-ui/react';\nimport React, { useState } from 'react';\nimport { GoPencil } from 'react-icons/go';\nimport { ImRedo } from 'react-icons/im';\nimport { IoMdSave } from 'react-icons/io';\nimport { setCampaignTitle } from '../common/campaignSlice';\nimport { useAppSelector, useAppDispatch } from '../common/hooks';\n\nexport const CampaignTitle = () => {\n  const campaignTitle = useAppSelector((state) => state.campaign.campaignTitle);\n  const dispatch = useAppDispatch();\n  const setTitleAction = (ct: string) => dispatch(setCampaignTitle(ct));\n  const [editableCampaignTitle, setEditableCampaignTitle] = useState(campaignTitle);\n  const [editTitleEnabled, setEditTitleEnabled] = useState(false);\n\n  const editTitleRef = React.useRef<HTMLInputElement>(null);\n  return (\n    <Flex\n      mb={4}\n      width=\"100%\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n    >\n      {\n        !editTitleEnabled && (\n          <Flex\n            justifyContent=\"center\"\n            alignItems=\"center\"\n          >\n            <Heading>{campaignTitle}</Heading>\n            <IconButton\n              ml={2}\n              aria-label=\"Edit Title\"\n              icon={<Icon as={GoPencil} />}\n              onClick={() => {\n                setEditTitleEnabled(true);\n                setTimeout(() => {\n                  editTitleRef.current?.focus();\n                }, 100);\n              }}\n            />\n          </Flex>\n        )\n      }\n      {\n        editTitleEnabled && (\n          <Flex\n            justifyContent=\"center\"\n            alignItems=\"center\"\n          >\n            <Input\n              ref={editTitleRef}\n              onChange={(e) => setEditableCampaignTitle(e.target.value)}\n              onKeyPress={(e) => {\n                if (e.code === 'Enter') {\n                  setEditTitleEnabled(false);\n                  setTitleAction(editableCampaignTitle);\n                }\n              }}\n            />\n            <IconButton\n              ml={2}\n              aria-label=\"Save\"\n              icon={<Icon as={IoMdSave} />}\n              onClick={() => {\n                setEditTitleEnabled(false);\n                setTitleAction(editableCampaignTitle);\n              }}\n            />\n            <IconButton\n              ml={2}\n              aria-label=\"Reset\"\n              icon={<Icon as={ImRedo} />}\n              onClick={() => setEditTitleEnabled(false)}\n            />\n          </Flex>\n        )\n      }\n    </Flex>\n  );\n};\n","import { useHistory, useRouteMatch } from 'react-router-dom';\nimport { Flex, Text, Icon } from '@chakra-ui/react';\nimport React from 'react';\nimport { IconType } from 'react-icons';\n\ninterface MenuItemLinkProps {\n  to: string;\n  label: string;\n  activeOnlyWhenExact?: boolean;\n  icon?: IconType;\n}\n\nexport const MenuItemLink = ({\n  to, label, activeOnlyWhenExact, icon,\n}: MenuItemLinkProps) => {\n  const history = useHistory();\n  const match = useRouteMatch({\n    path: to,\n    exact: activeOnlyWhenExact,\n  });\n\n  function handleClick() {\n    history.push(to);\n  }\n\n  return (\n    <Flex\n      cursor=\"pointer\"\n      width=\"100%\"\n      textAlign=\"left\"\n      borderRadius={10}\n      backgroundColor={match ? 'gray' : undefined}\n      p={2}\n      fontWeight=\"bold\"\n      color={match ? 'white' : 'black'}\n      onClick={handleClick}\n      alignItems=\"center\"\n    >\n      <Flex width=\"10%\">\n        {icon && <Icon as={icon} />}\n      </Flex>\n      <Text>{label}</Text>\n    </Flex>\n  );\n};\n","import {\n  Box, Drawer, DrawerBody, DrawerCloseButton,\n  DrawerContent, DrawerFooter, DrawerHeader, DrawerOverlay,\n  Icon, useDisclosure, VStack,\n} from '@chakra-ui/react';\nimport React, { ReactElement, useEffect } from 'react';\nimport { IconType } from 'react-icons';\nimport { GiHamburgerMenu } from 'react-icons/gi';\nimport { MenuItemLink } from './MenuItemLink';\n\ninterface SidebarProps {\n  routes: Array<{\n    component: ReactElement,\n    basePath: string,\n    path: string,\n    exact?: boolean,\n    pageTitle: string,\n    icon?: IconType,\n  }>;\n}\n\nfunction useWindowSize() {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = React.useState<{\n    width: number;\n    height: number;\n  }>({\n    width: 0,\n    height: 0,\n  });\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n    // Add event listener\n    window.addEventListener('resize', handleResize);\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n    // Remove event listener on cleanup\n    return () => window.removeEventListener('resize', handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n  return windowSize;\n}\n\nexport const Sidebar = ({ routes }: SidebarProps) => {\n  const size = useWindowSize();\n  const minWidth = 1400;\n  const isLargerThanMinWidth = size.width > minWidth;\n\n  const { isOpen, onOpen, onClose } = useDisclosure({\n    defaultIsOpen: isLargerThanMinWidth,\n  });\n\n  return (\n    <>\n      <div className=\"drawer-button\">\n        <Box pt={3} pb={3} pl={4} pr={4} cursor=\"pointer\" onClick={onOpen}>\n          <Icon as={GiHamburgerMenu} />\n        </Box>\n      </div>\n      <Drawer\n        isOpen={isLargerThanMinWidth || isOpen}\n        placement=\"left\"\n        onClose={() => {\n          if (!isLargerThanMinWidth) {\n            onClose();\n          }\n        }}\n        blockScrollOnMount={!isLargerThanMinWidth}\n        variant={isLargerThanMinWidth ? 'alwaysOpen' : undefined}\n        trapFocus={!isLargerThanMinWidth}\n      >\n        {!isLargerThanMinWidth && <DrawerOverlay />}\n        <DrawerContent>\n          {!isLargerThanMinWidth && <DrawerCloseButton />}\n          <DrawerHeader>Menu</DrawerHeader>\n\n          <DrawerBody>\n            <VStack spacing={0}>\n              {routes.map(({\n                pageTitle, path, exact, icon,\n              }) => (\n                <MenuItemLink\n                  to={path}\n                  label={pageTitle}\n                  activeOnlyWhenExact={exact}\n                  key={pageTitle}\n                  icon={icon}\n                />\n              ))}\n            </VStack>\n          </DrawerBody>\n\n          <DrawerFooter />\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n};\n","import {\n  Badge, Box, Button, Center, Checkbox, CheckboxGroup, Divider, Flex, Grid,\n  Heading, HStack, Icon, IconButton, Input, NumberInput, Text,\n  NumberInputField, Select, Slide, useCheckboxGroup, useDisclosure, VStack,\n} from '@chakra-ui/react';\nimport React, { useRef, useState } from 'react';\nimport { AiOutlineLink } from 'react-icons/ai';\nimport { BsHeartFill } from 'react-icons/bs';\nimport { GiCheckedShield, GiDiceTwentyFacesTwenty, GiWalkingBoot } from 'react-icons/gi';\nimport { useHistory } from 'react-router-dom';\nimport { characterTypeColours } from '../App';\nimport { Character } from '../Characters/Character.interfaces';\nimport { NPC } from '../Characters/NPC.interfaces';\nimport { Player } from '../Characters/Player.interfaces';\nimport { setTurn } from '../common/campaignSlice';\nimport { useAppDispatch, useAppSelector } from '../common/hooks';\nimport { modifyNPC } from '../common/npcSlice';\nimport { modifyPlayer, rollAllPlayerInitiative } from '../common/playerSlice';\nimport { getSortedTurns } from '../Initiative';\n\nexport function DMScreen() {\n  const history = useHistory();\n\n  const {\n    value: selectedCharacters,\n    setValue: setSelectedCharacters,\n  } = useCheckboxGroup({\n    defaultValue: [] as string[],\n  });\n\n  const changePageMethod = ({ type, id }: {\n    type: string;\n    id: string\n  }): void => {\n    history.push(`/${type}/${id}`);\n  };\n\n  const {\n    isOpen,\n    onOpen,\n    onClose,\n  } = useDisclosure();\n\n  const editPanelRef = useRef<HTMLDivElement>(null);\n\n  const players = useAppSelector<Player[]>((state) => state.players.players);\n  const npcs = useAppSelector<NPC[]>((state) => state.npcs.npcs);\n  const currentTurnId = useAppSelector<string>((state) => state.campaign.currentTurnId);\n\n  const characters = getSortedTurns({\n    players,\n    npcs,\n    showAllTurns: true,\n    currentTurnId,\n  });\n\n  const dispatch = useAppDispatch();\n\n  const rollInitiativesAction = () => {\n    dispatch(rollAllPlayerInitiative());\n    dispatch(setTurn(''));\n  };\n\n  const setTurnAction = () => {\n    if (characters.length < 1) {\n      return;\n    }\n\n    if (!currentTurnId) {\n      dispatch(setTurn(characters[0].character.id));\n      return;\n    }\n\n    const currentTurnCharacter = characters.findIndex((i) => i.character.id === currentTurnId);\n\n    if (!currentTurnCharacter) {\n      dispatch(setTurn(characters[1].character.id));\n      return;\n    }\n    const nextCharacter = characters[(currentTurnCharacter + 1) % characters.length];\n    dispatch(setTurn(nextCharacter.character.id));\n  };\n\n  // Set Health/THP funcs\n  const [healthMod, setHealthMod] = useState(0);\n  const [thpMod, setThpMod] = useState(0);\n\n  const hPModPanels: Array<{\n    title: string;\n    prop: 'currentHP' | 'tempHP';\n    value: number;\n    setMethod: (value: number) => void;\n  }> = [\n    {\n      title: 'Modify Health',\n      prop: 'currentHP',\n      value: healthMod,\n      setMethod: setHealthMod,\n    },\n    {\n      title: 'Modify THP',\n      prop: 'tempHP',\n      value: thpMod,\n      setMethod: setThpMod,\n    },\n  ];\n\n  const modifyHPValue = (value: number, prop: 'currentHP' | 'tempHP', reset?: boolean) => {\n    if (value === 0 && !reset) return;\n\n    const dispatchActions: unknown[] = [];\n    const selectedPlayers = players.filter((i) => selectedCharacters.includes(i.id));\n\n    const resetProps = (character: Character) => ({\n      id: character.id,\n      tempHP: prop === 'tempHP' ? 0 : Math.max(character.tempHP, 0),\n      currentHP: prop === 'currentHP' ? character.maxHP : character.currentHP,\n    });\n\n    const modProps = (character: Character) => ({\n      id: character.id,\n      [prop]: prop === 'tempHP'\n        ? Math.max(character[prop] + value, 0)\n        : Math.min(\n          character[prop] + value,\n          character.maxHP,\n        ),\n    });\n\n    const propMethod = reset ? resetProps : modProps;\n\n    selectedPlayers.forEach((player) => {\n      dispatchActions.push(modifyPlayer(propMethod(player)));\n    });\n\n    const selectedNPCs = npcs.filter((i) => selectedCharacters.includes(i.id));\n    selectedNPCs.forEach((npc) => {\n      dispatchActions.push(modifyNPC(propMethod(npc)));\n    });\n\n    if (dispatchActions.length) dispatchActions.map(dispatch);\n  };\n\n  const allExistingConditions = [...players, ...npcs].reduce((p, v) => {\n    if (v.conditions.length) {\n      v.conditions.forEach((c) => {\n        if (!p.includes(c)) p.push(c);\n      });\n    }\n    return p;\n  }, [] as string[]);\n\n  const [conditionToRemove, setConditionToRemove] = useState('');\n  const [conditionToAdd, setConditionToAdd] = useState('');\n\n  const modifyCondValue = (value: string, action: 'remove' | 'add') => {\n    if (!value) return;\n\n    const dispatchActions: unknown[] = [];\n    const selectedPlayers = players.filter((i) => selectedCharacters.includes(i.id));\n\n    const modConditionValue = (conditions: string[]) => {\n      const modifiedCondition = [...conditions];\n      const conditionIndex = modifiedCondition.indexOf(value);\n      const conditionAlreadyExists = conditionIndex > -1;\n      if (action === 'remove' && conditionAlreadyExists) {\n        modifiedCondition.splice(conditionIndex, 1);\n      }\n\n      if (action === 'add' && !conditionAlreadyExists) {\n        modifiedCondition.push(value);\n      }\n\n      return modifiedCondition;\n    };\n\n    selectedPlayers.forEach((player) => {\n      dispatchActions.push(modifyPlayer({\n        id: player.id,\n        conditions: modConditionValue(player.conditions),\n      }));\n    });\n\n    const selectedNPCs = npcs.filter((i) => selectedCharacters.includes(i.id));\n    selectedNPCs.forEach((npc) => {\n      dispatchActions.push(modifyNPC({\n        id: npc.id,\n        conditions: modConditionValue(npc.conditions),\n      }));\n    });\n\n    if (dispatchActions.length) dispatchActions.map(dispatch);\n  };\n\n  return (\n    <Flex>\n      <VStack width=\"100%\">\n        <HStack\n          width=\"100%\"\n        >\n          <Button\n            flexGrow={1}\n            disabled={selectedCharacters.length === 0}\n            size=\"xs\"\n            onClick={() => setSelectedCharacters([])}\n          >\n            Deselect All Characters\n          </Button>\n          <Button\n            flexGrow={1}\n            onClick={() => setSelectedCharacters(players.map((i) => i.id))}\n            size=\"xs\"\n          >\n            Select All Players\n          </Button>\n          <Button\n            flexGrow={1}\n            onClick={() => setSelectedCharacters(\n              npcs\n                .filter((i) => i.isHostile)\n                .map((i) => i.id),\n            )}\n            size=\"xs\"\n          >\n            Select All Enemies\n          </Button>\n        </HStack>\n        {/* Characters */}\n        <VStack width=\"100%\" spacing={1}>\n          <CheckboxGroup\n            defaultValue={[]}\n            value={selectedCharacters}\n            onChange={setSelectedCharacters}\n          >\n            {\n              characters.map((i) => {\n                const { character } = i;\n                const npc = character as NPC;\n                const tempHP = character.tempHP ? ` (${character.tempHP})` : '';\n                let type: string = '';\n                if (i.type === 'player') {\n                  type = 'players';\n                } else if (i.type === 'npc') {\n                  type = npc.isHostile ? 'enemies' : 'npcs';\n                }\n\n                let borderColour: string = characterTypeColours.neutral;\n\n                if (type === 'players') {\n                  borderColour = characterTypeColours.player;\n                } else if (type === 'enemies') {\n                  borderColour = characterTypeColours.enemy;\n                } else if (npc.isFriendly) {\n                  borderColour = characterTypeColours.friendly;\n                }\n                return (\n                  <Box\n                    width=\"100%\"\n                    key={character.id}\n                    border={`0.1em solid ${borderColour}`}\n                    borderRadius={10}\n                  >\n                    <Grid\n                      key={character.id}\n                      alignItems=\"center\"\n                      templateColumns=\"repeat(5, 1fr)\"\n                      fontSize=\"xs\"\n                      pl={2}\n                      pr={2}\n                      gap={1}\n                    >\n                      <HStack>\n                        <Checkbox value={character.id} size=\"lg\" />\n                        {' '}\n                        <Text\n                          fontWeight=\"bold\"\n                          fontSize=\"xs\"\n                        >\n                          {character.name}\n                        </Text>\n                      </HStack>\n                      <Box>\n                        <Icon as={GiCheckedShield} />\n                        {' '}\n                        {character.armourClass}\n                      </Box>\n                      <Box>\n                        <Icon as={BsHeartFill} />\n                        {' '}\n                        {character.currentHP}\n                        {' '}\n                        {tempHP}\n                        {' '}\n                        /\n                        {' '}\n                        {character.maxHP}\n                      </Box>\n                      <Box>\n                        <Icon as={GiWalkingBoot} />\n                        {' '}\n                        {character.initiative + character.initiativeMod}\n                        {' '}\n                        (\n                        {character.initiative}\n                        <Icon as={GiDiceTwentyFacesTwenty} />\n                        {' '}\n                        {character.initiativeMod >= 0 ? '+' : '-'}\n                        {' '}\n                        {Math.abs(character.initiativeMod)}\n                        )\n                      </Box>\n                      <Box>\n                        <IconButton\n                          aria-label=\"Go to character\"\n                          icon={<Icon as={AiOutlineLink} />}\n                          onClick={() => changePageMethod({\n                            id: character.id,\n                            type,\n                          })}\n                          size=\"xs\"\n                          m={1}\n                        />\n                      </Box>\n                    </Grid>\n                    {\n                      character.conditions.length > 0 && (\n                      <HStack pr={1} pl={1} pb={1}>\n                        {character.conditions.map((cond) => (\n                          <Badge key={cond}>{cond}</Badge>\n                        ))}\n                      </HStack>\n                      )\n                    }\n                  </Box>\n                );\n              })\n            }\n          </CheckboxGroup>\n        </VStack>\n        {/* Spacer for edit panel height */}\n        <Flex\n          height={isOpen && editPanelRef.current ? `${editPanelRef.current.clientHeight}px` : 0}\n        />\n\n        {/* Controls */}\n        <VStack\n          width=\"100%\"\n          position=\"sticky\"\n          bottom=\"0\"\n          backgroundColor=\"white\"\n          p={2}\n        >\n          <Button width=\"100%\" onClick={onOpen} display={isOpen ? 'none' : 'visible'}>\n            Show Edit Panel\n          </Button>\n\n          {/* Edit Panel */}\n          <Slide\n            direction=\"bottom\"\n            in={isOpen}\n            ref={editPanelRef}\n          >\n            <Center>\n              <VStack\n                p={2}\n                minW=\"650\"\n                maxW=\"800\"\n                backgroundColor=\"white\"\n              >\n                <Center><Heading size=\"md\">Edit Panel</Heading></Center>\n                <Divider />\n                <Button\n                  width=\"100%\"\n                  onClick={onClose}\n                  size=\"xs\"\n                >\n                  Hide This Panel\n                </Button>\n                <Divider />\n                <HStack\n                  backgroundColor=\"white\"\n                  width=\"100%\"\n                >\n                  <Button onClick={rollInitiativesAction} width=\"100%\">\n                    Roll Initiative\n                    <Icon as={GiDiceTwentyFacesTwenty} />\n                  </Button>\n                  <Button onClick={setTurnAction} width=\"100%\">Next Turn</Button>\n                </HStack>\n                <Divider />\n                <HStack\n                  width=\"100%\"\n                >\n                  {\n                    hPModPanels.map(({\n                      title, prop, value, setMethod,\n                    }) => (\n                      <VStack\n                        width=\"50%\"\n                        key={title}\n                      >\n                        <Flex\n                          flexGrow={1}\n                        >\n                          <Heading size=\"s\">{title}</Heading>\n                        </Flex>\n                        <HStack>\n                          {\n                            [\n                              -10,\n                              -5,\n                              -1,\n                              1,\n                              5,\n                              10,\n                            ].map((i) => (\n                              <Button\n                                size=\"xs\"\n                                onClick={() => modifyHPValue(i, prop)}\n                                variant=\"outline\"\n                                disabled={!selectedCharacters.length}\n                                key={i}\n                              >\n                                {i > 0 && '+'}\n                                {i}\n                              </Button>\n                            ))\n                          }\n                        </HStack>\n                        <HStack>\n                          <Button\n                            variant=\"outline\"\n                            disabled={!selectedCharacters.length}\n                            onClick={() => modifyHPValue(-value, prop)}\n                          >\n                            -\n                          </Button>\n                          <NumberInput\n                            value={value}\n                            onChange={(e) => setMethod(Number(e) || 0)}\n                            width=\"6em\"\n                            disabled={!selectedCharacters.length}\n                          >\n                            <NumberInputField />\n                          </NumberInput>\n                          <Button\n                            variant=\"outline\"\n                            disabled={!selectedCharacters.length}\n                            onClick={() => modifyHPValue(value, prop)}\n                          >\n                            +\n                          </Button>\n                        </HStack>\n                        <Button\n                          size=\"xs\"\n                          variant=\"outline\"\n                          disabled={!selectedCharacters.length}\n                          onClick={() => modifyHPValue(0, prop, true)}\n                        >\n                          Reset\n                        </Button>\n                      </VStack>\n                    ))\n                  }\n                </HStack>\n                <Divider />\n                <VStack width=\"100%\">\n                  <Heading size=\"s\">\n                    Modify Conditions\n                  </Heading>\n                  <HStack\n                    width=\"100%\"\n                  >\n                    <VStack\n                      width=\"50%\"\n                    >\n                      <Input\n                        placeholder=\"Name of condition\"\n                        disabled={!selectedCharacters.length}\n                        value={conditionToAdd}\n                        onChange={(e) => setConditionToAdd(e.target.value)}\n                      />\n                      <Button\n                        width=\"100%\"\n                        disabled={!selectedCharacters.length}\n                        onClick={() => modifyCondValue(conditionToAdd, 'add')}\n                      >\n                        Add Condition\n                      </Button>\n                    </VStack>\n                    <VStack\n                      width=\"50%\"\n                    >\n                      <Select\n                        placeholder=\"Select condition to remove\"\n                        disabled={!selectedCharacters.length || !allExistingConditions.length}\n                        value={conditionToRemove}\n                        onChange={(e) => setConditionToRemove(e.target.value)}\n                      >\n                        {\n                          allExistingConditions.map((c) => (\n                            <option value={c}>{c}</option>\n                          ))\n                        }\n                      </Select>\n                      <Button\n                        width=\"100%\"\n                        disabled={!selectedCharacters.length || !allExistingConditions.length}\n                        onClick={() => modifyCondValue(conditionToRemove, 'remove')}\n                      >\n                        Remove Condition\n                      </Button>\n                    </VStack>\n                  </HStack>\n                </VStack>\n              </VStack>\n            </Center>\n          </Slide>\n          {/* End Edit Panel */}\n\n        </VStack>\n      </VStack>\n    </Flex>\n  );\n}\n","import {\n  Center, Container, Divider, Heading,\n} from '@chakra-ui/react';\nimport { FaBars, FaCog, FaRegMap } from 'react-icons/fa';\nimport React, { ReactElement } from 'react';\nimport {\n  BrowserRouter as Router, Route, Switch,\n} from 'react-router-dom';\nimport { IconType } from 'react-icons';\nimport { BsPersonFill } from 'react-icons/bs';\nimport { GiBirdClaw } from 'react-icons/gi';\nimport { AiFillRobot } from 'react-icons/ai';\nimport { NPCs } from '../Characters/NPCs';\nimport { Players } from '../Characters/Players';\nimport { setCampaignTitle, setTurn } from '../common/campaignSlice';\nimport { useAppDispatch } from '../common/hooks';\nimport { refreshNPCs } from '../common/npcSlice';\nimport { refreshPlayers } from '../common/playerSlice';\nimport { loadFromLocalStorage, RootState } from '../common/store';\nimport { Initiative } from '../Initiative';\nimport { Settings } from '../Settings';\nimport { CampaignTitle } from './CampaignTitle';\nimport { Sidebar } from './Sidebar';\nimport './App.css';\nimport { DMScreen } from '../DMScreen';\n\nexport function App() {\n  const dispatch = useAppDispatch();\n\n  window.addEventListener('storage', () => {\n    const persistedStorage: RootState = loadFromLocalStorage();\n\n    if (!document.hasFocus()) {\n      const refreshActions = [\n        refreshPlayers(persistedStorage?.players?.players || []),\n        refreshNPCs(persistedStorage?.npcs?.npcs || []),\n        setCampaignTitle(persistedStorage?.campaign?.campaignTitle || ''),\n        setTurn(persistedStorage?.campaign?.currentTurnId || ''),\n      ];\n      refreshActions.map(dispatch);\n    }\n  });\n\n  const routes: Array<{\n    component: ReactElement,\n    basePath: string,\n    path: string,\n    exact?: boolean,\n    pageTitle: string,\n    icon?: IconType,\n  }> = [\n    {\n      component: <Initiative />,\n      path: '/',\n      basePath: '/',\n      exact: true,\n      pageTitle: 'Turn Order',\n      icon: FaBars,\n    },\n    {\n      component: <DMScreen />,\n      path: '/screen',\n      basePath: '/screen',\n      pageTitle: 'Multi Edit',\n      icon: FaRegMap,\n    },\n    {\n      component: <Players />,\n      path: '/players',\n      basePath: '/players/:id?',\n      pageTitle: 'Players',\n      icon: BsPersonFill,\n    },\n    {\n      component: <NPCs showHostile />,\n      path: '/enemies',\n      basePath: '/enemies/:id?',\n      pageTitle: 'Enemies',\n      icon: GiBirdClaw,\n    },\n    {\n      component: <NPCs showFriendly showNeutral />,\n      path: '/npcs',\n      basePath: '/npcs/:id?',\n      pageTitle: 'Other NPCs',\n      icon: AiFillRobot,\n    },\n    {\n      component: <Settings />,\n      path: '/settings',\n      basePath: '/settings',\n      pageTitle: 'Settings',\n      icon: FaCog,\n    },\n  ];\n\n  return (\n    <div className=\"App\">\n      <Router\n        basename=\"/dndtracker\"\n      >\n        <Sidebar routes={routes} />\n        <Container maxW=\"800\" minW=\"650\">\n          <CampaignTitle />\n          <Switch>\n            {\n              routes.map(({\n                component, basePath, pageTitle, exact,\n              }) => (\n                <Route\n                  path={basePath}\n                  exact={exact}\n                  key={pageTitle}\n                >\n                  <Center><Heading size=\"md\">{pageTitle}</Heading></Center>\n                  <Divider mt={4} mb={4} />\n                  {component}\n                </Route>\n              ))\n            }\n          </Switch>\n        </Container>\n      </Router>\n    </div>\n  );\n}\n","import { extendTheme } from '@chakra-ui/react';\n\nexport const theme = extendTheme({\n  components: {\n    Drawer: {\n      variants: {\n        alwaysOpen: {\n          dialog: {\n            pointerEvents: 'auto',\n          },\n          dialogContainer: {\n            pointerEvents: 'none',\n          },\n        },\n      },\n    },\n  },\n});\n\nexport const characterTypeColours = {\n  enemy: '#AA0000',\n  friendly: '#AAAA00',\n  neutral: '#AAAAAA',\n  player: '#00AA00',\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ChakraProvider } from '@chakra-ui/react';\nimport { Provider } from 'react-redux';\nimport reportWebVitals from './reportWebVitals';\nimport { App, theme } from './App';\nimport { store } from './common/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <ChakraProvider theme={theme}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </ChakraProvider>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}