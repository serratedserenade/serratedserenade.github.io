{"version":3,"sources":["common/util.ts","reportWebVitals.ts","common/campaignSlice.ts","common/hooks.ts","common/npcSlice.ts","common/playerSlice.ts","common/store.ts","App/CampaignTitle.tsx","App/MenuItemLink.tsx","App/Sidebar.tsx","common/formik-chakra/FormControl.tsx","common/formik-chakra/InputControl.tsx","common/formik-chakra/NumberInputControl.tsx","common/formik-chakra/SwitchControl.tsx","Characters/AddNPCForm.tsx","common/formik-chakra/TextareaControl.tsx","Characters/ModifyCharacterConditionsField.tsx","Characters/ModifyCurrentHPInput.tsx","Characters/ModifyExternalNotes.tsx","Characters/characterFormUtils.ts","Characters/ModifyNPCForm.tsx","Characters/NPCs.tsx","Characters/ModifyPlayerForm.tsx","Characters/Players.tsx","Initiative/NPCTurn.tsx","DMScreen/DeathSaveCounter.tsx","Initiative/PlayerTurn.tsx","Initiative/Initiative.tsx","DMScreen/DMScreen.tsx","common/SlateEditor.tsx","DMScreen/CampaignNotes.tsx","Settings/Settings.tsx","App/RouteConfig.tsx","App/App.tsx","App/theme.ts","index.tsx"],"names":["Dice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","campaignSlice","createSlice","name","initialState","currentTurnId","campaignTitle","notes","reducers","setTurn","state","action","payload","setCampaignTitle","setCampaignNotes","actions","useAppDispatch","useDispatch","useAppSelector","useSelector","rollDice","max","Math","ceil","random","useQuery","URLSearchParams","useLocation","search","npcSlice","npcs","addNPC","id","v4","push","removeNPC","index","findIndex","v","splice","console","warn","refreshNPCs","length","modifyNPC","foundNPC","i","rollAllNPCInitiative","forEach","initiative","d20","modifyNPCValidationSchema","Yup","currentHP","integer","required","maxHP","tempHP","default","armourClass","min","initiativeMod","externalNotes","of","type","url","label","conditions","displayOnTurnOrder","isHostile","isFriendly","isBoss","showHealth","showInitiative","showAC","showName","playerSlice","players","addPlayer","removePlayer","refreshPlayers","modifyPlayer","foundPlayer","modPlayer","map","toLowerCase","includes","passedDeathSaves","failedDeathSaves","rollAllPlayerInitiative","modifyPlayerValidationSchema","STORE_KEY","APP_VERSION","loadFromLocalStorage","serialisedState","localStorage","getItem","JSON","parse","e","store","configureStore","reducer","playerReducer","campaign","campaignReducer","npcReducer","preloadedState","subscribe","document","hasFocus","stringify","setItem","saveToLocalStorage","getState","CampaignTitle","dispatch","setTitleAction","ct","useState","editableCampaignTitle","setEditableCampaignTitle","editTitleEnabled","setEditTitleEnabled","editTitleRef","React","useRef","mb","width","justifyContent","alignItems","ml","aria-label","icon","as","GoPencil","onClick","setTimeout","current","focus","ref","onChange","target","value","onKeyPress","code","IoMdSave","ImRedo","MenuItemLink","to","activeOnlyWhenExact","history","useHistory","match","useRouteMatch","path","exact","cursor","textAlign","borderRadius","backgroundColor","undefined","p","fontWeight","color","Sidebar","routes","isLargerThanMinWidth","height","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","useDisclosure","defaultIsOpen","isOpen","onOpen","onClose","className","pt","pb","pl","pr","GiHamburgerMenu","placement","blockScrollOnMount","variant","trapFocus","spacing","filter","disabled","pageTitle","FormControl","props","children","helperText","hideError","rest","useField","error","touched","isInvalid","htmlFor","InputControl","inputProps","field","NumberInputControl","n","showStepper","numberInputProps","fieldId","setFieldValue","useFormikContext","Number","SwitchControl","switchProps","css","Flex","isChecked","AddNPCFlags","values","mt","fontSize","templateColumns","displayString","key","display","rollInitiativeOnCreate","rightIcon","GiDiceTwentyFacesTwenty","AddNPCForm","showFriendly","showHostile","addNPCValidationSchema","moreThan","addFormFields","initialValues","validationSchema","onSubmit","initiativeValue","IC","colorScheme","AddIcon","TextareaControl","textareaProps","ModifyCharacterConditionsField","character","context","render","arrayHelpers","addCondition","element","querySelector","tagInput","toString","border","opacity","condition","idx","size","m","remove","ModifyCurrentHPInput","submitForm","ModifyExternalNoteReferences","errors","flex","linkLabelId","linkUrlId","note","_hover","transition","open","AiOutlineLink","w","h","textOverflow","overflow","whiteSpace","CloseIcon","placeholder","linkLabelEle","linkUrlEle","labelInput","urlInput","addNote","hidden","resetManualFormFields","ModifyNPCForm","npc","params","useParams","modifyNPCAction","formColour","characterTypeColours","neutral","enemy","friendly","NPCModifyStatFields","templateRows","gap","colSpan","NPCModifyActions","_npc","dirty","AiFillDelete","toggleDisplay","NPCFormHeader","BsFillEyeFill","BsFillEyeSlashFill","resetForm","onReset","enableReinitialize","abs","resize","allowToggle","allowMultiple","NPCFormList","NPCs","showNeutral","ModifyPlayerForm","player","modifyPlayerAction","PlayerModifyStatFields","PlayerModifyActions","_player","PlayerFormHeader","PlayerFormList","Players","addPlayerValidationSchema","AddPlayerForm","NPCTurn","isActive","tinyMode","GiCheckedShield","BsHeartFill","FaHeartBroken","GiWalkingBoot","DeathSaveCounter","disableAction","setDeathSaveThrowAction","count","prop","DeathSaveFailedIcon","saveCount","RiSkull2Fill","RiSkull2Line","DeathSaveSuccessIcon","HiPlusCircle","HiPlus","pointerEvents","minW","orientation","PlayerTurn","c","getSortedTurns","showAllTurns","formattedPlayers","formattedNPCs","sortedTurns","sort","a","b","aChar","bChar","returnValue","array","currentTurnIndex","slice","Initiative","get","changePageMethod","historyObj","opener","appHistory","findFocus","iter","turns","divider","position","bottom","currentTurnCharacter","nextCharacter","DMScreen","useCheckboxGroup","defaultValue","selectedCharacters","setSelectedCharacters","setValue","editPanelRef","characters","availablePlayers","availableEnemies","healthMod","setHealthMod","hPModPanels","title","setMethod","modifyHPValue","reset","dispatchActions","selectedPlayers","propMethod","allExistingConditions","reduce","conditionToRemove","setConditionToRemove","conditionToAdd","setConditionToAdd","modifyCondValue","modConditionValue","modifiedCondition","conditionIndex","indexOf","conditionAlreadyExists","flexGrow","borderColour","cond","clientHeight","direction","in","maxW","HOTKEYS","LIST_TYPES","isBlockActive","editor","format","Editor","nodes","isEditor","SlateElement","isElement","isMarkActive","marks","toggleMark","removeMark","addMark","Element","attributes","Leaf","leaf","modChildren","bold","italic","underline","BlockButton","useSlate","event","preventDefault","isList","Transforms","unwrapNodes","String","split","newProperties","setNodes","block","wrapNodes","toggleBlock","MarkButton","initialValue","text","SlateEditor","renderElement","useCallback","renderLeaf","useMemo","withHistory","withReact","createEditor","GoBold","GoItalic","MdFormatUnderlined","GoCode","FaHeading","CgFormatHeading","GoQuote","GoListOrdered","GoListUnordered","spellCheck","autoFocus","onKeyDown","Object","entries","hotkey","mark","isHotkey","CampaignNotes","AlertDeleteState","confirmAction","cancelRef","leastDestructiveRef","Settings","s","exportStateLink","setExportStateLink","exportStateRef","importStateRef","importState","importedState","parsedImportedState","location","reload","data","Blob","version","date","Date","now","URL","revokeObjectURL","createObjectURL","makeExportStateFile","accept","reader","FileReader","onload","_e","result","readAsText","files","click","download","href","removeItem","RouteConfig","component","basePath","FaBars","FaRegMap","BsPersonFill","GiBirdClaw","AiFillRobot","AiOutlineFileText","FaCog","App","query","appMinW","appMaxW","persistedStorage","theme","extendTheme","components","Drawer","variants","alwaysOpen","dialog","dialogContainer","ReactDOM","StrictMode","basename","getElementById"],"mappings":"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","file":"static/js/main.6b3ddd27.chunk.js","sourcesContent":["import { useLocation } from 'react-router-dom';\n\nexport enum Dice {\n  d100 = 100,\n  d20 = 20,\n  d12 = 12,\n  d10 = 10,\n  d8 = 8,\n  d6 = 6,\n  d4 = 4,\n  d2 = 2\n}\n\nexport const rollDice = (max: number): number => Math.ceil(Math.random() * max);\n\nexport const rollAdvantage = (max: number): number => Math.max(rollDice(max), rollDice(max));\n\nexport const rollDisadvantage = (max: number): number => Math.min(rollDice(max), rollDice(max));\n\nexport function useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\ninterface CampaignState {\n  currentTurnId: string;\n  campaignTitle: string,\n  notes: {}\n}\n\nconst initialState: CampaignState = {\n  currentTurnId: '',\n  campaignTitle: 'D&D Tracker',\n  notes: {},\n};\n\nexport const campaignSlice = createSlice({\n  name: 'campaign',\n  initialState,\n  reducers: {\n    setTurn: (state, action: PayloadAction<string>) => {\n      const modState = state;\n      modState.currentTurnId = action.payload;\n    },\n    setCampaignTitle: (state, action: PayloadAction<string>) => {\n      const modState = state;\n      modState.campaignTitle = action.payload;\n    },\n    setCampaignNotes: (state, action: PayloadAction<{}>) => {\n      const modState = state;\n      modState.notes = action.payload;\n    },\n  },\n});\n\nexport const { setTurn, setCampaignTitle, setCampaignNotes } = campaignSlice.actions;\n\nexport default campaignSlice.reducer;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { v4 } from 'uuid';\nimport * as Yup from 'yup';\nimport { Dice, rollDice } from './util';\nimport { NPC } from '../Characters/NPC.interfaces';\n\nexport interface NPCState {\n  npcs: NPC[];\n}\n\nconst initialState: NPCState = {\n  npcs: [],\n};\n\nexport const npcSlice = createSlice({\n  name: 'npc',\n  initialState,\n  reducers: {\n    addNPC: (state, action: PayloadAction<Omit<NPC, 'id'>>) => {\n      const id = v4();\n      state.npcs.push({\n        ...action.payload,\n        id,\n      });\n    },\n    removeNPC: (state, action: PayloadAction<string>) => {\n      const index = state.npcs.findIndex((v) => v.id === action.payload);\n\n      if (index >= 0) {\n        state.npcs.splice(index, 1);\n      } else {\n        console.warn(`Invalid NPC ${action.payload}`);\n      }\n    },\n    refreshNPCs: (state, action: PayloadAction<NPC[] | undefined>) => {\n      if (action.payload) {\n        state.npcs.splice(0, state.npcs.length, ...action.payload);\n      }\n    },\n    modifyNPC: (state, action: PayloadAction<Partial<NPC>>) => {\n      const foundNPC = state.npcs.findIndex((i) => i.id === action.payload.id);\n\n      if (foundNPC >= 0) {\n        const { npcs } = state;\n        npcs[foundNPC] = {\n          ...state.npcs[foundNPC],\n          ...action.payload,\n        };\n      }\n    },\n    rollAllNPCInitiative: (state) => {\n      state.npcs.forEach((i) => {\n        const npc = i;\n        npc.initiative = rollDice(Dice.d20);\n      });\n    },\n  },\n});\n\nexport const modifyNPCValidationSchema = Yup.object({\n  name: Yup.string(),\n  currentHP: Yup.number().integer().required(),\n  maxHP: Yup.number().integer().required(),\n  tempHP: Yup.number().integer().default(0).required(),\n  armourClass: Yup.number().integer().required(),\n  initiative: Yup.number().integer().min(1).max(20)\n    .required(),\n  initiativeMod: Yup.number().integer().required(),\n  notes: Yup.string(),\n  externalNotes: Yup.array().of(Yup.object({\n    type: Yup.string(),\n    url: Yup.string().url(),\n    label: Yup.string(),\n  })),\n  conditions: Yup.array().of(Yup.string()).required(),\n  displayOnTurnOrder: Yup.boolean().required(),\n  isHostile: Yup.boolean().required(),\n  isFriendly: Yup.boolean().required(),\n  isBoss: Yup.boolean().required(),\n  showHealth: Yup.boolean().required(),\n  showInitiative: Yup.boolean().required(),\n  showAC: Yup.boolean().required(),\n  showName: Yup.boolean().required(),\n});\n\nexport const {\n  addNPC, removeNPC, refreshNPCs, rollAllNPCInitiative, modifyNPC,\n} = npcSlice.actions;\n\nexport default npcSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { v4 } from 'uuid';\nimport * as Yup from 'yup';\nimport { Player } from '../Characters/Player.interfaces';\nimport { Dice, rollDice } from './util';\n\nexport interface PlayerState {\n  players: Player[];\n}\n\nconst initialState: PlayerState = {\n  players: [],\n};\n\nexport const playerSlice = createSlice({\n  name: 'player',\n  initialState,\n  reducers: {\n    addPlayer: (state, action: PayloadAction<Omit<Player, 'id'>>) => {\n      const id = v4();\n      state.players.push({\n        ...action.payload,\n        id,\n      });\n    },\n    removePlayer: (state, action: PayloadAction<string>) => {\n      const index = state.players.findIndex((v) => v.id === action.payload);\n\n      if (index >= 0) {\n        state.players.splice(index, 1);\n      } else {\n        console.warn(`Invalid player ${action.payload}`);\n      }\n    },\n    refreshPlayers: (state, action: PayloadAction<Player[] | undefined>) => {\n      if (action.payload) {\n        state.players.splice(0, state.players.length, ...action.payload);\n      }\n    },\n    modifyPlayer: (state, action: PayloadAction<Partial<Player>>) => {\n      const foundPlayer = state.players.findIndex((i) => i.id === action.payload.id);\n\n      if (foundPlayer >= 0) {\n        const { players } = state;\n        const modPlayer = action.payload;\n        const modConditions = action.payload.conditions || players[foundPlayer].conditions;\n        if (!modConditions.map((i) => i.toLowerCase()).includes('dying')) {\n          modPlayer.passedDeathSaves = 0;\n          modPlayer.failedDeathSaves = 0;\n        }\n        players[foundPlayer] = {\n          ...state.players[foundPlayer],\n          ...action.payload,\n        };\n      }\n    },\n    rollAllPlayerInitiative: (state) => {\n      state.players.forEach((i) => {\n        const player = i;\n        player.initiative = rollDice(Dice.d20);\n      });\n    },\n  },\n});\n\nexport const modifyPlayerValidationSchema = Yup.object({\n  name: Yup.string(),\n  currentHP: Yup.number().integer().required(),\n  maxHP: Yup.number().integer().required(),\n  tempHP: Yup.number().integer().default(0).required(),\n  armourClass: Yup.number().integer().required(),\n  initiative: Yup.number().integer().min(1).max(20)\n    .required(),\n  initiativeMod: Yup.number().integer().required(),\n  notes: Yup.string(),\n  externalNotes: Yup.array().of(Yup.object({\n    type: Yup.string(),\n    url: Yup.string().url(),\n    label: Yup.string(),\n  })),\n  conditions: Yup.array().of(Yup.string()).required(),\n  displayOnTurnOrder: Yup.boolean().required(),\n});\n\nexport const {\n  addPlayer, removePlayer, refreshPlayers, rollAllPlayerInitiative, modifyPlayer,\n} = playerSlice.actions;\n\nexport default playerSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport playerReducer from './playerSlice';\nimport campaignReducer from './campaignSlice';\nimport npcReducer from './npcSlice';\n\nexport const STORE_KEY = 'persistantState';\nexport const APP_VERSION = '0.0.3';\n\nexport const loadFromLocalStorage = () => {\n  try {\n    const serialisedState = localStorage.getItem(`persistantState_${APP_VERSION}`);\n    if (serialisedState === null) return undefined;\n    return JSON.parse(serialisedState);\n  } catch (e) {\n    console.warn(e);\n    return undefined;\n  }\n};\n\nexport const store = configureStore({\n  reducer: {\n    players: playerReducer,\n    campaign: campaignReducer,\n    npcs: npcReducer,\n  },\n  preloadedState: loadFromLocalStorage(),\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nfunction saveToLocalStorage(state: RootState) {\n  try {\n    const serialisedState = JSON.stringify(state);\n    localStorage.setItem(`persistantState_${APP_VERSION}`, serialisedState);\n  } catch (e) {\n    console.warn(e);\n  }\n}\n\nstore.subscribe(() => {\n  if (document.hasFocus()) {\n    saveToLocalStorage(store.getState());\n  }\n});\n","import {\n  Flex, Heading, IconButton, Icon, Input,\n} from '@chakra-ui/react';\nimport React, { useState } from 'react';\nimport { GoPencil } from 'react-icons/go';\nimport { ImRedo } from 'react-icons/im';\nimport { IoMdSave } from 'react-icons/io';\nimport { setCampaignTitle } from '../common/campaignSlice';\nimport { useAppSelector, useAppDispatch } from '../common/hooks';\n\nexport const CampaignTitle = () => {\n  const campaignTitle = useAppSelector((state) => state.campaign.campaignTitle);\n  const dispatch = useAppDispatch();\n  const setTitleAction = (ct: string) => dispatch(setCampaignTitle(ct));\n  const [editableCampaignTitle, setEditableCampaignTitle] = useState(campaignTitle);\n  const [editTitleEnabled, setEditTitleEnabled] = useState(false);\n\n  const editTitleRef = React.useRef<HTMLInputElement>(null);\n  return (\n    <Flex\n      mb={4}\n      width=\"100%\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n    >\n      {\n        !editTitleEnabled && (\n          <Flex\n            justifyContent=\"center\"\n            alignItems=\"center\"\n          >\n            <Heading>{campaignTitle}</Heading>\n            <IconButton\n              ml={2}\n              aria-label=\"Edit Title\"\n              icon={<Icon as={GoPencil} />}\n              onClick={() => {\n                setEditTitleEnabled(true);\n                setTimeout(() => {\n                  editTitleRef.current?.focus();\n                }, 100);\n              }}\n            />\n          </Flex>\n        )\n      }\n      {\n        editTitleEnabled && (\n          <Flex\n            justifyContent=\"center\"\n            alignItems=\"center\"\n          >\n            <Input\n              ref={editTitleRef}\n              onChange={(e) => setEditableCampaignTitle(e.target.value)}\n              onKeyPress={(e) => {\n                if (e.code === 'Enter') {\n                  setEditTitleEnabled(false);\n                  setTitleAction(editableCampaignTitle);\n                }\n              }}\n            />\n            <IconButton\n              ml={2}\n              aria-label=\"Save\"\n              icon={<Icon as={IoMdSave} />}\n              onClick={() => {\n                setEditTitleEnabled(false);\n                setTitleAction(editableCampaignTitle);\n              }}\n            />\n            <IconButton\n              ml={2}\n              aria-label=\"Reset\"\n              icon={<Icon as={ImRedo} />}\n              onClick={() => setEditTitleEnabled(false)}\n            />\n          </Flex>\n        )\n      }\n    </Flex>\n  );\n};\n","import { useHistory, useRouteMatch } from 'react-router-dom';\nimport { Flex, Text, Icon } from '@chakra-ui/react';\nimport React from 'react';\nimport { IconType } from 'react-icons';\n\ninterface MenuItemLinkProps {\n  to: string;\n  label: string;\n  activeOnlyWhenExact?: boolean;\n  icon?: IconType;\n}\n\nexport const MenuItemLink = ({\n  to, label, activeOnlyWhenExact, icon,\n}: MenuItemLinkProps) => {\n  const history = useHistory();\n  const match = useRouteMatch({\n    path: to,\n    exact: activeOnlyWhenExact,\n  });\n\n  function handleClick() {\n    history.push(to);\n  }\n\n  return (\n    <Flex\n      cursor=\"pointer\"\n      width=\"100%\"\n      textAlign=\"left\"\n      borderRadius={10}\n      backgroundColor={match ? 'gray' : undefined}\n      p={2}\n      fontWeight=\"bold\"\n      color={match ? 'white' : 'black'}\n      onClick={handleClick}\n      alignItems=\"center\"\n    >\n      <Flex width=\"10%\">\n        {icon && <Icon as={icon} />}\n      </Flex>\n      <Text>{label}</Text>\n    </Flex>\n  );\n};\n","import {\n  Box, Drawer, DrawerBody, DrawerCloseButton,\n  DrawerContent, DrawerFooter, DrawerHeader, DrawerOverlay,\n  Icon, useDisclosure, VStack,\n} from '@chakra-ui/react';\nimport React, { useEffect } from 'react';\nimport { GiHamburgerMenu } from 'react-icons/gi';\nimport { MenuItemLink } from './MenuItemLink';\nimport { Route } from './RouteConfig';\n\ninterface SidebarProps {\n  routes: Route[];\n}\n\nfunction useWindowSize() {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = React.useState<{\n    width: number;\n    height: number;\n  }>({\n    width: 0,\n    height: 0,\n  });\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n    // Add event listener\n    window.addEventListener('resize', handleResize);\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n    // Remove event listener on cleanup\n    return () => window.removeEventListener('resize', handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n  return windowSize;\n}\n\nexport const Sidebar = ({ routes }: SidebarProps) => {\n  const size = useWindowSize();\n  const minWidth = 1400;\n  const isLargerThanMinWidth = size.width > minWidth;\n\n  const { isOpen, onOpen, onClose } = useDisclosure({\n    defaultIsOpen: isLargerThanMinWidth,\n  });\n\n  return (\n    <>\n      <div className=\"drawer-button\">\n        <Box pt={3} pb={3} pl={4} pr={4} cursor=\"pointer\" onClick={onOpen}>\n          <Icon as={GiHamburgerMenu} />\n        </Box>\n      </div>\n      <Drawer\n        isOpen={isLargerThanMinWidth || isOpen}\n        placement=\"left\"\n        onClose={() => {\n          if (!isLargerThanMinWidth) {\n            onClose();\n          }\n        }}\n        blockScrollOnMount={!isLargerThanMinWidth}\n        variant={isLargerThanMinWidth ? 'alwaysOpen' : undefined}\n        trapFocus={!isLargerThanMinWidth}\n      >\n        {!isLargerThanMinWidth && <DrawerOverlay />}\n        <DrawerContent>\n          {!isLargerThanMinWidth && <DrawerCloseButton />}\n          <DrawerHeader>Menu</DrawerHeader>\n\n          <DrawerBody>\n            <VStack spacing={0}>\n              {routes.filter((i) => !i.disabled).map(({\n                pageTitle, path, exact, icon,\n              }) => (\n                <MenuItemLink\n                  to={path}\n                  label={pageTitle}\n                  activeOnlyWhenExact={exact}\n                  key={pageTitle}\n                  icon={icon}\n                />\n              ))}\n            </VStack>\n          </DrawerBody>\n\n          <DrawerFooter />\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n};\n","import {\n  FormControl as ChakraFormControl,\n  FormControlProps,\n  FormErrorMessage,\n  FormHelperText,\n  FormLabel,\n} from '@chakra-ui/react';\nimport { useField } from 'formik';\nimport React, { FC } from 'react';\n\nexport interface BaseProps extends FormControlProps {\n  name: string;\n  label?: string;\n  helperText?: string;\n  hideError?: boolean;\n}\n\nexport const FormControl: FC<BaseProps> = (props: BaseProps) => {\n  const {\n    children, name, label, helperText, hideError, ...rest\n  } = props;\n  const [, { error, touched }] = useField(name);\n\n  return (\n    <ChakraFormControl isInvalid={!!error && touched} {...rest}>\n      {label && <FormLabel htmlFor={name}>{label}</FormLabel>}\n      {children}\n      {!hideError && error && <FormErrorMessage>{error}</FormErrorMessage>}\n      {helperText && <FormHelperText>{helperText}</FormHelperText>}\n    </ChakraFormControl>\n  );\n};\n\nexport default FormControl;\n","import { Input, InputProps } from '@chakra-ui/react';\nimport { useField } from 'formik';\nimport React, { FC } from 'react';\nimport { BaseProps, FormControl } from './FormControl';\n\nexport type InputControlProps = BaseProps & { inputProps?: InputProps };\n\nexport const InputControl: FC<InputControlProps> = (\n  props: InputControlProps,\n) => {\n  const {\n    name, label, inputProps, ...rest\n  } = props;\n  const [field] = useField(name);\n\n  return (\n    <FormControl name={name} label={label} {...rest}>\n      <Input {...field} id={name} {...inputProps} />\n    </FormControl>\n  );\n};\n\nexport default InputControl;\n","import {\n  NumberDecrementStepper,\n  NumberIncrementStepper,\n  NumberInput,\n  NumberInputField,\n  NumberInputProps,\n  NumberInputStepper,\n} from '@chakra-ui/react';\nimport { useField, useFormikContext } from 'formik';\nimport React, { FC, ReactNode } from 'react';\nimport { BaseProps, FormControl } from './FormControl';\n\nexport type NumberInputControlProps = BaseProps & {\n  numberInputProps?: NumberInputProps;\n  showStepper?: boolean;\n  children?: ReactNode;\n  fieldId?: string;\n};\n\nexport const NumberInputControl: FC<NumberInputControlProps> = (\n  props: NumberInputControlProps,\n) => {\n  const {\n    name,\n    label,\n    showStepper = true,\n    children,\n    numberInputProps,\n    fieldId,\n    ...rest\n  } = props;\n  const [field, { error, touched }] = useField(name);\n  const { setFieldValue } = useFormikContext();\n\n  const $setFieldValue = (n: string) => (value: unknown) => setFieldValue(n, Number(value));\n\n  return (\n    <FormControl name={name} label={label} {...rest}>\n      <NumberInput\n        {...field}\n        id={name}\n        onChange={$setFieldValue(name)}\n        isInvalid={!!error && touched}\n        {...numberInputProps}\n      >\n        <NumberInputField name={name} id={fieldId} />\n        {showStepper && (\n          <NumberInputStepper>\n            <NumberIncrementStepper />\n            <NumberDecrementStepper />\n          </NumberInputStepper>\n        )}\n        {children}\n      </NumberInput>\n    </FormControl>\n  );\n};\n\nexport default NumberInputControl;\n","import {\n  Box, Flex, Switch, SwitchProps,\n} from '@chakra-ui/react';\nimport { css } from '@emotion/react';\nimport { useField } from 'formik';\nimport React, { FC } from 'react';\nimport { BaseProps, FormControl } from './FormControl';\n\nexport type SwitchControlProps = BaseProps & { switchProps?: SwitchProps };\n\nexport const SwitchControl: FC<SwitchControlProps> = (\n  props: SwitchControlProps,\n) => {\n  const {\n    name, label, switchProps, ...rest\n  } = props;\n  const [field, { error, touched }] = useField(name);\n\n  return (\n    <Box\n      css={css`\n        .chakra-form__label {\n          margin-bottom: 0;\n        }\n        .chakra-switch {\n          display: flex;\n          align-items: center;\n          margin-right: 0.75rem;\n        }\n        .chakra-form__error-message {\n          margin-top: 0;\n        }\n      `}\n    >\n      <FormControl\n        name={name}\n        label={label}\n        as={Flex}\n        alignItems=\"center\"\n        {...rest}\n      >\n        <Switch\n          {...field}\n          id={name}\n          isInvalid={!!error && touched}\n          isChecked={field.value}\n          {...switchProps}\n        />\n      </FormControl>\n    </Box>\n  );\n};\n\nexport default SwitchControl;\n","import { AddIcon } from '@chakra-ui/icons';\nimport {\n  Button, HStack, Icon, FormControl, FormLabel, Spacer, SimpleGrid, VStack,\n  Text,\n} from '@chakra-ui/react';\nimport { Form, Formik, useFormikContext } from 'formik';\nimport React from 'react';\nimport { GiDiceTwentyFacesTwenty } from 'react-icons/gi';\nimport * as Yup from 'yup';\nimport { InputControl, NumberInputControl, SwitchControl } from '../common/formik-chakra';\nimport { useAppDispatch } from '../common/hooks';\nimport { addNPC } from '../common/npcSlice';\nimport { Dice, rollDice } from '../common/util';\nimport { NPC } from './NPC.interfaces';\n\ninterface NPCsProps {\n  showHostile?: boolean;\n  showFriendly?: boolean;\n}\n\ntype AddFormFields = Array<\n    [string, keyof NPC, typeof InputControl | typeof NumberInputControl]\n  >;\n\nfunction AddNPCFlags() {\n  const { setFieldValue, values } = useFormikContext<NPC & { rollInitiativeOnCreate: boolean }>();\n  return (\n    <VStack\n      mt={4}\n      mb={4}\n    >\n      <SimpleGrid\n        mt={4}\n        mb={4}\n        fontSize=\"sm\"\n        templateColumns=\"repeat(3, 1fr)\"\n        spacing={4}\n        width=\"100%\"\n      >\n        {\n          ([\n            ['Show on Turn Order', 'displayOnTurnOrder'],\n            ['Show name', 'showName'],\n            ['Show health', 'showHealth'],\n            ['Show AC', 'showAC'],\n            ['Show initiative', 'showInitiative'],\n            ['Roll initiative on creation', 'rollInitiativeOnCreate'],\n          ]).map(([displayString, key]) => (\n            <FormControl\n              display=\"flex\"\n              alignItems=\"center\"\n              key={key}\n            >\n              <FormLabel mb=\"0\" fontSize=\"xs\">\n                {displayString}\n              </FormLabel>\n              <Spacer />\n              <SwitchControl name={key} />\n            </FormControl>\n          ))\n        }\n      </SimpleGrid>\n      {\n        !values.rollInitiativeOnCreate\n        && (\n          <HStack\n            width=\"100%\"\n          >\n            <Button\n              width=\"100%\"\n              onClick={() => setFieldValue('initiative', rollDice(Dice.d20))}\n              variant=\"outline\"\n              rightIcon={<Icon as={GiDiceTwentyFacesTwenty} />}\n            >\n              Roll Initiative\n            </Button>\n            <HStack>\n              <Text>Initiative</Text>\n              <NumberInputControl hideError name=\"initiative\" width=\"8em\" />\n            </HStack>\n          </HStack>\n        )\n      }\n    </VStack>\n  );\n}\n\nexport function AddNPCForm({ showFriendly, showHostile }: NPCsProps) {\n  const dispatch = useAppDispatch();\n\n  const addNPCValidationSchema = Yup.object({\n    name: Yup.string().required().label('Name'),\n    maxHP: Yup.number().integer().moreThan(0).required()\n      .label('Maximum HP'),\n    initiativeMod: Yup.number().integer().required().label('Initiative Modifier'),\n    armourClass: Yup.number().integer().moreThan(0).default(10)\n      .label('Armour Class'),\n    initiative: Yup.number().integer().min(1).max(20),\n\n    rollInitiativeOnCreate: Yup.boolean(),\n\n    displayOnTurnOrder: Yup.boolean(),\n    showHealth: Yup.boolean(),\n    showInitiative: Yup.boolean(),\n    showAC: Yup.boolean(),\n    showName: Yup.boolean(),\n  });\n\n  const addFormFields: AddFormFields = [\n    ['NPC Name', 'name', InputControl],\n    ['Maximum HP', 'maxHP', NumberInputControl],\n    ['Initiative Modifier', 'initiativeMod', NumberInputControl],\n    ['Armour Class', 'armourClass', NumberInputControl],\n  ];\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        maxHP: 0,\n        initiativeMod: 0,\n        armourClass: 0,\n        initiative: 1,\n\n        rollInitiativeOnCreate: true,\n\n        displayOnTurnOrder: true,\n        showHealth: false,\n        showInitiative: false,\n        showAC: false,\n        showName: false,\n      }}\n      validationSchema={addNPCValidationSchema}\n      onSubmit={\n          (values, actions) => {\n            const initiativeValue = values.rollInitiativeOnCreate\n              ? rollDice(Dice.d20) : values.initiative;\n            actions.setFieldValue('initiative', initiativeValue);\n            dispatch(addNPC({\n              name: values.name,\n              maxHP: values.maxHP,\n              currentHP: values.maxHP,\n              tempHP: 0,\n              initiative: initiativeValue,\n              initiativeMod: values.initiativeMod,\n              armourClass: values.armourClass,\n              conditions: [],\n              displayOnTurnOrder: values.displayOnTurnOrder,\n              notes: '',\n              externalNotes: [],\n              isFriendly: showFriendly || false,\n              isHostile: showHostile || false,\n              isBoss: false,\n              showHealth: values.showHealth,\n              showInitiative: values.showInitiative,\n              showAC: values.showAC,\n              showName: values.showName,\n            }));\n          }\n        }\n    >\n      <Form>\n        <HStack\n          mt={4}\n          mb={4}\n        >\n          {\n              addFormFields.map(([label, key, IC]) => (\n                <IC\n                  hideError\n                  name={key}\n                  label={label}\n                  key={key}\n                />\n              ))\n            }\n        </HStack>\n        <AddNPCFlags />\n        <Button\n          mb={4}\n          width=\"100%\"\n          type=\"submit\"\n          variant=\"solid\"\n          colorScheme=\"green\"\n          rightIcon={<Icon as={AddIcon} />}\n        >\n          Add\n          {' '}\n          {showHostile ? 'Enemy' : 'NPC'}\n        </Button>\n      </Form>\n    </Formik>\n  );\n}\n","import { Textarea, TextareaProps } from '@chakra-ui/react';\nimport { useField } from 'formik';\nimport React, { FC } from 'react';\nimport { BaseProps, FormControl } from './FormControl';\n\nexport type TextareaControlProps = BaseProps & {\n  textareaProps?: TextareaProps;\n};\n\nexport const TextareaControl: FC<TextareaControlProps> = (\n  props: TextareaControlProps,\n) => {\n  const {\n    name, label, textareaProps, ...rest\n  } = props;\n  const [field] = useField(name);\n\n  return (\n    <FormControl name={name} label={label} {...rest}>\n      <Textarea {...field} id={name} {...textareaProps} />\n    </FormControl>\n  );\n};\n\nexport default TextareaControl;\n","import { AddIcon } from '@chakra-ui/icons';\nimport {\n  Text, Box, Flex, Divider, Tag, TagLabel, TagCloseButton, Input, TagRightIcon, InputProps,\n} from '@chakra-ui/react';\nimport { useFormikContext, FieldArray } from 'formik';\nimport React from 'react';\nimport { Character } from './Character.interfaces';\n\nexport const ModifyCharacterConditionsField = ({ character }: { character: Character }) => {\n  const context = useFormikContext<Character>();\n  return (\n    <FieldArray\n      name=\"conditions\"\n      render={(arrayHelpers) => {\n        const addCondition = () => {\n          const element = document.querySelector(`#tag-input-${character.id}`) as InputProps;\n          if (element?.value) {\n            const tagInput = element.value.toString();\n            element.value = '';\n            arrayHelpers.push(tagInput);\n          }\n        };\n\n        return (\n          <Box p={2} border=\"1px solid #00000066\" borderRadius={8} mb={2}>\n            <Flex justifyContent=\"center\"><Text fontWeight=\"bold\">Conditions</Text></Flex>\n            <Divider mt={1} mb={1} opacity=\"0.3\" />\n            {context.values.conditions.map((condition, idx) => (\n              <Tag\n                variant=\"solid\"\n                borderRadius=\"full\"\n                size=\"lg\"\n                m={1}\n                key={condition}\n              >\n                <TagLabel>{condition}</TagLabel>\n                <TagCloseButton onClick={() => arrayHelpers.remove(idx)} />\n              </Tag>\n            ))}\n            <Tag\n              variant=\"outline\"\n              borderRadius=\"full\"\n              size=\"lg\"\n              m={1}\n            >\n              <Input\n                size=\"xs\"\n                id={`tag-input-${character.id}`}\n                onKeyPress={(e) => {\n                  if (e.code === 'Enter') {\n                    addCondition();\n                  }\n                }}\n              />\n              <TagRightIcon\n                as={AddIcon}\n                cursor=\"pointer\"\n                onClick={() => {\n                  addCondition();\n                }}\n              />\n            </Tag>\n          </Box>\n        );\n      }}\n    />\n  );\n};\n","import { Box, HStack, Text } from '@chakra-ui/react';\nimport { useFormikContext } from 'formik';\nimport React from 'react';\nimport { NumberInputControl } from '../common/formik-chakra';\nimport { Character } from './Character.interfaces';\n\nexport const ModifyCurrentHPInput = ({ character }: { character: Character }) => {\n  const context = useFormikContext<Character>();\n  return (\n    <>\n      <Box>\n        <HStack>\n          <Text fontWeight=\"bold\">THP </Text>\n          <NumberInputControl\n            hideError\n            name=\"tempHP\"\n            width=\"6em\"\n            onKeyPress={(e) => e.code === 'Enter' && context.submitForm()}\n          />\n        </HStack>\n      </Box>\n      <Box>\n        <HStack>\n          <Text fontWeight=\"bold\">HP </Text>\n          <NumberInputControl\n            hideError\n            name=\"currentHP\"\n            width=\"6em\"\n            fieldId={`currentHP-${character.id}`}\n            onKeyPress={(e) => e.code === 'Enter' && context.submitForm()}\n          />\n          <Text>\n            /\n            {' '}\n            {character.maxHP}\n          </Text>\n        </HStack>\n      </Box>\n    </>\n  );\n};\n","import { AddIcon, CloseIcon } from '@chakra-ui/icons';\nimport {\n  AccordionButton, AccordionIcon, AccordionItem, Flex,\n  AccordionPanel, Box, HStack, Icon, IconButton, Input, VStack, Text, Spacer, InputProps,\n} from '@chakra-ui/react';\nimport { FieldArray, useFormikContext } from 'formik';\nimport React from 'react';\nimport { AiOutlineLink } from 'react-icons/ai';\nimport { Character, ExternalNote } from './Character.interfaces';\n\nexport const ModifyExternalNoteReferences = ({ character }: { character: Character }) => {\n  const context = useFormikContext<Character>();\n  const errors = context?.errors;\n  return (\n    <AccordionItem>\n      <AccordionButton>\n        <Box flex=\"1\" textAlign=\"left\">\n          <strong>External Notes</strong>\n        </Box>\n        <AccordionIcon />\n      </AccordionButton>\n      <AccordionPanel>\n        <FieldArray\n          name=\"externalNotes\"\n          render={(arrayHelpers) => {\n            const linkLabelId = `link-label-${character.id}`;\n            const linkUrlId = `link-url-${character.id}`;\n            const addNote = () => {\n              const linkLabelEle = document.querySelector(`#${linkLabelId}`) as InputProps;\n              const linkUrlEle = document.querySelector(`#${linkUrlId}`) as InputProps;\n\n              if (linkLabelEle?.value && linkUrlEle?.value) {\n                const labelInput = linkLabelEle.value.toString();\n                const urlInput = linkUrlEle.value.toString();\n                linkLabelEle.value = '';\n                linkUrlEle.value = '';\n\n                const value: ExternalNote = {\n                  type: 'link',\n                  label: labelInput,\n                  url: urlInput,\n                };\n\n                arrayHelpers.push(value);\n              }\n            };\n            return (\n              <VStack>\n                {\n                context.values.externalNotes.map((note, idx) => (\n                  <Flex\n                    alignItems=\"center\"\n                    width=\"100%\"\n                    border=\"0.2em solid #0000FF22\"\n                    borderRadius={6}\n                    cursor=\"pointer\"\n                    _hover={{\n                      border: '0.2em solid #0000FF',\n                    }}\n                    transition=\"0.2s\"\n                    key={note.label + note.url}\n                  >\n                    <Box\n                      p={1.5}\n                      onClick={() => window.open(note.url, '_blank')}\n                    >\n                      <Icon as={AiOutlineLink} w={6} h={6} color=\"blue\" />\n                    </Box>\n                    <Text\n                      color=\"blue\"\n                      textOverflow=\"ellipsis\"\n                      overflow=\"hidden\"\n                      whiteSpace=\"nowrap\"\n                      onClick={() => window.open(note.url, '_blank')}\n                      width=\"100%\"\n                    >\n                      {note.label}\n                      {' '}\n                      (\n                      {note.url}\n                      )\n                    </Text>\n                    <Spacer />\n                    <IconButton\n                      ml={1}\n                      aria-label=\"Save\"\n                      icon={<Icon as={CloseIcon} />}\n                      color=\"red\"\n                      variant=\"ghost\"\n                      onClick={() => arrayHelpers.remove(idx)}\n                    />\n                  </Flex>\n                ))\n              }\n                <HStack width=\"100%\">\n                  <Input\n                    placeholder=\"Link Label\"\n                    id={linkLabelId}\n                  />\n                  <Input\n                    placeholder=\"URL\"\n                    id={linkUrlId}\n                  />\n                  <IconButton\n                    ml={2}\n                    aria-label=\"Save\"\n                    icon={<Icon as={AddIcon} />}\n                    colorScheme=\"blue\"\n                    variant=\"outline\"\n                    onClick={() => addNote()}\n                  />\n                </HStack>\n                <Text\n                  width=\"100%\"\n                  color=\"red\"\n                  hidden={!(!!errors.externalNotes && errors.externalNotes.length > 0)}\n                >\n                  There are errors with the links inserted.\n                  Make sure the URLs are of a valid format.\n                </Text>\n              </VStack>\n            );\n          }}\n        />\n      </AccordionPanel>\n    </AccordionItem>\n  );\n};\n","import { Character } from './Character.interfaces';\n\nexport const resetManualFormFields = (character: Character) => {\n  const linkLabelId = `#link-label-${character.id}`;\n  const linkUrlId = `#link-url-${character.id}`;\n  const tagInputId = `#tag-input-${character.id}`;\n  const ids = [\n    linkLabelId,\n    linkUrlId,\n    tagInputId,\n  ];\n  ids.forEach((i) => {\n    const element = (document.querySelector(i) as HTMLInputElement);\n    if (element) {\n      element.value = '';\n    }\n  });\n};\n","import {\n  Accordion, AccordionButton, AccordionIcon, AccordionItem,\n  AccordionPanel, Box, Button, FormControl, FormLabel, Grid,\n  GridItem, HStack, Icon, SimpleGrid, Spacer, Text, Tooltip, VStack,\n} from '@chakra-ui/react';\nimport { Form, Formik, useFormikContext } from 'formik';\nimport { AiFillDelete } from 'react-icons/ai';\nimport { GiDiceTwentyFacesTwenty } from 'react-icons/gi';\nimport { ImRedo } from 'react-icons/im';\nimport { IoMdSave } from 'react-icons/io';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { BsFillEyeFill, BsFillEyeSlashFill } from 'react-icons/bs';\nimport { NumberInputControl, SwitchControl } from '../common/formik-chakra';\nimport TextareaControl from '../common/formik-chakra/TextareaControl';\nimport { useAppDispatch } from '../common/hooks';\nimport { modifyNPC, removeNPC, modifyNPCValidationSchema } from '../common/npcSlice';\nimport { Dice, rollDice } from '../common/util';\nimport { ModifyCharacterConditionsField } from './ModifyCharacterConditionsField';\nimport { NPC } from './NPC.interfaces';\nimport { characterTypeColours } from '../App';\nimport { ModifyCurrentHPInput } from './ModifyCurrentHPInput';\nimport { ModifyExternalNoteReferences } from './ModifyExternalNotes';\nimport { resetManualFormFields } from './characterFormUtils';\n\ninterface ModifyNPCFormProps {\n  npc: NPC;\n}\n\nexport const ModifyNPCForm = ({ npc }: ModifyNPCFormProps) => {\n  const dispatch = useAppDispatch();\n\n  const params = useParams<{id: string}>();\n\n  const modifyNPCAction = (n: NPC) => dispatch(modifyNPC(n));\n  const removeNPCAction = (id: string) => dispatch(removeNPC(id));\n\n  let formColour = characterTypeColours.neutral;\n\n  if (npc.isHostile) {\n    formColour = characterTypeColours.enemy;\n  } else if (npc.isFriendly) {\n    formColour = characterTypeColours.friendly;\n  }\n\n  const NPCModifyStatFields = () => {\n    const editStatFields: Array<[string, string]> = [\n      ['AC: ', 'armourClass'],\n      ['Initiative: ', 'initiative'],\n      ['Init. Mod: ', 'initiativeMod'],\n      ['Max HP: ', 'maxHP'],\n    ];\n\n    const { setFieldValue } = useFormikContext<NPC>();\n    return (\n      <AccordionItem>\n        <AccordionButton>\n          <Box flex=\"1\" textAlign=\"left\">\n            <strong>Edit Stats</strong>\n          </Box>\n          <AccordionIcon />\n        </AccordionButton>\n        <AccordionPanel>\n          <Grid\n            fontSize=\"sm\"\n            templateColumns=\"repeat(4, 1fr)\"\n            templateRows=\"repeat(2, 1fr)\"\n            gap={4}\n          >\n            <GridItem\n              colSpan={4}\n            >\n              <Button\n                width=\"100%\"\n                onClick={() => setFieldValue('initiative', rollDice(Dice.d20))}\n                variant=\"outline\"\n                rightIcon={<Icon as={GiDiceTwentyFacesTwenty} />}\n              >\n                Roll Initiative\n              </Button>\n            </GridItem>\n            {\n              editStatFields.map(([displayString, value]) => (\n                <GridItem key={value}>\n                  <HStack>\n                    <Text>{displayString}</Text>\n                    <NumberInputControl hideError name={value} width=\"8em\" />\n                  </HStack>\n                </GridItem>\n              ))\n            }\n          </Grid>\n        </AccordionPanel>\n      </AccordionItem>\n    );\n  };\n\n  const NPCModifyActions = ({ npc: _npc }: { npc: NPC }) => {\n    const context = useFormikContext<NPC>();\n\n    return (\n      <HStack mt={4}>\n        <Tooltip label=\"Save\" placement=\"top\">\n          <Button\n            width=\"100%\"\n            hidden={!context.dirty}\n            variant=\"solid\"\n            colorScheme=\"green\"\n            onClick={() => context.submitForm()}\n          >\n            <Icon as={IoMdSave} />\n          </Button>\n        </Tooltip>\n        <Tooltip label=\"Reset\" placement=\"top\">\n          <Button\n            width=\"100%\"\n            type=\"reset\"\n            hidden={!context.dirty}\n            variant=\"solid\"\n          >\n            <Icon as={ImRedo} />\n          </Button>\n        </Tooltip>\n        <Tooltip label=\"Delete\" placement=\"top\">\n          <Button\n            width=\"100%\"\n            onClick={() => removeNPCAction(_npc.id)}\n            variant=\"solid\"\n            colorScheme=\"red\"\n          >\n            <Icon as={AiFillDelete} />\n          </Button>\n        </Tooltip>\n      </HStack>\n    );\n  };\n\n  const toggleDisplay = () => {\n    modifyNPCAction({\n      ...npc,\n      displayOnTurnOrder: !npc.displayOnTurnOrder,\n    });\n  };\n\n  const NPCFormHeader = () => (\n    <>\n      <Tooltip label={`${npc.displayOnTurnOrder ? 'Hide' : 'Show'} in turn order`} placement=\"top\">\n        <Button\n          variant=\"outline\"\n          color={npc.displayOnTurnOrder ? 'black' : 'gray.400'}\n          onClick={toggleDisplay}\n        >\n          <Icon as={npc.displayOnTurnOrder ? BsFillEyeFill : BsFillEyeSlashFill} />\n        </Button>\n      </Tooltip>\n      <Box\n        textAlign=\"center\"\n        width=\"100%\"\n        backgroundColor={formColour}\n        color=\"white\"\n        borderRadius={8}\n        p={2}\n      >\n        <Text fontWeight=\"bold\">{npc.name}</Text>\n      </Box>\n      <NPCModifyActions npc={npc} />\n    </>\n  );\n\n  return (\n    <Formik\n      initialValues={{\n        ...npc,\n        externalNotes: npc.externalNotes || [],\n      }}\n      onSubmit={(values, actions) => {\n        modifyNPCAction(values);\n        resetManualFormFields(npc);\n        actions.resetForm();\n      }}\n      onReset={() => {\n        resetManualFormFields(npc);\n      }}\n      enableReinitialize\n      validationSchema={modifyNPCValidationSchema}\n    >\n      <Box\n        className=\"\"\n        width=\"100%\"\n        id={`character-${npc.id}`}\n        border={`0.3em solid ${formColour}${params.id === npc.id ? 'FF' : 22}`}\n        borderRadius={10}\n        p={4}\n      >\n        <Form>\n          <HStack\n            p={1}\n            mb={2}\n          >\n            <NPCFormHeader />\n          </HStack>\n          <SimpleGrid templateColumns=\"repeat(3, 1fr)\" mt={4} mb={4}>\n            <GridItem>\n              <VStack alignItems=\"flex-start\">\n                <ModifyCurrentHPInput character={npc} />\n                <Text>\n                  AC\n                  {' '}\n                  {npc.armourClass}\n                  , Init.\n                  {' '}\n                  {npc.initiative + npc.initiativeMod}\n                  {' '}\n                  (\n                  {npc.initiative}\n                  <Icon as={GiDiceTwentyFacesTwenty} />\n                  {' '}\n                  {npc.initiativeMod >= 0 ? '+' : '-'}\n                  {' '}\n                  {Math.abs(npc.initiativeMod)}\n                  )\n                </Text>\n              </VStack>\n            </GridItem>\n            <GridItem colSpan={2}>\n              <TextareaControl\n                name=\"notes\"\n                textareaProps={{\n                  resize: 'vertical',\n                  height: '20em',\n                  fontSize: 'xs',\n                }}\n              />\n            </GridItem>\n          </SimpleGrid>\n          <ModifyCharacterConditionsField character={npc} />\n          <Accordion allowToggle allowMultiple>\n            <ModifyExternalNoteReferences character={npc} />\n            <NPCModifyStatFields />\n            <AccordionItem>\n              <AccordionButton>\n                <Box flex=\"1\" textAlign=\"left\">\n                  <strong>Options</strong>\n                </Box>\n                <AccordionIcon />\n              </AccordionButton>\n              <AccordionPanel>\n                <Grid\n                  fontSize=\"sm\"\n                  templateColumns=\"repeat(4, 1fr)\"\n                  templateRows=\"repeat(2, 1fr)\"\n                  gap={6}\n                >\n                  {\n                    ([\n                      ['Reveal Name', 'showName'],\n                      ['Reveal Health', 'showHealth'],\n                      ['Reveal Armour Class', 'showAC'],\n                      ['Reveal Initiative', 'showInitiative'],\n                      // ['Show in Turn Order', 'displayOnTurnOrder'],\n                      ['Hostile to Party', 'isHostile'],\n                      ['Friendly to Party', 'isFriendly'],\n                    ] as Array<[string, keyof NPC]>).map(([displayString, key]) => (\n                      <FormControl\n                        display=\"flex\"\n                        alignItems=\"center\"\n                        key={key}\n                      >\n                        <FormLabel mb=\"0\" fontSize=\"xs\">\n                          {displayString}\n                        </FormLabel>\n                        <Spacer />\n                        <SwitchControl name={key} />\n                      </FormControl>\n                    ))\n                  }\n                </Grid>\n              </AccordionPanel>\n            </AccordionItem>\n          </Accordion>\n        </Form>\n      </Box>\n    </Formik>\n  );\n};\n","import {\n  VStack,\n} from '@chakra-ui/react';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useAppSelector } from '../common/hooks';\nimport { AddNPCForm } from './AddNPCForm';\nimport { ModifyNPCForm } from './ModifyNPCForm';\nimport { NPC } from './NPC.interfaces';\n\nconst NPCFormList = ({ npcs }: { npcs: NPC[] }) => (\n  <VStack>\n    {\n        npcs.map((npc) => (\n          <ModifyNPCForm\n            key={npc.id}\n            npc={npc}\n          />\n        ))\n      }\n  </VStack>\n);\n\ninterface NPCsProps {\n  showHostile?: boolean;\n  showFriendly?: boolean;\n  showNeutral?: boolean;\n}\n\nexport function NPCs({\n  showHostile, showFriendly, showNeutral,\n}: NPCsProps) {\n  const params = useParams<{ id?: string }>();\n  const npcs = useAppSelector((state) => state.npcs.npcs\n    .filter((i) => {\n      if (showHostile && i.isHostile) {\n        return true;\n      }\n      if (showFriendly && i.isFriendly) {\n        return true;\n      }\n      if (showNeutral && (!i.isFriendly && !i.isHostile)) {\n        return true;\n      }\n      return false;\n    })\n    .filter((i) => {\n      if (params.id) {\n        return i.id === params.id;\n      }\n      return true;\n    }));\n\n  return (\n    <>\n      {!params.id && <AddNPCForm showHostile={showHostile} showFriendly={showFriendly} />}\n      <NPCFormList npcs={npcs} />\n    </>\n  );\n}\n","import {\n  Accordion, AccordionButton, AccordionIcon, AccordionItem,\n  AccordionPanel, Box, Button, Grid,\n  GridItem, HStack, Icon, SimpleGrid, Text, Tooltip, VStack,\n} from '@chakra-ui/react';\nimport { Form, Formik, useFormikContext } from 'formik';\nimport { AiFillDelete } from 'react-icons/ai';\nimport { BsFillEyeFill, BsFillEyeSlashFill } from 'react-icons/bs';\nimport { GiDiceTwentyFacesTwenty } from 'react-icons/gi';\nimport { ImRedo } from 'react-icons/im';\nimport { IoMdSave } from 'react-icons/io';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { NumberInputControl } from '../common/formik-chakra';\nimport TextareaControl from '../common/formik-chakra/TextareaControl';\nimport { useAppDispatch } from '../common/hooks';\nimport { modifyPlayerValidationSchema, modifyPlayer, removePlayer } from '../common/playerSlice';\nimport { Dice, rollDice } from '../common/util';\nimport { ModifyCharacterConditionsField } from './ModifyCharacterConditionsField';\nimport { Player } from './Player.interfaces';\nimport { ModifyCurrentHPInput } from './ModifyCurrentHPInput';\nimport { ModifyExternalNoteReferences } from './ModifyExternalNotes';\nimport { resetManualFormFields } from './characterFormUtils';\n\ninterface ModifyPlayerFormProps {\n  player: Player;\n}\n\nexport const ModifyPlayerForm = ({ player }: ModifyPlayerFormProps) => {\n  const dispatch = useAppDispatch();\n\n  const params = useParams<{id: string}>();\n\n  const modifyPlayerAction = (p: Player) => dispatch(modifyPlayer(p));\n  const removePlayerAction = (id: string) => dispatch(removePlayer(id));\n\n  const PlayerModifyStatFields = () => {\n    const editStatFields: Array<[string, string]> = [\n      ['AC: ', 'armourClass'],\n      ['Initiative: ', 'initiative'],\n      ['Init. Mod: ', 'initiativeMod'],\n      ['Max HP: ', 'maxHP'],\n    ];\n\n    const { setFieldValue } = useFormikContext<Player>();\n    return (\n      <AccordionItem>\n        <AccordionButton>\n          <Box flex=\"1\" textAlign=\"left\">\n            <strong>Edit Stats</strong>\n          </Box>\n          <AccordionIcon />\n        </AccordionButton>\n        <AccordionPanel>\n          <Grid\n            fontSize=\"sm\"\n            templateColumns=\"repeat(4, 1fr)\"\n            templateRows=\"repeat(2, 1fr)\"\n            gap={4}\n          >\n            <GridItem\n              colSpan={4}\n            >\n              <Button\n                width=\"100%\"\n                onClick={() => setFieldValue('initiative', rollDice(Dice.d20))}\n                variant=\"outline\"\n                rightIcon={<Icon as={GiDiceTwentyFacesTwenty} />}\n              >\n                Roll Initiative\n              </Button>\n            </GridItem>\n            {\n              editStatFields.map(([displayString, value]) => (\n                <GridItem key={value}>\n                  <HStack>\n                    <Text>{displayString}</Text>\n                    <NumberInputControl hideError name={value} width=\"8em\" />\n                  </HStack>\n                </GridItem>\n              ))\n            }\n          </Grid>\n        </AccordionPanel>\n      </AccordionItem>\n    );\n  };\n\n  const PlayerModifyActions = ({ player: _player }: { player: Player }) => {\n    const context = useFormikContext<Player>();\n\n    return (\n      <HStack mt={4}>\n        <Tooltip label=\"Save\" placement=\"top\">\n          <Button\n            width=\"100%\"\n            hidden={!context.dirty}\n            variant=\"solid\"\n            colorScheme=\"green\"\n            onClick={() => context.submitForm()}\n          >\n            <Icon as={IoMdSave} />\n          </Button>\n        </Tooltip>\n        <Tooltip label=\"Reset\" placement=\"top\">\n          <Button\n            width=\"100%\"\n            type=\"reset\"\n            hidden={!context.dirty}\n            variant=\"solid\"\n          >\n            <Icon as={ImRedo} />\n          </Button>\n        </Tooltip>\n        <Tooltip label=\"Delete\" placement=\"top\">\n          <Button\n            width=\"100%\"\n            onClick={() => removePlayerAction(_player.id)}\n            variant=\"solid\"\n            colorScheme=\"red\"\n          >\n            <Icon as={AiFillDelete} />\n          </Button>\n        </Tooltip>\n      </HStack>\n    );\n  };\n\n  const toggleDisplay = () => {\n    modifyPlayerAction({\n      ...player,\n      displayOnTurnOrder: !player.displayOnTurnOrder,\n    });\n  };\n\n  const PlayerFormHeader = () => (\n    <>\n      <Tooltip label={`${player.displayOnTurnOrder ? 'Hide' : 'Show'} in turn order`} placement=\"top\">\n        <Button\n          variant=\"outline\"\n          color={player.displayOnTurnOrder ? 'black' : 'gray.400'}\n          onClick={toggleDisplay}\n        >\n          <Icon as={player.displayOnTurnOrder ? BsFillEyeFill : BsFillEyeSlashFill} />\n        </Button>\n      </Tooltip>\n      <Box\n        textAlign=\"center\"\n        width=\"100%\"\n        backgroundColor=\"darkgreen\"\n        color=\"white\"\n        borderRadius={8}\n        p={2}\n      >\n        <Text fontWeight=\"bold\">{player.name}</Text>\n      </Box>\n      <PlayerModifyActions player={player} />\n    </>\n  );\n\n  return (\n    <Formik\n      initialValues={{\n        ...player,\n        externalNotes: player.externalNotes || [],\n      }}\n      onSubmit={(values, actions) => {\n        modifyPlayerAction(values);\n        resetManualFormFields(player);\n        actions.resetForm();\n      }}\n      onReset={() => {\n        resetManualFormFields(player);\n      }}\n      enableReinitialize\n      validationSchema={modifyPlayerValidationSchema}\n    >\n      <Box\n        className=\"\"\n        width=\"100%\"\n        id={`character-${player.id}`}\n        border={`0.3em solid #00AA00${params.id === player.id ? 'FF' : 22}`}\n        borderRadius={10}\n        p={4}\n      >\n        <Form>\n          <HStack\n            p={1}\n            mb={2}\n          >\n            <PlayerFormHeader />\n          </HStack>\n          <SimpleGrid templateColumns=\"repeat(3, 1fr)\" mt={4} mb={4}>\n            <GridItem>\n              <VStack alignItems=\"flex-start\">\n                <ModifyCurrentHPInput character={player} />\n                <Text>\n                  AC\n                  {' '}\n                  {player.armourClass}\n                  , Init.\n                  {' '}\n                  {player.initiative + player.initiativeMod}\n                  {' '}\n                  (\n                  {player.initiative}\n                  <Icon as={GiDiceTwentyFacesTwenty} />\n                  {' '}\n                  {player.initiativeMod >= 0 ? '+' : '-'}\n                  {' '}\n                  {Math.abs(player.initiativeMod)}\n                  )\n                </Text>\n              </VStack>\n            </GridItem>\n            <GridItem colSpan={2}>\n              <TextareaControl\n                name=\"notes\"\n                textareaProps={{\n                  resize: 'vertical',\n                  height: '20em',\n                  fontSize: 'xs',\n                }}\n              />\n            </GridItem>\n          </SimpleGrid>\n          <ModifyCharacterConditionsField character={player} />\n          <Accordion allowToggle allowMultiple>\n            <ModifyExternalNoteReferences character={player} />\n            <PlayerModifyStatFields />\n            {/* <AccordionItem>\n              <AccordionButton>\n                <Box flex=\"1\" textAlign=\"left\">\n                  <strong>Options</strong>\n                </Box>\n                <AccordionIcon />\n              </AccordionButton>\n              <AccordionPanel>\n                <Grid\n                  fontSize=\"sm\"\n                  templateColumns=\"repeat(3, 1fr)\"\n                  templateRows=\"repeat(1, 1fr)\"\n                  gap={6}\n                >\n                  {\n                    ([\n                      ['Show in Turn Order', 'displayOnTurnOrder'],\n                    ] as Array<[string, keyof Player]>).map(([displayString, key]) => (\n                      <FormControl display=\"flex\" alignItems=\"center\" key={key}>\n                        <FormLabel mb=\"0\">\n                          {displayString}\n                        </FormLabel>\n                        <Spacer />\n                        <SwitchControl name={key} />\n                      </FormControl>\n                    ))\n                  }\n                </Grid>\n              </AccordionPanel>\n            </AccordionItem> */}\n          </Accordion>\n        </Form>\n      </Box>\n    </Formik>\n  );\n};\n","import { AddIcon } from '@chakra-ui/icons';\nimport {\n  Button, HStack, Icon, VStack,\n} from '@chakra-ui/react';\nimport { Form, Formik } from 'formik';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport { InputControl, NumberInputControl } from '../common/formik-chakra';\nimport { useAppDispatch, useAppSelector } from '../common/hooks';\nimport { addPlayer } from '../common/playerSlice';\nimport { Dice, rollDice } from '../common/util';\nimport { ModifyPlayerForm } from './ModifyPlayerForm';\nimport { Player } from './Player.interfaces';\n\nconst PlayerFormList = ({ players }: { players: Player[] }) => (\n  <VStack>\n    {\n        players.map((player) => (\n          <ModifyPlayerForm\n            key={player.id}\n            player={player}\n          />\n        ))\n      }\n  </VStack>\n);\n\nexport function Players() {\n  const params = useParams<{ id?: string }>();\n  const players = useAppSelector((state) => state.players.players.filter((i) => {\n    if (params.id) {\n      return i.id === params.id;\n    }\n    return true;\n  }));\n\n  const dispatch = useAppDispatch();\n\n  const addPlayerValidationSchema = Yup.object({\n    name: Yup.string().required().label('Name'),\n    maxHP: Yup.number().integer().moreThan(0).required()\n      .label('Maximum HP'),\n    initiativeMod: Yup.number().integer().required().label('Initiative Modifier'),\n    armourClass: Yup.number().integer().moreThan(0).default(10)\n      .label('Armour Class'),\n  });\n\n  type AddFormFields = Array<[\n    string, keyof Player, typeof InputControl | typeof NumberInputControl]\n  >;\n\n  const AddPlayerForm = () => {\n    const addFormFields: AddFormFields = [\n      ['Player Name', 'name', InputControl],\n      ['Maximum HP', 'maxHP', NumberInputControl],\n      ['Initiative Modifier', 'initiativeMod', NumberInputControl],\n      ['Armour Class', 'armourClass', NumberInputControl],\n    ];\n    return (\n      <Formik\n        initialValues={{\n          name: '',\n          maxHP: 0,\n          initiativeMod: 0,\n          armourClass: 0,\n        }}\n        validationSchema={addPlayerValidationSchema}\n        onSubmit={\n          (values) => {\n            dispatch(addPlayer({\n              name: values.name,\n              maxHP: values.maxHP,\n              currentHP: values.maxHP,\n              tempHP: 0,\n              initiative: rollDice(Dice.d20),\n              initiativeMod: values.initiativeMod,\n              armourClass: values.armourClass,\n              conditions: [],\n              displayOnTurnOrder: true,\n              notes: '',\n              externalNotes: [],\n              passedDeathSaves: 0,\n              failedDeathSaves: 0,\n            }));\n          }\n        }\n      >\n        <Form>\n          <HStack>\n            {\n              addFormFields.map(([label, key, IC]) => (\n                <IC\n                  hideError\n                  mt={4}\n                  mb={4}\n                  name={key}\n                  label={label}\n                  key={key}\n                />\n              ))\n            }\n          </HStack>\n          <Button\n            mb={4}\n            width=\"100%\"\n            type=\"submit\"\n            variant=\"solid\"\n            colorScheme=\"green\"\n            rightIcon={<Icon as={AddIcon} />}\n          >\n            Add Player\n          </Button>\n        </Form>\n      </Formik>\n    );\n  };\n\n  return (\n    <>\n      {!params.id && <AddPlayerForm />}\n      <PlayerFormList players={players} />\n    </>\n  );\n}\n","import {\n  Badge, Box, Grid, HStack, Icon, Text,\n} from '@chakra-ui/react';\nimport React from 'react';\nimport { BsHeartFill } from 'react-icons/bs';\nimport { FaHeartBroken } from 'react-icons/fa';\nimport {\n  GiCheckedShield, GiDiceTwentyFacesTwenty, GiWalkingBoot,\n} from 'react-icons/gi';\nimport { characterTypeColours } from '../App';\nimport { NPC } from '../Characters/NPC.interfaces';\n\ninterface NPCTurnProps {\n  npc: NPC;\n  isActive: boolean;\n  tinyMode: string | null;\n  onClick: () => void;\n}\n\nexport function NPCTurn({\n  npc, isActive, tinyMode, onClick,\n}: NPCTurnProps) {\n  const tempHP = npc.tempHP ? ` (${npc.tempHP})` : '';\n\n  let formColour = characterTypeColours.neutral;\n\n  if (npc.isHostile) {\n    formColour = characterTypeColours.enemy;\n  } else if (npc.isFriendly) {\n    formColour = characterTypeColours.friendly;\n  }\n\n  return (\n    <Box\n      className=\"turn-block turn-block-npc\"\n      p={tinyMode ? '0.1em' : '0.5em'}\n      border={`${isActive && !tinyMode ? '0.4em' : '0.2em'} solid ${formColour}${isActive ? 'FF' : 22}`}\n      borderRadius=\"0.4em\"\n      opacity={isActive ? '100%' : '80%'}\n      cursor=\"pointer\"\n      onClick={onClick}\n    >\n      <Grid templateColumns=\"repeat(4, 1fr)\" fontSize={tinyMode ? 'sm' : 'md'}>\n        <Text fontWeight=\"bold\">{npc.showName ? npc.name : '???'}</Text>\n        {\n          npc.showAC\n            ? (\n              <Text>\n                <Icon as={GiCheckedShield} />\n                {' '}\n                {npc.armourClass}\n              </Text>\n            )\n            : <Text />\n        }\n        {\n          npc.showHealth\n            ? (\n              <Text>\n                <Icon as={BsHeartFill} />\n                {' '}\n                {npc.currentHP}\n                {' '}\n                {tempHP}\n                {' '}\n                /\n                {' '}\n                {npc.maxHP}\n              </Text>\n            )\n            : (\n              <Text color=\"red.800\">\n                <Icon as={FaHeartBroken} />\n                {' '}\n                {Math.max(npc.maxHP - npc.currentHP, 0)}\n              </Text>\n            )\n        }\n        {\n          npc.showInitiative\n            ? (\n              <Text>\n                <Icon as={GiWalkingBoot} />\n                {' '}\n                {npc.initiative + npc.initiativeMod}\n                {' '}\n                (\n                {npc.initiative}\n                <Icon as={GiDiceTwentyFacesTwenty} />\n                {' '}\n                {npc.initiativeMod >= 0 ? '+' : '-'}\n                {' '}\n                {Math.abs(npc.initiativeMod)}\n                )\n              </Text>\n            )\n            : <Text />\n        }\n      </Grid>\n      {\n        npc.conditions.length > 0 && (\n        <HStack>\n          {npc.conditions.map((i) => (\n            <Badge\n              variant=\"solid\"\n              key={i}\n            >\n              {i}\n            </Badge>\n          ))}\n        </HStack>\n        )\n      }\n    </Box>\n  );\n}\n","import {\n  Center, Divider, Icon, IconButton,\n} from '@chakra-ui/react';\nimport React from 'react';\nimport { RiSkull2Fill, RiSkull2Line } from 'react-icons/ri';\nimport { HiPlus, HiPlusCircle } from 'react-icons/hi';\n// import { TiPlus, TiPlusOutline } from 'react-icons/ti';\nimport { Player } from '../Characters/Player.interfaces';\nimport { useAppDispatch } from '../common/hooks';\nimport { modifyPlayer } from '../common/playerSlice';\n\ninterface DeathSaveCounterProps {\n  player: Player;\n  size?: 'xs' | 'sm' | 'md' | 'lg';\n  disableAction?: boolean;\n}\n\nexport const DeathSaveCounter = ({ player, size, disableAction }: DeathSaveCounterProps) => {\n  const dispatch = useAppDispatch();\n\n  const setDeathSaveThrowAction = (count: number, type: 'pass' | 'fail') => {\n    if (disableAction) return;\n    let prop: keyof Player = 'failedDeathSaves';\n\n    if (type === 'pass') {\n      prop = 'passedDeathSaves';\n    }\n    dispatch(modifyPlayer({\n      id: player.id,\n      [prop]: count,\n    }));\n  };\n\n  const DeathSaveFailedIcon = (saveCount: number) => (\n    player.failedDeathSaves >= saveCount\n      ? <Icon as={RiSkull2Fill} color=\"darkred\" />\n      : <Icon as={RiSkull2Line} />\n  );\n  const DeathSaveSuccessIcon = (saveCount: number) => (\n    player.passedDeathSaves >= saveCount\n      ? <Icon as={HiPlusCircle} color=\"green\" />\n      : <Icon as={HiPlus} />\n  );\n\n  const numberArray = [3, 2, 1];\n  const reversedNumberArray = [1, 2, 3];\n\n  return (\n    <Center>\n      {\n        numberArray.map((saveCount) => (\n          <IconButton\n            size={size || 'xs'}\n            variant=\"ghost\"\n            aria-label=\"Death Save Failed\"\n            key={`failed-save-${saveCount}`}\n            icon={DeathSaveFailedIcon(saveCount)}\n            cursor={disableAction ? 'default' : 'auto'}\n            pointerEvents={disableAction ? 'none' : 'auto'}\n            onClick={() => {\n              if (player.failedDeathSaves === saveCount) {\n                return setDeathSaveThrowAction(Math.max(saveCount - 1, 0), 'fail');\n              }\n              return setDeathSaveThrowAction(Math.max(saveCount, 0), 'fail');\n            }}\n            hidden={disableAction && player.failedDeathSaves < saveCount}\n            minW={!disableAction ? '24px' : 0}\n          />\n        ))\n      }\n      <Divider orientation=\"vertical\" />\n      {\n        reversedNumberArray.map((saveCount) => (\n          <IconButton\n            size={size || 'xs'}\n            variant=\"ghost\"\n            aria-label=\"Death Save Suceeded\"\n            key={`passed-save-${saveCount}`}\n            icon={DeathSaveSuccessIcon(saveCount)}\n            cursor={disableAction ? 'default' : 'auto'}\n            pointerEvents={disableAction ? 'none' : 'auto'}\n            onClick={() => {\n              if (player.passedDeathSaves === saveCount) {\n                return setDeathSaveThrowAction(Math.max(saveCount - 1, 0), 'pass');\n              }\n              return setDeathSaveThrowAction(Math.max(saveCount, 0), 'pass');\n            }}\n            minW={!disableAction ? '24px' : 0}\n            hidden={disableAction && player.passedDeathSaves < saveCount}\n          />\n        ))\n      }\n    </Center>\n  );\n};\n","import {\n  Badge, Box, Grid, HStack, Icon, Text,\n} from '@chakra-ui/react';\nimport React from 'react';\nimport { BsHeartFill } from 'react-icons/bs';\nimport { GiCheckedShield, GiDiceTwentyFacesTwenty, GiWalkingBoot } from 'react-icons/gi';\nimport { Player } from '../Characters/Player.interfaces';\nimport { DeathSaveCounter } from '../DMScreen/DeathSaveCounter';\n\ninterface PlayerTurnProps {\n  player: Player;\n  isActive: boolean;\n  tinyMode: string | null;\n  onClick: () => void;\n}\n\nexport function PlayerTurn({\n  player, isActive, tinyMode, onClick,\n}: PlayerTurnProps) {\n  const tempHP = player.tempHP ? ` (${player.tempHP})` : '';\n\n  return (\n    <Box\n      onClick={onClick}\n      className=\"turn-block turn-block-player\"\n      p={tinyMode ? '0.1em' : '0.5em'}\n      border={`${isActive && !tinyMode ? '0.4em' : '0.2em'} solid #00AA00${isActive ? 'FF' : 22}`}\n      borderRadius=\"0.4em\"\n      opacity={isActive ? '100%' : '80%'}\n      cursor=\"pointer\"\n    >\n      {\n        player.conditions.map((c) => c.toLowerCase()).includes('dying')\n          && (\n            <DeathSaveCounter player={player} size={tinyMode ? 'xs' : 'sm'} disableAction />\n          )\n      }\n      <Grid templateColumns=\"repeat(4, 1fr)\" fontSize={tinyMode ? 'sm' : 'md'}>\n        <Text fontWeight=\"bold\">{player.name}</Text>\n        <Text>\n          <Icon as={GiCheckedShield} />\n          {' '}\n          {player.armourClass}\n        </Text>\n        <Text>\n          <Icon as={BsHeartFill} />\n          {' '}\n          {player.currentHP}\n          {' '}\n          {tempHP}\n          {' '}\n          /\n          {' '}\n          {player.maxHP}\n        </Text>\n        <Text>\n          <Icon as={GiWalkingBoot} />\n          {' '}\n          {player.initiative + player.initiativeMod}\n          {' '}\n          (\n          {player.initiative}\n          <Icon as={GiDiceTwentyFacesTwenty} />\n          {' '}\n          {player.initiativeMod >= 0 ? '+' : '-'}\n          {' '}\n          {Math.abs(player.initiativeMod)}\n          )\n        </Text>\n      </Grid>\n      {\n        player.conditions.length > 0 && (\n        <HStack>\n          {player.conditions.map((i) => <Badge variant=\"solid\" key={i}>{i}</Badge>)}\n        </HStack>\n        )\n      }\n    </Box>\n  );\n}\n","import {\n  Box,\n  Button, HStack, Icon, StackDivider, VStack,\n} from '@chakra-ui/react';\nimport React from 'react';\nimport { GiDiceTwentyFacesTwenty } from 'react-icons/gi';\nimport { useHistory } from 'react-router-dom';\nimport { Character } from '../Characters/Character.interfaces';\nimport { NPC } from '../Characters/NPC.interfaces';\nimport { Player } from '../Characters/Player.interfaces';\nimport { useAppDispatch, useAppSelector } from '../common/hooks';\nimport { setTurn } from '../common/campaignSlice';\nimport { rollAllPlayerInitiative } from '../common/playerSlice';\nimport { NPCTurn } from './NPCTurn';\nimport './Initiative.css';\nimport { PlayerTurn } from './PlayerTurn';\nimport { useQuery } from '../common/util';\n\ntype CharacterType = 'player' | 'npc';\n\ntype SortedTurnsArray<T = CharacterType> = Array<{\n  character: Character;\n  type: T;\n}>\n\nexport const getSortedTurns = (\n  {\n    players,\n    npcs,\n    showAllTurns,\n    currentTurnId,\n  } : {\n    players: Player[];\n    npcs: NPC[];\n    showAllTurns?: boolean;\n    currentTurnId?: string;\n  },\n) => {\n  const formattedPlayers: SortedTurnsArray<'player'> = players.map((i) => ({\n    character: i,\n    type: 'player',\n  }));\n\n  const formattedNPCs: SortedTurnsArray<'npc'> = npcs.map((i) => ({\n    character: i,\n    type: 'npc',\n  }));\n\n  const sortedTurns: SortedTurnsArray = [\n    ...formattedPlayers,\n    ...formattedNPCs,\n  ]\n    .filter((i) => showAllTurns || i.character.displayOnTurnOrder)\n    .sort((a, b) => {\n      const aChar = a.character;\n      const bChar = b.character;\n      return (bChar.initiative + bChar.initiativeMod) - (aChar.initiative + aChar.initiativeMod);\n    });\n\n  const returnValue = (array: SortedTurnsArray): Array<{\n    isActive: boolean;\n    character: Character;\n    type: CharacterType\n  }> => array.map((i, idx) => ({\n    isActive: idx === 0,\n    character: i.character,\n    type: i.type,\n  }));\n\n  if (!currentTurnId) {\n    return returnValue(sortedTurns);\n  }\n\n  const currentTurnIndex = sortedTurns.findIndex((i) => i.character.id === currentTurnId) || 0;\n  const getSortedByNextActiveTurn = () => [\n    ...sortedTurns\n      .slice(currentTurnIndex + 1, sortedTurns.length),\n    ...sortedTurns\n      .slice(0, currentTurnIndex + 1),\n  ];\n\n  return returnValue(getSortedByNextActiveTurn());\n};\n\nexport function Initiative() {\n  const history = useHistory();\n  const query = useQuery();\n  const tinyMode = query.get('tinymode');\n\n  const changePageMethod = ({ type, id }: {\n    type: string;\n    id: string\n  }): void => {\n    const historyObj = tinyMode ? (window.opener as any)?.appHistory as typeof history : history;\n    if (!historyObj) return;\n    historyObj.push(`/${type}/${id}`);\n    const maxAttempt = 20;\n    const findFocus = (iter = 0) => {\n      if (iter >= maxAttempt) return;\n      const element = document.querySelector(`#currentHP-${id}`) as HTMLInputElement | null;\n\n      if (!element) {\n        setTimeout(() => {\n          findFocus(iter + 1);\n        }, 50);\n      } else {\n        element.focus();\n      }\n    };\n    findFocus();\n  };\n\n  const players = useAppSelector<Player[]>((state) => state.players.players);\n  const npcs = useAppSelector<NPC[]>((state) => state.npcs.npcs);\n  const currentTurnId = useAppSelector<string>((state) => state.campaign.currentTurnId);\n\n  const dispatch = useAppDispatch();\n\n  const turns = getSortedTurns({\n    players,\n    npcs,\n    showAllTurns: false,\n    currentTurnId,\n  });\n\n  const rollInitiativesAction = () => {\n    dispatch(rollAllPlayerInitiative());\n    dispatch(setTurn(''));\n  };\n\n  const setTurnAction = () => {\n    if (turns.length < 1) {\n      return;\n    }\n\n    if (!currentTurnId) {\n      dispatch(setTurn(turns[0].character.id));\n      return;\n    }\n\n    const currentTurnCharacter = turns.findIndex((i) => i.character.id === currentTurnId);\n\n    if (!currentTurnCharacter) {\n      dispatch(setTurn(turns[1].character.id));\n      return;\n    }\n    const nextCharacter = turns[(currentTurnCharacter + 1) % turns.length];\n    dispatch(setTurn(nextCharacter.character.id));\n  };\n\n  return (\n    <Box>\n      <VStack\n        divider={tinyMode ? undefined : <StackDivider color=\"gray.200\" />}\n        mb={tinyMode ? 0 : 2}\n        spacing={tinyMode ? 0 : 2}\n      >\n        {turns.map(({ character, isActive, type }) => {\n          if (type === 'player') {\n            const player = character as Player;\n            return (\n              <PlayerTurn\n                onClick={() => changePageMethod({ type: 'players', id: character.id })}\n                isActive={isActive}\n                player={player}\n                key={character.id}\n                tinyMode={tinyMode}\n              />\n            );\n          } if (type === 'npc') {\n            const npc = character as NPC;\n            return (\n              <NPCTurn\n                onClick={() => changePageMethod({\n                  type: npc.isHostile ? 'enemies' : 'npcs',\n                  id: character.id,\n                })}\n                isActive={isActive}\n                npc={npc}\n                key={character.id}\n                tinyMode={tinyMode}\n              />\n            );\n          }\n\n          return false;\n        })}\n        ;\n      </VStack>\n      <HStack\n        position=\"sticky\"\n        backgroundColor=\"white\"\n        bottom=\"0\"\n        width=\"100%\"\n      >\n        <Button\n          onClick={rollInitiativesAction}\n          width=\"100%\"\n          size={tinyMode ? 'sm' : 'md'}\n          variant=\"outline\"\n        >\n          Roll Initiative\n          <Icon as={GiDiceTwentyFacesTwenty} />\n        </Button>\n        <Button\n          onClick={setTurnAction}\n          width=\"100%\"\n          size={tinyMode ? 'sm' : 'md'}\n          variant=\"outline\"\n        >\n          Next Turn\n        </Button>\n        { !tinyMode && (\n          <Button\n            width=\"100%\"\n            variant=\"outline\"\n            size={tinyMode ? 'sm' : 'md'}\n            onClick={() => window.open('/dndtracker/?tinymode=true', 'dndtracker_turns', 'resizable,width=500,height=300')}\n          >\n            Display in Compact Mode\n          </Button>\n        )}\n      </HStack>\n    </Box>\n  );\n}\n","import {\n  Badge, Box, Button, Center, Checkbox, CheckboxGroup, Divider, Flex, Grid,\n  Heading, HStack, Icon, IconButton, Input, NumberInput, Text,\n  NumberInputField, Select, Slide, useCheckboxGroup, useDisclosure, VStack,\n} from '@chakra-ui/react';\nimport React, { useRef, useState } from 'react';\nimport { AiOutlineLink } from 'react-icons/ai';\nimport { BsHeartFill } from 'react-icons/bs';\nimport { GiCheckedShield, GiDiceTwentyFacesTwenty, GiWalkingBoot } from 'react-icons/gi';\nimport { useHistory } from 'react-router-dom';\nimport { characterTypeColours } from '../App';\nimport { Character } from '../Characters/Character.interfaces';\nimport { NPC } from '../Characters/NPC.interfaces';\nimport { Player } from '../Characters/Player.interfaces';\nimport { setTurn } from '../common/campaignSlice';\nimport { useAppDispatch, useAppSelector } from '../common/hooks';\nimport { modifyNPC } from '../common/npcSlice';\nimport { modifyPlayer, rollAllPlayerInitiative } from '../common/playerSlice';\nimport { getSortedTurns } from '../Initiative';\nimport { DeathSaveCounter } from './DeathSaveCounter';\n\nexport function DMScreen() {\n  const history = useHistory();\n\n  const {\n    value: selectedCharacters,\n    setValue: setSelectedCharacters,\n  } = useCheckboxGroup({\n    defaultValue: [] as string[],\n  });\n\n  const changePageMethod = ({ type, id }: {\n    type: string;\n    id: string\n  }): void => {\n    history.push(`/${type}/${id}`);\n    const maxAttempt = 20;\n    const findFocus = (iter = 0) => {\n      if (iter >= maxAttempt) return;\n      const element = document.querySelector(`#currentHP-${id}`) as HTMLInputElement | null;\n\n      if (!element) {\n        setTimeout(() => {\n          findFocus(iter + 1);\n        }, 50);\n      } else {\n        element.focus();\n      }\n    };\n    findFocus();\n  };\n\n  const {\n    isOpen,\n    onOpen,\n    onClose,\n  } = useDisclosure();\n\n  const editPanelRef = useRef<HTMLDivElement>(null);\n\n  const players = useAppSelector<Player[]>((state) => state.players.players);\n  const npcs = useAppSelector<NPC[]>((state) => state.npcs.npcs);\n  const currentTurnId = useAppSelector<string>((state) => state.campaign.currentTurnId);\n\n  const characters = getSortedTurns({\n    players,\n    npcs,\n    showAllTurns: false,\n    currentTurnId,\n  });\n\n  const availablePlayers = characters.filter((i) => i.type === 'player').map((i) => i.character);\n  const availableEnemies = characters.filter((i) => i.type === 'npc' && (i.character as NPC).isHostile).map((i) => i.character);\n\n  const dispatch = useAppDispatch();\n\n  const rollInitiativesAction = () => {\n    dispatch(rollAllPlayerInitiative());\n    dispatch(setTurn(''));\n  };\n\n  const setTurnAction = () => {\n    if (characters.length < 1) {\n      return;\n    }\n\n    if (!currentTurnId) {\n      dispatch(setTurn(characters[0].character.id));\n      return;\n    }\n\n    const currentTurnCharacter = characters.findIndex((i) => i.character.id === currentTurnId);\n\n    if (!currentTurnCharacter) {\n      dispatch(setTurn(characters[1].character.id));\n      return;\n    }\n    const nextCharacter = characters[(currentTurnCharacter + 1) % characters.length];\n    dispatch(setTurn(nextCharacter.character.id));\n  };\n\n  // Set Health/THP funcs\n  const [healthMod, setHealthMod] = useState(0);\n  const [thpMod, setThpMod] = useState(0);\n\n  const hPModPanels: Array<{\n    title: string;\n    prop: 'currentHP' | 'tempHP';\n    value: number;\n    setMethod: (value: number) => void;\n  }> = [\n    {\n      title: 'Modify Health',\n      prop: 'currentHP',\n      value: healthMod,\n      setMethod: setHealthMod,\n    },\n    {\n      title: 'Modify THP',\n      prop: 'tempHP',\n      value: thpMod,\n      setMethod: setThpMod,\n    },\n  ];\n\n  const modifyHPValue = (value: number, prop: 'currentHP' | 'tempHP', reset?: boolean) => {\n    if (value === 0 && !reset) return;\n\n    const dispatchActions: unknown[] = [];\n    const selectedPlayers = players.filter((i) => selectedCharacters.includes(i.id));\n\n    const resetProps = (character: Character) => ({\n      id: character.id,\n      tempHP: prop === 'tempHP' ? 0 : Math.max(character.tempHP, 0),\n      currentHP: prop === 'currentHP' ? character.maxHP : character.currentHP,\n    });\n\n    const modProps = (character: Character) => ({\n      id: character.id,\n      [prop]: prop === 'tempHP'\n        ? Math.max(character[prop] + value, 0)\n        : Math.min(\n          character[prop] + value,\n          character.maxHP,\n        ),\n    });\n\n    const propMethod = reset ? resetProps : modProps;\n\n    selectedPlayers.forEach((player) => {\n      dispatchActions.push(modifyPlayer(propMethod(player)));\n    });\n\n    const selectedNPCs = npcs.filter((i) => selectedCharacters.includes(i.id));\n    selectedNPCs.forEach((npc) => {\n      dispatchActions.push(modifyNPC(propMethod(npc)));\n    });\n\n    if (dispatchActions.length) dispatchActions.map(dispatch);\n  };\n\n  const allExistingConditions = [...players, ...npcs].reduce((p, v) => {\n    if (v.conditions.length) {\n      v.conditions.forEach((c) => {\n        if (!p.includes(c)) p.push(c);\n      });\n    }\n    return p;\n  }, [] as string[]);\n\n  const [conditionToRemove, setConditionToRemove] = useState('');\n  const [conditionToAdd, setConditionToAdd] = useState('');\n\n  const modifyCondValue = (value: string, action: 'remove' | 'add') => {\n    if (!value) return;\n\n    const dispatchActions: unknown[] = [];\n    const selectedPlayers = players.filter((i) => selectedCharacters.includes(i.id));\n\n    const modConditionValue = (conditions: string[]) => {\n      const modifiedCondition = [...conditions];\n      const conditionIndex = modifiedCondition.indexOf(value);\n      const conditionAlreadyExists = conditionIndex > -1;\n      if (action === 'remove' && conditionAlreadyExists) {\n        modifiedCondition.splice(conditionIndex, 1);\n      }\n\n      if (action === 'add' && !conditionAlreadyExists) {\n        modifiedCondition.push(value);\n      }\n\n      return modifiedCondition;\n    };\n\n    selectedPlayers.forEach((player) => {\n      dispatchActions.push(modifyPlayer({\n        id: player.id,\n        conditions: modConditionValue(player.conditions),\n      }));\n    });\n\n    const selectedNPCs = npcs.filter((i) => selectedCharacters.includes(i.id));\n    selectedNPCs.forEach((npc) => {\n      dispatchActions.push(modifyNPC({\n        id: npc.id,\n        conditions: modConditionValue(npc.conditions),\n      }));\n    });\n\n    if (dispatchActions.length) dispatchActions.map(dispatch);\n  };\n\n  return (\n    <Flex>\n      <VStack width=\"100%\">\n        <HStack\n          width=\"100%\"\n        >\n          <Button\n            flexGrow={1}\n            disabled={selectedCharacters.length === 0}\n            size=\"xs\"\n            onClick={() => setSelectedCharacters([])}\n          >\n            Deselect All Characters\n          </Button>\n          <Button\n            flexGrow={1}\n            onClick={() => setSelectedCharacters(availablePlayers.map((i) => i.id))}\n            size=\"xs\"\n          >\n            Select All Players\n          </Button>\n          <Button\n            flexGrow={1}\n            onClick={() => setSelectedCharacters(\n              availableEnemies\n                .map((i) => i.id),\n            )}\n            size=\"xs\"\n          >\n            Select All Enemies\n          </Button>\n        </HStack>\n        {/* Characters */}\n        <VStack width=\"100%\" spacing={1}>\n          <CheckboxGroup\n            defaultValue={[]}\n            value={selectedCharacters}\n            onChange={setSelectedCharacters}\n          >\n            {\n              characters.map((i) => {\n                const { character } = i;\n                const npc = character as NPC;\n                const player = character as Player;\n                const tempHP = character.tempHP ? ` (${character.tempHP})` : '';\n                let type: string = '';\n                if (i.type === 'player') {\n                  type = 'players';\n                } else if (i.type === 'npc') {\n                  type = npc.isHostile ? 'enemies' : 'npcs';\n                }\n\n                let borderColour: string = characterTypeColours.neutral;\n\n                if (type === 'players') {\n                  borderColour = characterTypeColours.player;\n                } else if (type === 'enemies') {\n                  borderColour = characterTypeColours.enemy;\n                } else if (npc.isFriendly) {\n                  borderColour = characterTypeColours.friendly;\n                }\n                return (\n                  <Box\n                    width=\"100%\"\n                    key={character.id}\n                    border={`0.1em solid ${borderColour}`}\n                    borderRadius={10}\n                  >\n                    {\n                      character.conditions.map((c) => c.toLowerCase()).includes('dying')\n                        && type === 'players' && (\n                          <DeathSaveCounter player={player} size=\"xs\" />\n                      )\n                    }\n                    <Grid\n                      key={character.id}\n                      alignItems=\"center\"\n                      templateColumns=\"repeat(5, 1fr)\"\n                      fontSize=\"xs\"\n                      pl={2}\n                      pr={2}\n                      gap={1}\n                    >\n                      <HStack>\n                        <Checkbox value={character.id} size=\"lg\" />\n                        {' '}\n                        <Text\n                          fontWeight=\"bold\"\n                          fontSize=\"xs\"\n                        >\n                          {character.name}\n                        </Text>\n                      </HStack>\n                      <Box>\n                        <Icon as={GiCheckedShield} />\n                        {' '}\n                        {character.armourClass}\n                      </Box>\n                      <Box>\n                        <Icon as={BsHeartFill} />\n                        {' '}\n                        {character.currentHP}\n                        {' '}\n                        {tempHP}\n                        {' '}\n                        /\n                        {' '}\n                        {character.maxHP}\n                      </Box>\n                      <Box>\n                        <Icon as={GiWalkingBoot} />\n                        {' '}\n                        {character.initiative + character.initiativeMod}\n                        {' '}\n                        (\n                        {character.initiative}\n                        <Icon as={GiDiceTwentyFacesTwenty} />\n                        {' '}\n                        {character.initiativeMod >= 0 ? '+' : '-'}\n                        {' '}\n                        {Math.abs(character.initiativeMod)}\n                        )\n                      </Box>\n                      <Box>\n                        <IconButton\n                          aria-label=\"Go to character\"\n                          icon={<Icon as={AiOutlineLink} />}\n                          onClick={() => changePageMethod({\n                            id: character.id,\n                            type,\n                          })}\n                          size=\"xs\"\n                          m={1}\n                        />\n                      </Box>\n                    </Grid>\n                    {\n                      character.conditions.length > 0 && (\n                      <HStack pr={1} pl={1} pb={1}>\n                        {character.conditions.map((cond) => (\n                          <Badge variant=\"solid\" key={cond}>{cond}</Badge>\n                        ))}\n                      </HStack>\n                      )\n                    }\n                  </Box>\n                );\n              })\n            }\n          </CheckboxGroup>\n        </VStack>\n        {/* Spacer for edit panel height */}\n        <Flex\n          height={isOpen && editPanelRef.current ? `${editPanelRef.current.clientHeight}px` : 0}\n        />\n\n        {/* Controls */}\n        <VStack\n          width=\"100%\"\n          position=\"sticky\"\n          bottom=\"0\"\n          backgroundColor=\"white\"\n          p={2}\n        >\n          <Button width=\"100%\" onClick={onOpen} display={isOpen ? 'none' : 'visible'}>\n            Show Edit Panel\n          </Button>\n\n          {/* Edit Panel */}\n          <Slide\n            direction=\"bottom\"\n            in={isOpen}\n            ref={editPanelRef}\n          >\n            <Center>\n              <VStack\n                p={2}\n                minW=\"650\"\n                maxW=\"800\"\n                backgroundColor=\"white\"\n              >\n                <Center><Heading size=\"md\">Edit Panel</Heading></Center>\n                <Divider />\n                <Button\n                  width=\"100%\"\n                  onClick={onClose}\n                  size=\"xs\"\n                >\n                  Hide This Panel\n                </Button>\n                <Divider />\n                <HStack\n                  backgroundColor=\"white\"\n                  width=\"100%\"\n                >\n                  <Button onClick={rollInitiativesAction} width=\"100%\">\n                    Roll Initiative\n                    <Icon as={GiDiceTwentyFacesTwenty} />\n                  </Button>\n                  <Button onClick={setTurnAction} width=\"100%\">Next Turn</Button>\n                </HStack>\n                <Divider />\n                <HStack\n                  width=\"100%\"\n                >\n                  {\n                    hPModPanels.map(({\n                      title, prop, value, setMethod,\n                    }) => (\n                      <VStack\n                        width=\"50%\"\n                        key={title}\n                      >\n                        <Flex\n                          flexGrow={1}\n                        >\n                          <Heading size=\"s\">{title}</Heading>\n                        </Flex>\n                        <HStack>\n                          {\n                            [\n                              -10,\n                              -5,\n                              -1,\n                              1,\n                              5,\n                              10,\n                            ].map((i) => (\n                              <Button\n                                size=\"xs\"\n                                onClick={() => modifyHPValue(i, prop)}\n                                variant=\"outline\"\n                                disabled={!selectedCharacters.length}\n                                key={i}\n                              >\n                                {i > 0 && '+'}\n                                {i}\n                              </Button>\n                            ))\n                          }\n                        </HStack>\n                        <HStack>\n                          <Button\n                            variant=\"outline\"\n                            disabled={!selectedCharacters.length}\n                            onClick={() => modifyHPValue(-value, prop)}\n                          >\n                            -\n                          </Button>\n                          <NumberInput\n                            value={value}\n                            onChange={(e) => setMethod(Number(e) || 0)}\n                            width=\"6em\"\n                            disabled={!selectedCharacters.length}\n                          >\n                            <NumberInputField />\n                          </NumberInput>\n                          <Button\n                            variant=\"outline\"\n                            disabled={!selectedCharacters.length}\n                            onClick={() => modifyHPValue(value, prop)}\n                          >\n                            +\n                          </Button>\n                        </HStack>\n                        <Button\n                          size=\"xs\"\n                          variant=\"outline\"\n                          disabled={!selectedCharacters.length}\n                          onClick={() => modifyHPValue(0, prop, true)}\n                        >\n                          Reset\n                        </Button>\n                      </VStack>\n                    ))\n                  }\n                </HStack>\n                <Divider />\n                <VStack width=\"100%\">\n                  <Heading size=\"s\">\n                    Modify Conditions\n                  </Heading>\n                  <HStack\n                    width=\"100%\"\n                  >\n                    <VStack\n                      width=\"50%\"\n                    >\n                      <Input\n                        placeholder=\"Name of condition\"\n                        disabled={!selectedCharacters.length}\n                        value={conditionToAdd}\n                        onChange={(e) => setConditionToAdd(e.target.value)}\n                      />\n                      <Button\n                        width=\"100%\"\n                        disabled={!selectedCharacters.length}\n                        onClick={() => modifyCondValue(conditionToAdd, 'add')}\n                      >\n                        Add Condition\n                      </Button>\n                    </VStack>\n                    <VStack\n                      width=\"50%\"\n                    >\n                      <Select\n                        placeholder=\"Select condition to remove\"\n                        disabled={!selectedCharacters.length || !allExistingConditions.length}\n                        value={conditionToRemove}\n                        onChange={(e) => setConditionToRemove(e.target.value)}\n                      >\n                        {\n                          allExistingConditions.map((c) => (\n                            <option value={c} key={c}>{c}</option>\n                          ))\n                        }\n                      </Select>\n                      <Button\n                        width=\"100%\"\n                        disabled={!selectedCharacters.length || !allExistingConditions.length}\n                        onClick={() => modifyCondValue(conditionToRemove, 'remove')}\n                      >\n                        Remove Condition\n                      </Button>\n                    </VStack>\n                  </HStack>\n                </VStack>\n              </VStack>\n            </Center>\n          </Slide>\n          {/* End Edit Panel */}\n\n        </VStack>\n      </VStack>\n    </Flex>\n  );\n}\n","import React, {\n  ReactNode, useCallback, useMemo, useState,\n} from 'react';\nimport isHotkey from 'is-hotkey';\nimport {\n  Editable, withReact, useSlate, Slate, RenderLeafProps, RenderElementProps,\n} from 'slate-react';\nimport {\n  Editor,\n  Transforms,\n  createEditor,\n  Descendant,\n  Element as SlateElement,\n} from 'slate';\nimport { withHistory } from 'slate-history';\nimport {\n  Divider,\n  HStack, Icon, IconButton,\n} from '@chakra-ui/react';\nimport {\n  GoBold, GoCode, GoItalic, GoListOrdered, GoListUnordered, GoQuote,\n} from 'react-icons/go';\nimport { MdFormatUnderlined } from 'react-icons/md';\nimport { IconType } from 'react-icons/lib';\nimport { FaHeading } from 'react-icons/fa';\nimport { CgFormatHeading } from 'react-icons/cg';\nimport { CustomTextMark, CustomElementType } from '../types/slate';\n\nconst HOTKEYS: Record<string, CustomTextMark> = {\n  'mod+b': 'bold',\n  'mod+i': 'italic',\n  'mod+u': 'underline',\n  'mod+`': 'code',\n};\n\nconst LIST_TYPES = ['numbered-list', 'bulleted-list'];\n\nconst isBlockActive = (editor: Editor, format: CustomElementType) => {\n  const [match] = Editor.nodes(editor, {\n    match: (n) => !Editor.isEditor(n) && SlateElement.isElement(n) && n.type === format,\n  });\n\n  return !!match;\n};\n\nconst isMarkActive = (editor: Editor, format: CustomTextMark) => {\n  const marks = Editor.marks(editor);\n  return marks ? marks[format] === true : false;\n};\n\nconst toggleBlock = (editor: Editor, format: CustomElementType) => {\n  const isActive = isBlockActive(editor, format);\n  const isList = LIST_TYPES.includes(format);\n\n  Transforms.unwrapNodes(editor, {\n    match: (n) => LIST_TYPES.includes(\n      String(!Editor.isEditor(n) && SlateElement.isElement(n) && n.type),\n    ),\n    split: true,\n  });\n  let type: CustomElementType;\n\n  if (isActive) {\n    type = 'paragraph';\n  } else if (isList) {\n    type = 'list-item';\n  } else {\n    type = format;\n  }\n  const newProperties: Partial<SlateElement> = {\n    type,\n  };\n  Transforms.setNodes(editor, newProperties);\n\n  if (!isActive && isList) {\n    const block = { type: format, children: [] };\n    Transforms.wrapNodes(editor, block);\n  }\n};\n\nconst toggleMark = (editor: Editor, format: CustomTextMark) => {\n  const isActive = isMarkActive(editor, format);\n\n  if (isActive) {\n    Editor.removeMark(editor, format);\n  } else {\n    Editor.addMark(editor, format, true);\n  }\n};\n\nconst Element = ({ attributes, children, element }: RenderElementProps) => {\n  switch (element.type) {\n    case 'block-quote':\n      return <blockquote {...attributes}>{children}</blockquote>;\n    case 'bulleted-list':\n      return <ul {...attributes}>{children}</ul>;\n    case 'heading-one':\n      return <h1 {...attributes}>{children}</h1>;\n    case 'heading-two':\n      return <h2 {...attributes}>{children}</h2>;\n    case 'list-item':\n      return <li {...attributes}>{children}</li>;\n    case 'numbered-list':\n      return <ol {...attributes}>{children}</ol>;\n    default:\n      return <p {...attributes}>{children}</p>;\n  }\n};\n\nconst Leaf = ({ attributes, children, leaf }: RenderLeafProps) => {\n  let modChildren: ReactNode = children;\n  if (leaf.bold) {\n    modChildren = <strong {...attributes}>{children}</strong>;\n  }\n\n  if (leaf.code) {\n    modChildren = <code {...attributes}>{children}</code>;\n  }\n\n  if (leaf.italic) {\n    modChildren = <em {...attributes}>{children}</em>;\n  }\n\n  if (leaf.underline) {\n    modChildren = <u {...attributes}>{children}</u>;\n  }\n\n  return <span {...attributes}>{modChildren}</span>;\n};\n\nconst BlockButton = ({ format, icon }: { format: CustomElementType, icon: IconType }) => {\n  const editor = useSlate();\n  const isActive = isBlockActive(editor, format);\n  return (\n    <IconButton\n      aria-label={format}\n      icon={<Icon as={icon} color={isActive ? undefined : 'gray.300'} />}\n      variant=\"outline\"\n      onClick={(event) => {\n        event.preventDefault();\n        toggleBlock(editor, format);\n      }}\n    />\n  );\n};\n\nconst MarkButton = ({ format, icon }: { format: CustomTextMark, icon: IconType }) => {\n  const editor = useSlate();\n  const isActive = isMarkActive(editor, format);\n  return (\n    <IconButton\n      aria-label={format}\n      icon={<Icon as={icon} color={isActive ? undefined : 'gray.300'} />}\n      variant=\"outline\"\n      onClick={(event) => {\n        event.preventDefault();\n        toggleMark(editor, format);\n      }}\n    />\n  );\n};\n\nconst initialValue: Descendant[] = [\n  {\n    type: 'paragraph',\n    children: [\n      { text: 'This is editable ' },\n      { text: 'rich', bold: true },\n      { text: ' text, ' },\n      { text: 'much', italic: true },\n      { text: ' better than a ' },\n      { text: '<textarea>', code: true },\n      { text: '!' },\n    ],\n  },\n  {\n    type: 'paragraph',\n    children: [\n      {\n        text:\n          \"Since it's rich text, you can do things like turn a selection of text \",\n      },\n      { text: 'bold', bold: true },\n      {\n        text:\n          ', or add a semantically rendered block quote in the middle of the page, like this:',\n      },\n    ],\n  },\n  {\n    type: 'block-quote',\n    children: [{ text: 'A wise quote.' }],\n  },\n  {\n    type: 'paragraph',\n    children: [{ text: 'Try it out for yourself!' }],\n  },\n];\n\nconst SlateEditor = () => {\n  const [value, setValue] = useState<Descendant[]>(initialValue);\n  const renderElement = useCallback((props: RenderElementProps) => <Element {...props} />, []);\n  const renderLeaf = useCallback((props: RenderLeafProps) => <Leaf {...props} />, []);\n  const editor = useMemo(() => withHistory(withReact(createEditor())), []);\n\n  return (\n    <Slate editor={editor} value={value} onChange={(v) => setValue(v)}>\n      <HStack>\n        <MarkButton format=\"bold\" icon={GoBold} />\n        <MarkButton format=\"italic\" icon={GoItalic} />\n        <MarkButton format=\"underline\" icon={MdFormatUnderlined} />\n        <MarkButton format=\"code\" icon={GoCode} />\n        <BlockButton format=\"heading-one\" icon={FaHeading} />\n        <BlockButton format=\"heading-two\" icon={CgFormatHeading} />\n        <BlockButton format=\"block-quote\" icon={GoQuote} />\n        <BlockButton format=\"numbered-list\" icon={GoListOrdered} />\n        <BlockButton format=\"bulleted-list\" icon={GoListUnordered} />\n      </HStack>\n      <Divider mt={3} mb={3} />\n      <Editable\n        renderElement={renderElement}\n        renderLeaf={renderLeaf}\n        placeholder=\"Enter some rich text…\"\n        spellCheck\n        autoFocus\n        onKeyDown={(event) => {\n          Object.entries(HOTKEYS).forEach(([hotkey, mark]) => {\n            if (isHotkey(hotkey, event)) {\n              event.preventDefault();\n              toggleMark(editor, mark);\n            }\n          });\n        }}\n      />\n    </Slate>\n  );\n};\n\nexport default SlateEditor;\n","import { Box } from '@chakra-ui/react';\nimport React from 'react';\nimport SlateEditor from '../common/SlateEditor';\nimport './CampaignNotes.css';\n\nexport const CampaignNotes = () => {\n  const a = '1';\n  return (\n    <Box\n      p={5}\n      border=\"1px solid #DDDDDD\"\n      borderRadius={8}\n    >\n      {false && a}\n      <SlateEditor />\n    </Box>\n  );\n};\n","import {\n  Grid, Flex, Button, useDisclosure, AlertDialog,\n  AlertDialogBody, AlertDialogContent, AlertDialogFooter,\n  AlertDialogHeader, AlertDialogOverlay,\n} from '@chakra-ui/react';\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useAppSelector } from '../common/hooks';\nimport { APP_VERSION, RootState, STORE_KEY } from '../common/store';\n\ninterface StateFormat {\n  version: string;\n  date: number;\n  state: RootState;\n}\n\nconst AlertDeleteState = ({ confirmAction }: { confirmAction: () => void }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const cancelRef = useRef(null);\n  return (\n    <>\n      <Button\n        width=\"100%\"\n        colorScheme=\"red\"\n        onClick={onOpen}\n      >\n        Clear State\n      </Button>\n      <AlertDialog\n        isOpen={isOpen}\n        leastDestructiveRef={cancelRef}\n        onClose={onClose}\n      >\n        <AlertDialogOverlay>\n          <AlertDialogContent>\n            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\n              Clear State\n            </AlertDialogHeader>\n            <AlertDialogBody>\n              Are you sure? This action cannot be undone.\n            </AlertDialogBody>\n            <AlertDialogFooter>\n              <Button ref={cancelRef} onClick={onClose}>\n                Cancel\n              </Button>\n              <Button\n                colorScheme=\"red\"\n                onClick={() => {\n                  onClose();\n                  confirmAction();\n                }}\n                ml={3}\n              >\n                Delete\n              </Button>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialogOverlay>\n      </AlertDialog>\n    </>\n  );\n};\n\nexport const Settings = () => {\n  const state = useAppSelector((s) => s);\n\n  const exportStateFormat = (): StateFormat => ({\n    version: APP_VERSION,\n    state,\n    date: Date.now(),\n  });\n\n  const [exportStateLink, setExportStateLink] = useState('');\n\n  const exportStateRef = useRef<HTMLAnchorElement>(null);\n  const importStateRef = useRef<HTMLInputElement>(null);\n  const makeExportStateFileName = () => `${Date.now()}_${APP_VERSION}_${state.campaign.campaignTitle}.json`;\n  const makeExportStateFile = () => {\n    // This creates the file.\n    // In my case, I have an array, and each item in\n    // the array should be on a new line, which is why\n    // I use .join('\\n') here.\n    const data = new Blob([JSON.stringify(exportStateFormat())], { type: 'application/json' });\n\n    // this part avoids Memory Leaks\n    if (exportStateLink !== '') window.URL.revokeObjectURL(exportStateLink);\n\n    // update the download link state\n    setExportStateLink(window.URL.createObjectURL(data));\n  };\n\n  const clearState = () => {\n    localStorage.removeItem(`${STORE_KEY}_${APP_VERSION}`);\n    window.location.reload();\n  };\n\n  const importState = (importedState: string) => {\n    try {\n      const parsedImportedState: StateFormat = JSON.parse(importedState);\n      localStorage.setItem(`${STORE_KEY}_${APP_VERSION}`, JSON.stringify(parsedImportedState.state));\n      window.location.reload();\n    } catch (e) {\n      console.error('Failed to import state');\n    }\n  };\n\n  useEffect(() => {\n    makeExportStateFile();\n  }, [state]);\n\n  return (\n    <Grid\n      templateColumns=\"repeat(1, 1fr)\"\n      gap={5}\n    >\n      <Flex>\n        <input\n          type=\"file\"\n          accept=\"application/json\"\n          onChange={async (e) => {\n            e.preventDefault();\n            const reader = new FileReader();\n            reader.onload = async (_e) => {\n              const text = _e?.target?.result;\n              if (typeof text === 'string') {\n                importState(text as string);\n              }\n            };\n            reader.readAsText(importStateRef.current?.files?.[0] as Blob);\n          }}\n          ref={importStateRef}\n          hidden\n        />\n        <Button\n          width=\"100%\"\n          onClick={() => {\n            importStateRef.current?.click();\n          }}\n        >\n          Import Saved State\n        </Button>\n      </Flex>\n      {/* <Flex>\n        <Button width=\"100%\">Import Characters</Button>\n      </Flex> */}\n      <Flex>\n        <a\n          hidden\n          download={makeExportStateFileName()}\n          href={exportStateLink}\n          ref={exportStateRef}\n        >\n          Export\n        </a>\n        <Button width=\"100%\" onClick={() => exportStateRef.current?.click()}>Export Save State</Button>\n      </Flex>\n      <AlertDeleteState confirmAction={clearState} />\n    </Grid>\n  );\n};\n","import { IconType } from 'react-icons';\nimport { AiFillRobot, AiOutlineFileText } from 'react-icons/ai';\nimport { BsPersonFill } from 'react-icons/bs';\nimport { FaBars, FaRegMap, FaCog } from 'react-icons/fa';\nimport { GiBirdClaw } from 'react-icons/gi';\nimport React, { ReactElement } from 'react';\nimport { NPCs } from '../Characters/NPCs';\nimport { Players } from '../Characters/Players';\nimport { DMScreen } from '../DMScreen';\nimport { CampaignNotes } from '../DMScreen/CampaignNotes';\nimport { Initiative } from '../Initiative';\nimport { Settings } from '../Settings';\n\nexport type Route = {\n  component: ReactElement,\n  basePath: string,\n  path: string,\n  exact?: boolean,\n  pageTitle: string,\n  icon?: IconType,\n  disabled?: boolean;\n};\n\nconst RouteConfig: Route[] = [\n  {\n    component: <Initiative />,\n    path: '/',\n    basePath: '/',\n    exact: true,\n    pageTitle: 'Turn Order',\n    icon: FaBars,\n  },\n  {\n    component: <DMScreen />,\n    path: '/screen',\n    basePath: '/screen',\n    pageTitle: 'Multi Edit',\n    icon: FaRegMap,\n  },\n  {\n    component: <Players />,\n    path: '/players',\n    basePath: '/players/:id?',\n    pageTitle: 'Players',\n    icon: BsPersonFill,\n  },\n  {\n    component: <NPCs showHostile />,\n    path: '/enemies',\n    basePath: '/enemies/:id?',\n    pageTitle: 'Enemies',\n    icon: GiBirdClaw,\n  },\n  {\n    component: <NPCs showFriendly showNeutral />,\n    path: '/npcs',\n    basePath: '/npcs/:id?',\n    pageTitle: 'Other NPCs',\n    icon: AiFillRobot,\n  },\n  {\n    component: <CampaignNotes />,\n    path: '/notes',\n    basePath: '/notes',\n    pageTitle: 'Campaign Notes',\n    icon: AiOutlineFileText,\n    disabled: true,\n  },\n  {\n    component: <Settings />,\n    path: '/settings',\n    basePath: '/settings',\n    pageTitle: 'Settings',\n    icon: FaCog,\n  },\n];\n\nexport default RouteConfig;\n","import {\n  Box,\n  Center, Container, Divider, Heading,\n} from '@chakra-ui/react';\nimport {\n  Route, Switch, useHistory,\n} from 'react-router-dom';\nimport React from 'react';\nimport { setCampaignTitle, setTurn } from '../common/campaignSlice';\nimport { useAppDispatch } from '../common/hooks';\nimport { refreshNPCs } from '../common/npcSlice';\nimport { refreshPlayers } from '../common/playerSlice';\nimport { loadFromLocalStorage, RootState } from '../common/store';\nimport { CampaignTitle } from './CampaignTitle';\nimport { Sidebar } from './Sidebar';\nimport './App.css';\nimport RouteConfig from './RouteConfig';\nimport { useQuery } from '../common/util';\n\nexport function App() {\n  const dispatch = useAppDispatch();\n  const history = useHistory();\n  const query = useQuery();\n\n  (window as any).appHistory = history;\n\n  const tinyMode = query.get('tinymode');\n  const [appMinW, appMaxW] = tinyMode ? [400, 800] : [650, 800];\n\n  window.addEventListener('storage', () => {\n    const persistedStorage: RootState = loadFromLocalStorage();\n\n    if (!document.hasFocus()) {\n      const refreshActions = [\n        refreshPlayers(persistedStorage?.players?.players || []),\n        refreshNPCs(persistedStorage?.npcs?.npcs || []),\n        setCampaignTitle(persistedStorage?.campaign?.campaignTitle || ''),\n        setTurn(persistedStorage?.campaign?.currentTurnId || ''),\n      ];\n      refreshActions.map(dispatch);\n    }\n  });\n\n  return (\n    <Box\n      className=\"App\"\n      pt={tinyMode ? '0' : '2em'}\n    >\n      {!tinyMode && <Sidebar routes={RouteConfig} />}\n      <Container maxW={appMaxW} minW={appMinW}>\n        {!tinyMode && <CampaignTitle />}\n        <Switch>\n          {\n            RouteConfig.map(({\n              component, basePath, pageTitle, exact,\n            }) => (\n              <Route\n                path={basePath}\n                exact={exact}\n                key={pageTitle}\n              >\n                {\n                  !tinyMode && (\n                    <Box>\n                      <Center><Heading size=\"md\">{pageTitle}</Heading></Center>\n                      <Divider mt={4} mb={4} />\n                    </Box>\n                  )\n                }\n                {component}\n              </Route>\n            ))\n          }\n        </Switch>\n      </Container>\n    </Box>\n  );\n}\n","import { extendTheme } from '@chakra-ui/react';\n\nexport const theme = extendTheme({\n  components: {\n    Drawer: {\n      variants: {\n        alwaysOpen: {\n          dialog: {\n            pointerEvents: 'auto',\n          },\n          dialogContainer: {\n            pointerEvents: 'none',\n          },\n        },\n      },\n    },\n  },\n});\n\nexport const characterTypeColours = {\n  enemy: '#AA0000',\n  friendly: '#AAAA00',\n  neutral: '#AAAAAA',\n  player: '#00AA00',\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ChakraProvider } from '@chakra-ui/react';\nimport { Provider } from 'react-redux';\nimport {\n  BrowserRouter as Router,\n} from 'react-router-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { App, theme } from './App';\nimport { store } from './common/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <ChakraProvider theme={theme}>\n      <React.StrictMode>\n        <Router\n          basename=\"/dndtracker\"\n        >\n          <App />\n        </Router>\n      </React.StrictMode>\n    </ChakraProvider>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}