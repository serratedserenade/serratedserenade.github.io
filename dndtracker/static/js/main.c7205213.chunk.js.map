{"version":3,"sources":["common/util.ts","reportWebVitals.ts","common/formik-chakra/FormControl.tsx","common/formik-chakra/InputControl.tsx","common/formik-chakra/NumberInputControl.tsx","common/formik-chakra/SwitchControl.tsx","common/hooks.ts","common/npcSlice.ts","common/formik-chakra/TextareaControl.tsx","Characters/ModifyCharacterConditionsField.tsx","Characters/ModifyCurrentHPInput.tsx","Characters/ModifyExternalNotes.tsx","Characters/characterFormUtils.ts","Characters/ModifyNPCForm.tsx","Characters/NPCs.tsx","common/playerSlice.ts","Characters/ModifyPlayerForm.tsx","Characters/Players.tsx","common/campaignSlice.ts","common/store.ts","Initiative/NPCTurn.tsx","DMScreen/DeathSaveCounter.tsx","Initiative/PlayerTurn.tsx","Initiative/Initiative.tsx","Settings/Settings.tsx","App/CampaignTitle.tsx","App/MenuItemLink.tsx","App/Sidebar.tsx","DMScreen/DMScreen.tsx","App/App.tsx","App/theme.ts","index.tsx"],"names":["Dice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","FormControl","props","children","name","label","helperText","hideError","rest","useField","error","touched","isInvalid","htmlFor","InputControl","inputProps","field","id","NumberInputControl","n","showStepper","numberInputProps","fieldId","setFieldValue","useFormikContext","onChange","value","Number","SwitchControl","switchProps","css","as","Flex","alignItems","isChecked","useAppDispatch","useDispatch","useAppSelector","useSelector","rollDice","max","Math","ceil","random","npcSlice","createSlice","initialState","npcs","reducers","addNPC","state","action","v4","push","payload","removeNPC","index","findIndex","v","splice","console","warn","refreshNPCs","length","modifyNPC","foundNPC","i","rollAllNPCInitiative","forEach","initiative","d20","modifyNPCValidationSchema","Yup","currentHP","integer","required","maxHP","tempHP","default","armourClass","min","initiativeMod","notes","externalNotes","of","type","url","conditions","displayOnTurnOrder","isHostile","isFriendly","isBoss","showHealth","showInitiative","showAC","showName","actions","TextareaControl","textareaProps","ModifyCharacterConditionsField","character","context","render","arrayHelpers","addCondition","element","document","querySelector","tagInput","toString","p","border","borderRadius","mb","justifyContent","fontWeight","mt","opacity","values","map","condition","idx","variant","size","m","onClick","remove","onKeyPress","e","code","AddIcon","cursor","ModifyCurrentHPInput","width","submitForm","ModifyExternalNoteReferences","errors","flex","textAlign","linkLabelId","linkUrlId","note","_hover","transition","window","open","AiOutlineLink","w","h","color","textOverflow","overflow","whiteSpace","ml","aria-label","icon","CloseIcon","placeholder","colorScheme","linkLabelEle","linkUrlEle","labelInput","urlInput","addNote","hidden","resetManualFormFields","ModifyNPCForm","npc","dispatch","params","useParams","formColour","characterTypeColours","neutral","enemy","friendly","NPCModifyStatFields","fontSize","templateColumns","templateRows","gap","colSpan","rightIcon","GiDiceTwentyFacesTwenty","displayString","NPCModifyActions","_npc","placement","dirty","IoMdSave","ImRedo","AiFillDelete","initialValues","onSubmit","resetForm","onReset","enableReinitialize","validationSchema","className","backgroundColor","abs","resize","height","allowToggle","allowMultiple","key","display","NPCFormList","NPCs","showHostile","showFriendly","showNeutral","filter","addNPCValidationSchema","moreThan","AddNPCForm","addFormFields","IC","playerSlice","players","addPlayer","removePlayer","refreshPlayers","modifyPlayer","foundPlayer","modPlayer","toLowerCase","includes","passedDeathSaves","failedDeathSaves","rollAllPlayerInitiative","modifyPlayerValidationSchema","ModifyPlayerForm","player","PlayerModifyStatFields","PlayerModifyActions","_player","PlayerFormList","Players","addPlayerValidationSchema","AddPlayerForm","campaignSlice","currentTurnId","campaignTitle","setTurn","setCampaignTitle","setCampaignNotes","STORE_KEY","APP_VERSION","loadFromLocalStorage","serialisedState","localStorage","getItem","JSON","parse","store","configureStore","reducer","playerReducer","campaign","campaignReducer","npcReducer","preloadedState","subscribe","hasFocus","stringify","setItem","saveToLocalStorage","getState","NPCTurn","isActive","tinyMode","GiCheckedShield","BsHeartFill","GiWalkingBoot","j","DeathSaveCounter","disableAction","setDeathSaveThrowAction","count","prop","DeathSaveFailedIcon","saveCount","RiSkull2Fill","RiSkull2Line","DeathSaveSuccessIcon","HiPlusCircle","HiPlus","pointerEvents","minW","orientation","PlayerTurn","c","getSortedTurns","showAllTurns","formattedPlayers","formattedNPCs","sortedTurns","sort","a","b","aChar","bChar","returnValue","array","currentTurnIndex","slice","Initiative","history","useHistory","changePageMethod","historyObj","opener","appHistory","findFocus","iter","focus","setTimeout","turns","divider","undefined","spacing","position","bottom","currentTurnCharacter","nextCharacter","AlertDeleteState","confirmAction","useDisclosure","isOpen","onOpen","onClose","cancelRef","useRef","leastDestructiveRef","ref","Settings","s","useState","exportStateLink","setExportStateLink","exportStateRef","importStateRef","importState","importedState","parsedImportedState","location","reload","useEffect","data","Blob","version","date","Date","now","URL","revokeObjectURL","createObjectURL","makeExportStateFile","accept","preventDefault","reader","FileReader","onload","_e","text","target","result","readAsText","current","files","click","download","href","removeItem","CampaignTitle","setTitleAction","ct","editableCampaignTitle","setEditableCampaignTitle","editTitleEnabled","setEditTitleEnabled","editTitleRef","React","GoPencil","MenuItemLink","to","activeOnlyWhenExact","match","useRouteMatch","path","exact","Sidebar","routes","isLargerThanMinWidth","windowSize","setWindowSize","handleResize","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","defaultIsOpen","pt","pb","pl","pr","GiHamburgerMenu","blockScrollOnMount","trapFocus","pageTitle","DMScreen","useCheckboxGroup","defaultValue","selectedCharacters","setSelectedCharacters","setValue","editPanelRef","characters","availablePlayers","availableEnemies","healthMod","setHealthMod","hPModPanels","title","setMethod","modifyHPValue","reset","dispatchActions","selectedPlayers","propMethod","allExistingConditions","reduce","conditionToRemove","setConditionToRemove","conditionToAdd","setConditionToAdd","modifyCondValue","modConditionValue","modifiedCondition","conditionIndex","indexOf","conditionAlreadyExists","flexGrow","disabled","borderColour","cond","clientHeight","direction","in","maxW","App","useLocation","qps","URLSearchParams","search","get","appMinW","appMaxW","persistedStorage","component","basePath","FaBars","FaRegMap","BsPersonFill","GiBirdClaw","AiFillRobot","FaCog","theme","extendTheme","components","Drawer","variants","alwaysOpen","dialog","dialogContainer","ReactDOM","StrictMode","basename","getElementById"],"mappings":"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","file":"static/js/main.c7205213.chunk.js","sourcesContent":["export enum Dice {\n  d100 = 100,\n  d20 = 20,\n  d12 = 12,\n  d10 = 10,\n  d8 = 8,\n  d6 = 6,\n  d4 = 4,\n  d2 = 2\n}\n\nexport const rollDice = (max: number): number => Math.ceil(Math.random() * max);\n\nexport const rollAdvantage = (max: number): number => Math.max(rollDice(max), rollDice(max));\n\nexport const rollDisadvantage = (max: number): number => Math.min(rollDice(max), rollDice(max));\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n  FormControl as ChakraFormControl,\n  FormControlProps,\n  FormErrorMessage,\n  FormHelperText,\n  FormLabel,\n} from '@chakra-ui/react';\nimport { useField } from 'formik';\nimport React, { FC } from 'react';\n\nexport interface BaseProps extends FormControlProps {\n  name: string;\n  label?: string;\n  helperText?: string;\n  hideError?: boolean;\n}\n\nexport const FormControl: FC<BaseProps> = (props: BaseProps) => {\n  const {\n    children, name, label, helperText, hideError, ...rest\n  } = props;\n  const [, { error, touched }] = useField(name);\n\n  return (\n    <ChakraFormControl isInvalid={!!error && touched} {...rest}>\n      {label && <FormLabel htmlFor={name}>{label}</FormLabel>}\n      {children}\n      {!hideError && error && <FormErrorMessage>{error}</FormErrorMessage>}\n      {helperText && <FormHelperText>{helperText}</FormHelperText>}\n    </ChakraFormControl>\n  );\n};\n\nexport default FormControl;\n","import { Input, InputProps } from '@chakra-ui/react';\nimport { useField } from 'formik';\nimport React, { FC } from 'react';\nimport { BaseProps, FormControl } from './FormControl';\n\nexport type InputControlProps = BaseProps & { inputProps?: InputProps };\n\nexport const InputControl: FC<InputControlProps> = (\n  props: InputControlProps,\n) => {\n  const {\n    name, label, inputProps, ...rest\n  } = props;\n  const [field] = useField(name);\n\n  return (\n    <FormControl name={name} label={label} {...rest}>\n      <Input {...field} id={name} {...inputProps} />\n    </FormControl>\n  );\n};\n\nexport default InputControl;\n","import {\n  NumberDecrementStepper,\n  NumberIncrementStepper,\n  NumberInput,\n  NumberInputField,\n  NumberInputProps,\n  NumberInputStepper,\n} from '@chakra-ui/react';\nimport { useField, useFormikContext } from 'formik';\nimport React, { FC, ReactNode } from 'react';\nimport { BaseProps, FormControl } from './FormControl';\n\nexport type NumberInputControlProps = BaseProps & {\n  numberInputProps?: NumberInputProps;\n  showStepper?: boolean;\n  children?: ReactNode;\n  fieldId?: string;\n};\n\nexport const NumberInputControl: FC<NumberInputControlProps> = (\n  props: NumberInputControlProps,\n) => {\n  const {\n    name,\n    label,\n    showStepper = true,\n    children,\n    numberInputProps,\n    fieldId,\n    ...rest\n  } = props;\n  const [field, { error, touched }] = useField(name);\n  const { setFieldValue } = useFormikContext();\n\n  const $setFieldValue = (n: string) => (value: unknown) => setFieldValue(n, Number(value));\n\n  return (\n    <FormControl name={name} label={label} {...rest}>\n      <NumberInput\n        {...field}\n        id={name}\n        onChange={$setFieldValue(name)}\n        isInvalid={!!error && touched}\n        {...numberInputProps}\n      >\n        <NumberInputField name={name} id={fieldId} />\n        {showStepper && (\n          <NumberInputStepper>\n            <NumberIncrementStepper />\n            <NumberDecrementStepper />\n          </NumberInputStepper>\n        )}\n        {children}\n      </NumberInput>\n    </FormControl>\n  );\n};\n\nexport default NumberInputControl;\n","import {\n  Box, Flex, Switch, SwitchProps,\n} from '@chakra-ui/react';\nimport { css } from '@emotion/react';\nimport { useField } from 'formik';\nimport React, { FC } from 'react';\nimport { BaseProps, FormControl } from './FormControl';\n\nexport type SwitchControlProps = BaseProps & { switchProps?: SwitchProps };\n\nexport const SwitchControl: FC<SwitchControlProps> = (\n  props: SwitchControlProps,\n) => {\n  const {\n    name, label, switchProps, ...rest\n  } = props;\n  const [field, { error, touched }] = useField(name);\n\n  return (\n    <Box\n      css={css`\n        .chakra-form__label {\n          margin-bottom: 0;\n        }\n        .chakra-switch {\n          display: flex;\n          align-items: center;\n          margin-right: 0.75rem;\n        }\n        .chakra-form__error-message {\n          margin-top: 0;\n        }\n      `}\n    >\n      <FormControl\n        name={name}\n        label={label}\n        as={Flex}\n        alignItems=\"center\"\n        {...rest}\n      >\n        <Switch\n          {...field}\n          id={name}\n          isInvalid={!!error && touched}\n          isChecked={field.value}\n          {...switchProps}\n        />\n      </FormControl>\n    </Box>\n  );\n};\n\nexport default SwitchControl;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { v4 } from 'uuid';\nimport * as Yup from 'yup';\nimport { Dice, rollDice } from './util';\nimport { NPC } from '../Characters/NPC.interfaces';\n\nexport interface NPCState {\n  npcs: NPC[];\n}\n\nconst initialState: NPCState = {\n  npcs: [],\n};\n\nexport const npcSlice = createSlice({\n  name: 'npc',\n  initialState,\n  reducers: {\n    addNPC: (state, action: PayloadAction<Omit<NPC, 'id'>>) => {\n      const id = v4();\n      state.npcs.push({\n        ...action.payload,\n        id,\n      });\n    },\n    removeNPC: (state, action: PayloadAction<string>) => {\n      const index = state.npcs.findIndex((v) => v.id === action.payload);\n\n      if (index >= 0) {\n        state.npcs.splice(index, 1);\n      } else {\n        console.warn(`Invalid NPC ${action.payload}`);\n      }\n    },\n    refreshNPCs: (state, action: PayloadAction<NPC[] | undefined>) => {\n      if (action.payload) {\n        state.npcs.splice(0, state.npcs.length, ...action.payload);\n      }\n    },\n    modifyNPC: (state, action: PayloadAction<Partial<NPC>>) => {\n      const foundNPC = state.npcs.findIndex((i) => i.id === action.payload.id);\n\n      if (foundNPC >= 0) {\n        const { npcs } = state;\n        npcs[foundNPC] = {\n          ...state.npcs[foundNPC],\n          ...action.payload,\n        };\n      }\n    },\n    rollAllNPCInitiative: (state) => {\n      state.npcs.forEach((i) => {\n        const npc = i;\n        npc.initiative = rollDice(Dice.d20);\n      });\n    },\n  },\n});\n\nexport const modifyNPCValidationSchema = Yup.object({\n  name: Yup.string(),\n  currentHP: Yup.number().integer().required(),\n  maxHP: Yup.number().integer().required(),\n  tempHP: Yup.number().integer().default(0).required(),\n  armourClass: Yup.number().integer().required(),\n  initiative: Yup.number().integer().min(1).max(20)\n    .required(),\n  initiativeMod: Yup.number().integer().required(),\n  notes: Yup.string(),\n  externalNotes: Yup.array().of(Yup.object({\n    type: Yup.string(),\n    url: Yup.string().url(),\n    label: Yup.string(),\n  })),\n  conditions: Yup.array().of(Yup.string()).required(),\n  displayOnTurnOrder: Yup.boolean().required(),\n  isHostile: Yup.boolean().required(),\n  isFriendly: Yup.boolean().required(),\n  isBoss: Yup.boolean().required(),\n  showHealth: Yup.boolean().required(),\n  showInitiative: Yup.boolean().required(),\n  showAC: Yup.boolean().required(),\n  showName: Yup.boolean().required(),\n});\n\nexport const {\n  addNPC, removeNPC, refreshNPCs, rollAllNPCInitiative, modifyNPC,\n} = npcSlice.actions;\n\nexport default npcSlice.reducer;\n","import { Textarea, TextareaProps } from '@chakra-ui/react';\nimport { useField } from 'formik';\nimport React, { FC } from 'react';\nimport { BaseProps, FormControl } from './FormControl';\n\nexport type TextareaControlProps = BaseProps & {\n  textareaProps?: TextareaProps;\n};\n\nexport const TextareaControl: FC<TextareaControlProps> = (\n  props: TextareaControlProps,\n) => {\n  const {\n    name, label, textareaProps, ...rest\n  } = props;\n  const [field] = useField(name);\n\n  return (\n    <FormControl name={name} label={label} {...rest}>\n      <Textarea {...field} id={name} {...textareaProps} />\n    </FormControl>\n  );\n};\n\nexport default TextareaControl;\n","import { AddIcon } from '@chakra-ui/icons';\nimport {\n  Text, Box, Flex, Divider, Tag, TagLabel, TagCloseButton, Input, TagRightIcon, InputProps,\n} from '@chakra-ui/react';\nimport { useFormikContext, FieldArray } from 'formik';\nimport React from 'react';\nimport { Character } from './Character.interfaces';\n\nexport const ModifyCharacterConditionsField = ({ character }: { character: Character }) => {\n  const context = useFormikContext<Character>();\n  return (\n    <FieldArray\n      name=\"conditions\"\n      render={(arrayHelpers) => {\n        const addCondition = () => {\n          const element = document.querySelector(`#tag-input-${character.id}`) as InputProps;\n          if (element?.value) {\n            const tagInput = element.value.toString();\n            element.value = '';\n            arrayHelpers.push(tagInput);\n          }\n        };\n\n        return (\n          <Box p={2} border=\"1px solid #00000066\" borderRadius={8} mb={2}>\n            <Flex justifyContent=\"center\"><Text fontWeight=\"bold\">Conditions</Text></Flex>\n            <Divider mt={1} mb={1} opacity=\"0.3\" />\n            {context.values.conditions.map((condition, idx) => (\n              <Tag\n                variant=\"solid\"\n                borderRadius=\"full\"\n                size=\"lg\"\n                m={1}\n                key={condition}\n              >\n                <TagLabel>{condition}</TagLabel>\n                <TagCloseButton onClick={() => arrayHelpers.remove(idx)} />\n              </Tag>\n            ))}\n            <Tag\n              variant=\"outline\"\n              borderRadius=\"full\"\n              size=\"lg\"\n              m={1}\n            >\n              <Input\n                size=\"xs\"\n                id={`tag-input-${character.id}`}\n                onKeyPress={(e) => {\n                  if (e.code === 'Enter') {\n                    addCondition();\n                  }\n                }}\n              />\n              <TagRightIcon\n                as={AddIcon}\n                cursor=\"pointer\"\n                onClick={() => {\n                  addCondition();\n                }}\n              />\n            </Tag>\n          </Box>\n        );\n      }}\n    />\n  );\n};\n","import { Box, HStack, Text } from '@chakra-ui/react';\nimport { useFormikContext } from 'formik';\nimport React from 'react';\nimport { NumberInputControl } from '../common/formik-chakra';\nimport { Character } from './Character.interfaces';\n\nexport const ModifyCurrentHPInput = ({ character }: { character: Character }) => {\n  const context = useFormikContext<Character>();\n  return (\n    <>\n      <Box>\n        <HStack>\n          <Text fontWeight=\"bold\">THP </Text>\n          <NumberInputControl\n            hideError\n            name=\"tempHP\"\n            width=\"6em\"\n            onKeyPress={(e) => e.code === 'Enter' && context.submitForm()}\n          />\n        </HStack>\n      </Box>\n      <Box>\n        <HStack>\n          <Text fontWeight=\"bold\">HP </Text>\n          <NumberInputControl\n            hideError\n            name=\"currentHP\"\n            width=\"6em\"\n            fieldId={`currentHP-${character.id}`}\n            onKeyPress={(e) => e.code === 'Enter' && context.submitForm()}\n          />\n          <Text>\n            /\n            {' '}\n            {character.maxHP}\n          </Text>\n        </HStack>\n      </Box>\n    </>\n  );\n};\n","import { AddIcon, CloseIcon } from '@chakra-ui/icons';\nimport {\n  AccordionButton, AccordionIcon, AccordionItem, Flex,\n  AccordionPanel, Box, HStack, Icon, IconButton, Input, VStack, Text, Spacer, InputProps,\n} from '@chakra-ui/react';\nimport { FieldArray, useFormikContext } from 'formik';\nimport React from 'react';\nimport { AiOutlineLink } from 'react-icons/ai';\nimport { Character, ExternalNote } from './Character.interfaces';\n\nexport const ModifyExternalNoteReferences = ({ character }: { character: Character }) => {\n  const context = useFormikContext<Character>();\n  const errors = context?.errors;\n  return (\n    <AccordionItem>\n      <AccordionButton>\n        <Box flex=\"1\" textAlign=\"left\">\n          <strong>External Notes</strong>\n        </Box>\n        <AccordionIcon />\n      </AccordionButton>\n      <AccordionPanel>\n        <FieldArray\n          name=\"externalNotes\"\n          render={(arrayHelpers) => {\n            const linkLabelId = `link-label-${character.id}`;\n            const linkUrlId = `link-url-${character.id}`;\n            const addNote = () => {\n              const linkLabelEle = document.querySelector(`#${linkLabelId}`) as InputProps;\n              const linkUrlEle = document.querySelector(`#${linkUrlId}`) as InputProps;\n\n              if (linkLabelEle?.value && linkUrlEle?.value) {\n                const labelInput = linkLabelEle.value.toString();\n                const urlInput = linkUrlEle.value.toString();\n                linkLabelEle.value = '';\n                linkUrlEle.value = '';\n\n                const value: ExternalNote = {\n                  type: 'link',\n                  label: labelInput,\n                  url: urlInput,\n                };\n\n                arrayHelpers.push(value);\n              }\n            };\n            return (\n              <VStack>\n                {\n                context.values.externalNotes.map((note, idx) => (\n                  <Flex\n                    alignItems=\"center\"\n                    width=\"100%\"\n                    border=\"0.2em solid #0000FF22\"\n                    borderRadius={6}\n                    cursor=\"pointer\"\n                    _hover={{\n                      border: '0.2em solid #0000FF',\n                    }}\n                    transition=\"0.2s\"\n                    key={note.label + note.url}\n                  >\n                    <Box\n                      p={1.5}\n                      onClick={() => window.open(note.url, '_blank')}\n                    >\n                      <Icon as={AiOutlineLink} w={6} h={6} color=\"blue\" />\n                    </Box>\n                    <Text\n                      color=\"blue\"\n                      textOverflow=\"ellipsis\"\n                      overflow=\"hidden\"\n                      whiteSpace=\"nowrap\"\n                      onClick={() => window.open(note.url, '_blank')}\n                      width=\"100%\"\n                    >\n                      {note.label}\n                      {' '}\n                      (\n                      {note.url}\n                      )\n                    </Text>\n                    <Spacer />\n                    <IconButton\n                      ml={1}\n                      aria-label=\"Save\"\n                      icon={<Icon as={CloseIcon} />}\n                      color=\"red\"\n                      variant=\"ghost\"\n                      onClick={() => arrayHelpers.remove(idx)}\n                    />\n                  </Flex>\n                ))\n              }\n                <HStack width=\"100%\">\n                  <Input\n                    placeholder=\"Link Label\"\n                    id={linkLabelId}\n                  />\n                  <Input\n                    placeholder=\"URL\"\n                    id={linkUrlId}\n                  />\n                  <IconButton\n                    ml={2}\n                    aria-label=\"Save\"\n                    icon={<Icon as={AddIcon} />}\n                    colorScheme=\"blue\"\n                    variant=\"outline\"\n                    onClick={() => addNote()}\n                  />\n                </HStack>\n                <Text\n                  width=\"100%\"\n                  color=\"red\"\n                  hidden={!(!!errors.externalNotes && errors.externalNotes.length > 0)}\n                >\n                  There are errors with the links inserted.\n                  Make sure the URLs are of a valid format.\n                </Text>\n              </VStack>\n            );\n          }}\n        />\n      </AccordionPanel>\n    </AccordionItem>\n  );\n};\n","import { Character } from './Character.interfaces';\n\nexport const resetManualFormFields = (character: Character) => {\n  const linkLabelId = `#link-label-${character.id}`;\n  const linkUrlId = `#link-url-${character.id}`;\n  const tagInputId = `#tag-input-${character.id}`;\n  const ids = [\n    linkLabelId,\n    linkUrlId,\n    tagInputId,\n  ];\n  ids.forEach((i) => {\n    const element = (document.querySelector(i) as HTMLInputElement);\n    if (element) {\n      element.value = '';\n    }\n  });\n};\n","import {\n  Accordion, AccordionButton, AccordionIcon, AccordionItem,\n  AccordionPanel, Box, Button, FormControl, FormLabel, Grid,\n  GridItem, HStack, Icon, SimpleGrid, Spacer, Text, Tooltip, VStack,\n} from '@chakra-ui/react';\nimport { Form, Formik, useFormikContext } from 'formik';\nimport { AiFillDelete } from 'react-icons/ai';\nimport { GiDiceTwentyFacesTwenty } from 'react-icons/gi';\nimport { ImRedo } from 'react-icons/im';\nimport { IoMdSave } from 'react-icons/io';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { NumberInputControl, SwitchControl } from '../common/formik-chakra';\nimport TextareaControl from '../common/formik-chakra/TextareaControl';\nimport { useAppDispatch } from '../common/hooks';\nimport { modifyNPC, removeNPC, modifyNPCValidationSchema } from '../common/npcSlice';\nimport { Dice, rollDice } from '../common/util';\nimport { ModifyCharacterConditionsField } from './ModifyCharacterConditionsField';\nimport { NPC } from './NPC.interfaces';\nimport { characterTypeColours } from '../App';\nimport { ModifyCurrentHPInput } from './ModifyCurrentHPInput';\nimport { ModifyExternalNoteReferences } from './ModifyExternalNotes';\nimport { resetManualFormFields } from './characterFormUtils';\n\ninterface ModifyNPCFormProps {\n  npc: NPC;\n}\n\nexport const ModifyNPCForm = ({ npc }: ModifyNPCFormProps) => {\n  const dispatch = useAppDispatch();\n\n  const params = useParams<{id: string}>();\n\n  const modifyNPCAction = (n: NPC) => dispatch(modifyNPC(n));\n  const removeNPCAction = (id: string) => dispatch(removeNPC(id));\n\n  let formColour = characterTypeColours.neutral;\n\n  if (npc.isHostile) {\n    formColour = characterTypeColours.enemy;\n  } else if (npc.isFriendly) {\n    formColour = characterTypeColours.friendly;\n  }\n\n  const NPCModifyStatFields = () => {\n    const editStatFields: Array<[string, string]> = [\n      ['AC: ', 'armourClass'],\n      ['Initiative: ', 'initiative'],\n      ['Init. Mod: ', 'initiativeMod'],\n      ['Max HP: ', 'maxHP'],\n    ];\n\n    const { setFieldValue } = useFormikContext<NPC>();\n    return (\n      <AccordionItem>\n        <AccordionButton>\n          <Box flex=\"1\" textAlign=\"left\">\n            <strong>Edit Stats</strong>\n          </Box>\n          <AccordionIcon />\n        </AccordionButton>\n        <AccordionPanel>\n          <Grid\n            fontSize=\"sm\"\n            templateColumns=\"repeat(4, 1fr)\"\n            templateRows=\"repeat(2, 1fr)\"\n            gap={4}\n          >\n            <GridItem\n              colSpan={4}\n            >\n              <Button\n                width=\"100%\"\n                onClick={() => setFieldValue('initiative', rollDice(Dice.d20))}\n                variant=\"outline\"\n                rightIcon={<Icon as={GiDiceTwentyFacesTwenty} />}\n              >\n                Roll Initiative\n              </Button>\n            </GridItem>\n            {\n              editStatFields.map(([displayString, value]) => (\n                <GridItem key={value}>\n                  <HStack>\n                    <Text>{displayString}</Text>\n                    <NumberInputControl hideError name={value} width=\"8em\" />\n                  </HStack>\n                </GridItem>\n              ))\n            }\n          </Grid>\n        </AccordionPanel>\n      </AccordionItem>\n    );\n  };\n\n  const NPCModifyActions = ({ npc: _npc }: { npc: NPC }) => {\n    const context = useFormikContext<NPC>();\n\n    return (\n      <HStack mt={4}>\n        <Tooltip label=\"Save\" placement=\"top\">\n          <Button\n            width=\"100%\"\n            hidden={!context.dirty}\n            variant=\"solid\"\n            colorScheme=\"green\"\n            onClick={() => context.submitForm()}\n          >\n            <Icon as={IoMdSave} />\n          </Button>\n        </Tooltip>\n        <Tooltip label=\"Reset\" placement=\"top\">\n          <Button\n            width=\"100%\"\n            type=\"reset\"\n            hidden={!context.dirty}\n            variant=\"solid\"\n          >\n            <Icon as={ImRedo} />\n          </Button>\n        </Tooltip>\n        <Tooltip label=\"Delete\" placement=\"top\">\n          <Button\n            width=\"100%\"\n            onClick={() => removeNPCAction(_npc.id)}\n            variant=\"solid\"\n            colorScheme=\"red\"\n          >\n            <Icon as={AiFillDelete} />\n          </Button>\n        </Tooltip>\n      </HStack>\n    );\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        ...npc,\n        externalNotes: npc.externalNotes || [],\n      }}\n      onSubmit={(values, actions) => {\n        modifyNPCAction(values);\n        resetManualFormFields(npc);\n        actions.resetForm();\n      }}\n      onReset={() => {\n        resetManualFormFields(npc);\n      }}\n      enableReinitialize\n      validationSchema={modifyNPCValidationSchema}\n    >\n      <Box\n        className=\"\"\n        width=\"100%\"\n        id={`character-${npc.id}`}\n        border={`0.3em solid ${formColour}${params.id === npc.id ? 'FF' : 22}`}\n        borderRadius={10}\n        p={4}\n      >\n        <Form>\n          <HStack\n            p={1}\n            mb={2}\n          >\n            <Box\n              textAlign=\"center\"\n              width=\"100%\"\n              backgroundColor={formColour}\n              color=\"white\"\n              borderRadius={8}\n              p={2}\n            >\n              <Text fontWeight=\"bold\">{npc.name}</Text>\n            </Box>\n            <NPCModifyActions npc={npc} />\n          </HStack>\n          <SimpleGrid templateColumns=\"repeat(3, 1fr)\" mt={4} mb={4}>\n            <GridItem>\n              <VStack alignItems=\"flex-start\">\n                <ModifyCurrentHPInput character={npc} />\n                <Text>\n                  AC\n                  {' '}\n                  {npc.armourClass}\n                  , Init.\n                  {' '}\n                  {npc.initiative + npc.initiativeMod}\n                  {' '}\n                  (\n                  {npc.initiative}\n                  <Icon as={GiDiceTwentyFacesTwenty} />\n                  {' '}\n                  {npc.initiativeMod >= 0 ? '+' : '-'}\n                  {' '}\n                  {Math.abs(npc.initiativeMod)}\n                  )\n                </Text>\n              </VStack>\n            </GridItem>\n            <GridItem colSpan={2}>\n              <TextareaControl\n                name=\"notes\"\n                textareaProps={{\n                  resize: 'vertical',\n                  height: '20em',\n                  fontSize: 'xs',\n                }}\n              />\n            </GridItem>\n          </SimpleGrid>\n          <ModifyCharacterConditionsField character={npc} />\n          <Accordion allowToggle allowMultiple>\n            <ModifyExternalNoteReferences character={npc} />\n            <NPCModifyStatFields />\n            <AccordionItem>\n              <AccordionButton>\n                <Box flex=\"1\" textAlign=\"left\">\n                  <strong>Options</strong>\n                </Box>\n                <AccordionIcon />\n              </AccordionButton>\n              <AccordionPanel>\n                <Grid\n                  fontSize=\"sm\"\n                  templateColumns=\"repeat(4, 1fr)\"\n                  templateRows=\"repeat(2, 1fr)\"\n                  gap={6}\n                >\n                  {\n                    ([\n                      ['Reveal Name', 'showName'],\n                      ['Reveal Health', 'showHealth'],\n                      ['Reveal Armour Class', 'showAC'],\n                      ['Reveal Initiative', 'showInitiative'],\n                      ['Show in Turn Order', 'displayOnTurnOrder'],\n                      ['Hostile to Party', 'isHostile'],\n                      ['Friendly to Party', 'isFriendly'],\n                    ] as Array<[string, keyof NPC]>).map(([displayString, key]) => (\n                      <FormControl\n                        display=\"flex\"\n                        alignItems=\"center\"\n                        key={key}\n                      >\n                        <FormLabel mb=\"0\" fontSize=\"xs\">\n                          {displayString}\n                        </FormLabel>\n                        <Spacer />\n                        <SwitchControl name={key} />\n                      </FormControl>\n                    ))\n                  }\n                </Grid>\n              </AccordionPanel>\n            </AccordionItem>\n          </Accordion>\n        </Form>\n      </Box>\n    </Formik>\n  );\n};\n","import { AddIcon } from '@chakra-ui/icons';\nimport {\n  Button, HStack, Icon, VStack,\n} from '@chakra-ui/react';\nimport { Form, Formik } from 'formik';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport { InputControl, NumberInputControl } from '../common/formik-chakra';\nimport { useAppDispatch, useAppSelector } from '../common/hooks';\nimport { addNPC } from '../common/npcSlice';\nimport { Dice, rollDice } from '../common/util';\nimport { ModifyNPCForm } from './ModifyNPCForm';\nimport { NPC } from './NPC.interfaces';\n\nconst NPCFormList = ({ npcs }: { npcs: NPC[] }) => (\n  <VStack>\n    {\n        npcs.map((npc) => (\n          <ModifyNPCForm\n            key={npc.id}\n            npc={npc}\n          />\n        ))\n      }\n  </VStack>\n);\n\ninterface NPCsProps {\n  showHostile?: boolean;\n  showFriendly?: boolean;\n  showNeutral?: boolean;\n}\n\nexport function NPCs({\n  showHostile, showFriendly, showNeutral,\n}: NPCsProps) {\n  const params = useParams<{ id?: string }>();\n  const npcs = useAppSelector((state) => state.npcs.npcs\n    .filter((i) => {\n      if (showHostile && i.isHostile) {\n        return true;\n      }\n      if (showFriendly && i.isFriendly) {\n        return true;\n      }\n      if (showNeutral && (!i.isFriendly && !i.isHostile)) {\n        return true;\n      }\n      return false;\n    })\n    .filter((i) => {\n      if (params.id) {\n        return i.id === params.id;\n      }\n      return true;\n    }));\n  const dispatch = useAppDispatch();\n\n  const addNPCValidationSchema = Yup.object({\n    name: Yup.string().required().label('Name'),\n    maxHP: Yup.number().integer().moreThan(0).required()\n      .label('Maximum HP'),\n    initiativeMod: Yup.number().integer().required().label('Initiative Modifier'),\n    armourClass: Yup.number().integer().moreThan(0).default(10)\n      .label('Armour Class'),\n  });\n\n  const AddNPCForm = () => {\n    type AddFormFields = Array<\n      [string, keyof NPC, typeof InputControl | typeof NumberInputControl]\n    >;\n\n    const addFormFields: AddFormFields = [\n      ['NPC Name', 'name', InputControl],\n      ['Maximum HP', 'maxHP', NumberInputControl],\n      ['Initiative Modifier', 'initiativeMod', NumberInputControl],\n      ['Armour Class', 'armourClass', NumberInputControl],\n    ];\n    return (\n      <Formik\n        initialValues={{\n          name: '',\n          maxHP: 0,\n          initiativeMod: 0,\n          armourClass: 0,\n        }}\n        validationSchema={addNPCValidationSchema}\n        onSubmit={\n          (values) => {\n            dispatch(addNPC({\n              name: values.name,\n              maxHP: values.maxHP,\n              currentHP: values.maxHP,\n              tempHP: 0,\n              initiative: rollDice(Dice.d20),\n              initiativeMod: values.initiativeMod,\n              armourClass: values.armourClass,\n              conditions: [],\n              displayOnTurnOrder: true,\n              notes: '',\n              externalNotes: [],\n              isFriendly: showFriendly || false,\n              isHostile: showHostile || false,\n              isBoss: false,\n              showHealth: false,\n              showInitiative: false,\n              showAC: false,\n              showName: false,\n            }));\n          }\n        }\n      >\n        <Form>\n          <HStack>\n            {\n              addFormFields.map(([label, key, IC]) => (\n                <IC\n                  hideError\n                  mt={4}\n                  mb={4}\n                  name={key}\n                  label={label}\n                  key={key}\n                />\n              ))\n            }\n          </HStack>\n          <Button\n            mb={4}\n            width=\"100%\"\n            type=\"submit\"\n            variant=\"solid\"\n            colorScheme=\"green\"\n            rightIcon={<Icon as={AddIcon} />}\n          >\n            Add\n            {' '}\n            {showHostile ? 'Enemy' : 'NPC'}\n          </Button>\n        </Form>\n      </Formik>\n    );\n  };\n\n  return (\n    <>\n      {!params.id && <AddNPCForm />}\n      <NPCFormList npcs={npcs} />\n    </>\n  );\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { v4 } from 'uuid';\nimport * as Yup from 'yup';\nimport { Player } from '../Characters/Player.interfaces';\nimport { Dice, rollDice } from './util';\n\nexport interface PlayerState {\n  players: Player[];\n}\n\nconst initialState: PlayerState = {\n  players: [],\n};\n\nexport const playerSlice = createSlice({\n  name: 'player',\n  initialState,\n  reducers: {\n    addPlayer: (state, action: PayloadAction<Omit<Player, 'id'>>) => {\n      const id = v4();\n      state.players.push({\n        ...action.payload,\n        id,\n      });\n    },\n    removePlayer: (state, action: PayloadAction<string>) => {\n      const index = state.players.findIndex((v) => v.id === action.payload);\n\n      if (index >= 0) {\n        state.players.splice(index, 1);\n      } else {\n        console.warn(`Invalid player ${action.payload}`);\n      }\n    },\n    refreshPlayers: (state, action: PayloadAction<Player[] | undefined>) => {\n      if (action.payload) {\n        state.players.splice(0, state.players.length, ...action.payload);\n      }\n    },\n    modifyPlayer: (state, action: PayloadAction<Partial<Player>>) => {\n      const foundPlayer = state.players.findIndex((i) => i.id === action.payload.id);\n\n      if (foundPlayer >= 0) {\n        const { players } = state;\n        const modPlayer = action.payload;\n        const modConditions = action.payload.conditions || players[foundPlayer].conditions;\n        if (!modConditions.map((i) => i.toLowerCase()).includes('dying')) {\n          modPlayer.passedDeathSaves = 0;\n          modPlayer.failedDeathSaves = 0;\n        }\n        players[foundPlayer] = {\n          ...state.players[foundPlayer],\n          ...action.payload,\n        };\n      }\n    },\n    rollAllPlayerInitiative: (state) => {\n      state.players.forEach((i) => {\n        const player = i;\n        player.initiative = rollDice(Dice.d20);\n      });\n    },\n  },\n});\n\nexport const modifyPlayerValidationSchema = Yup.object({\n  name: Yup.string(),\n  currentHP: Yup.number().integer().required(),\n  maxHP: Yup.number().integer().required(),\n  tempHP: Yup.number().integer().default(0).required(),\n  armourClass: Yup.number().integer().required(),\n  initiative: Yup.number().integer().min(1).max(20)\n    .required(),\n  initiativeMod: Yup.number().integer().required(),\n  notes: Yup.string(),\n  externalNotes: Yup.array().of(Yup.object({\n    type: Yup.string(),\n    url: Yup.string().url(),\n    label: Yup.string(),\n  })),\n  conditions: Yup.array().of(Yup.string()).required(),\n  displayOnTurnOrder: Yup.boolean().required(),\n});\n\nexport const {\n  addPlayer, removePlayer, refreshPlayers, rollAllPlayerInitiative, modifyPlayer,\n} = playerSlice.actions;\n\nexport default playerSlice.reducer;\n","import {\n  Accordion, AccordionButton, AccordionIcon, AccordionItem,\n  AccordionPanel, Box, Button, FormControl, FormLabel, Grid,\n  GridItem, HStack, Icon, SimpleGrid, Spacer, Text, Tooltip, VStack,\n} from '@chakra-ui/react';\nimport { Form, Formik, useFormikContext } from 'formik';\nimport { AiFillDelete } from 'react-icons/ai';\nimport { GiDiceTwentyFacesTwenty } from 'react-icons/gi';\nimport { ImRedo } from 'react-icons/im';\nimport { IoMdSave } from 'react-icons/io';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { NumberInputControl, SwitchControl } from '../common/formik-chakra';\nimport TextareaControl from '../common/formik-chakra/TextareaControl';\nimport { useAppDispatch } from '../common/hooks';\nimport { modifyPlayerValidationSchema, modifyPlayer, removePlayer } from '../common/playerSlice';\nimport { Dice, rollDice } from '../common/util';\nimport { ModifyCharacterConditionsField } from './ModifyCharacterConditionsField';\nimport { Player } from './Player.interfaces';\nimport { ModifyCurrentHPInput } from './ModifyCurrentHPInput';\nimport { ModifyExternalNoteReferences } from './ModifyExternalNotes';\nimport { resetManualFormFields } from './characterFormUtils';\n\ninterface ModifyPlayerFormProps {\n  player: Player;\n}\n\nexport const ModifyPlayerForm = ({ player }: ModifyPlayerFormProps) => {\n  const dispatch = useAppDispatch();\n\n  const params = useParams<{id: string}>();\n\n  const modifyPlayerAction = (p: Player) => dispatch(modifyPlayer(p));\n  const removePlayerAction = (id: string) => dispatch(removePlayer(id));\n\n  const PlayerModifyStatFields = () => {\n    const editStatFields: Array<[string, string]> = [\n      ['AC: ', 'armourClass'],\n      ['Initiative: ', 'initiative'],\n      ['Init. Mod: ', 'initiativeMod'],\n      ['Max HP: ', 'maxHP'],\n    ];\n\n    const { setFieldValue } = useFormikContext<Player>();\n    return (\n      <AccordionItem>\n        <AccordionButton>\n          <Box flex=\"1\" textAlign=\"left\">\n            <strong>Edit Stats</strong>\n          </Box>\n          <AccordionIcon />\n        </AccordionButton>\n        <AccordionPanel>\n          <Grid\n            fontSize=\"sm\"\n            templateColumns=\"repeat(4, 1fr)\"\n            templateRows=\"repeat(2, 1fr)\"\n            gap={4}\n          >\n            <GridItem\n              colSpan={4}\n            >\n              <Button\n                width=\"100%\"\n                onClick={() => setFieldValue('initiative', rollDice(Dice.d20))}\n                variant=\"outline\"\n                rightIcon={<Icon as={GiDiceTwentyFacesTwenty} />}\n              >\n                Roll Initiative\n              </Button>\n            </GridItem>\n            {\n              editStatFields.map(([displayString, value]) => (\n                <GridItem key={value}>\n                  <HStack>\n                    <Text>{displayString}</Text>\n                    <NumberInputControl hideError name={value} width=\"8em\" />\n                  </HStack>\n                </GridItem>\n              ))\n            }\n          </Grid>\n        </AccordionPanel>\n      </AccordionItem>\n    );\n  };\n\n  const PlayerModifyActions = ({ player: _player }: { player: Player }) => {\n    const context = useFormikContext<Player>();\n\n    return (\n      <HStack mt={4}>\n        <Tooltip label=\"Save\" placement=\"top\">\n          <Button\n            width=\"100%\"\n            hidden={!context.dirty}\n            variant=\"solid\"\n            colorScheme=\"green\"\n            onClick={() => context.submitForm()}\n          >\n            <Icon as={IoMdSave} />\n          </Button>\n        </Tooltip>\n        <Tooltip label=\"Reset\" placement=\"top\">\n          <Button\n            width=\"100%\"\n            type=\"reset\"\n            hidden={!context.dirty}\n            variant=\"solid\"\n          >\n            <Icon as={ImRedo} />\n          </Button>\n        </Tooltip>\n        <Tooltip label=\"Delete\" placement=\"top\">\n          <Button\n            width=\"100%\"\n            onClick={() => removePlayerAction(_player.id)}\n            variant=\"solid\"\n            colorScheme=\"red\"\n          >\n            <Icon as={AiFillDelete} />\n          </Button>\n        </Tooltip>\n      </HStack>\n    );\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        ...player,\n        externalNotes: player.externalNotes || [],\n      }}\n      onSubmit={(values, actions) => {\n        modifyPlayerAction(values);\n        resetManualFormFields(player);\n        actions.resetForm();\n      }}\n      onReset={() => {\n        resetManualFormFields(player);\n      }}\n      enableReinitialize\n      validationSchema={modifyPlayerValidationSchema}\n    >\n      <Box\n        className=\"\"\n        width=\"100%\"\n        id={`character-${player.id}`}\n        border={`0.3em solid #00AA00${params.id === player.id ? 'FF' : 22}`}\n        borderRadius={10}\n        p={4}\n      >\n        <Form>\n          <HStack\n            p={1}\n            mb={2}\n          >\n            <Box\n              textAlign=\"center\"\n              width=\"100%\"\n              backgroundColor=\"darkgreen\"\n              color=\"white\"\n              borderRadius={8}\n              p={2}\n            >\n              <Text fontWeight=\"bold\">{player.name}</Text>\n            </Box>\n            <PlayerModifyActions player={player} />\n          </HStack>\n          <SimpleGrid templateColumns=\"repeat(3, 1fr)\" mt={4} mb={4}>\n            <GridItem>\n              <VStack alignItems=\"flex-start\">\n                <ModifyCurrentHPInput character={player} />\n                <Text>\n                  AC\n                  {' '}\n                  {player.armourClass}\n                  , Init.\n                  {' '}\n                  {player.initiative + player.initiativeMod}\n                  {' '}\n                  (\n                  {player.initiative}\n                  <Icon as={GiDiceTwentyFacesTwenty} />\n                  {' '}\n                  {player.initiativeMod >= 0 ? '+' : '-'}\n                  {' '}\n                  {Math.abs(player.initiativeMod)}\n                  )\n                </Text>\n              </VStack>\n            </GridItem>\n            <GridItem colSpan={2}>\n              <TextareaControl\n                name=\"notes\"\n                textareaProps={{\n                  resize: 'vertical',\n                  height: '20em',\n                  fontSize: 'xs',\n                }}\n              />\n            </GridItem>\n          </SimpleGrid>\n          <ModifyCharacterConditionsField character={player} />\n          <Accordion allowToggle allowMultiple>\n            <ModifyExternalNoteReferences character={player} />\n            <PlayerModifyStatFields />\n            <AccordionItem>\n              <AccordionButton>\n                <Box flex=\"1\" textAlign=\"left\">\n                  <strong>Options</strong>\n                </Box>\n                <AccordionIcon />\n              </AccordionButton>\n              <AccordionPanel>\n                <Grid\n                  fontSize=\"sm\"\n                  templateColumns=\"repeat(3, 1fr)\"\n                  templateRows=\"repeat(1, 1fr)\"\n                  gap={6}\n                >\n                  {\n                    ([\n                      ['Show in Turn Order', 'displayOnTurnOrder'],\n                    ] as Array<[string, keyof Player]>).map(([displayString, key]) => (\n                      <FormControl display=\"flex\" alignItems=\"center\" key={key}>\n                        <FormLabel mb=\"0\">\n                          {displayString}\n                        </FormLabel>\n                        <Spacer />\n                        <SwitchControl name={key} />\n                      </FormControl>\n                    ))\n                  }\n                </Grid>\n              </AccordionPanel>\n            </AccordionItem>\n          </Accordion>\n        </Form>\n      </Box>\n    </Formik>\n  );\n};\n","import { AddIcon } from '@chakra-ui/icons';\nimport {\n  Button, HStack, Icon, VStack,\n} from '@chakra-ui/react';\nimport { Form, Formik } from 'formik';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport { InputControl, NumberInputControl } from '../common/formik-chakra';\nimport { useAppDispatch, useAppSelector } from '../common/hooks';\nimport { addPlayer } from '../common/playerSlice';\nimport { Dice, rollDice } from '../common/util';\nimport { ModifyPlayerForm } from './ModifyPlayerForm';\nimport { Player } from './Player.interfaces';\n\nconst PlayerFormList = ({ players }: { players: Player[] }) => (\n  <VStack>\n    {\n        players.map((player) => (\n          <ModifyPlayerForm\n            key={player.id}\n            player={player}\n          />\n        ))\n      }\n  </VStack>\n);\n\nexport function Players() {\n  const params = useParams<{ id?: string }>();\n  const players = useAppSelector((state) => state.players.players.filter((i) => {\n    if (params.id) {\n      return i.id === params.id;\n    }\n    return true;\n  }));\n\n  const dispatch = useAppDispatch();\n\n  const addPlayerValidationSchema = Yup.object({\n    name: Yup.string().required().label('Name'),\n    maxHP: Yup.number().integer().moreThan(0).required()\n      .label('Maximum HP'),\n    initiativeMod: Yup.number().integer().required().label('Initiative Modifier'),\n    armourClass: Yup.number().integer().moreThan(0).default(10)\n      .label('Armour Class'),\n  });\n\n  type AddFormFields = Array<[\n    string, keyof Player, typeof InputControl | typeof NumberInputControl]\n  >;\n\n  const AddPlayerForm = () => {\n    const addFormFields: AddFormFields = [\n      ['Player Name', 'name', InputControl],\n      ['Maximum HP', 'maxHP', NumberInputControl],\n      ['Initiative Modifier', 'initiativeMod', NumberInputControl],\n      ['Armour Class', 'armourClass', NumberInputControl],\n    ];\n    return (\n      <Formik\n        initialValues={{\n          name: '',\n          maxHP: 0,\n          initiativeMod: 0,\n          armourClass: 0,\n        }}\n        validationSchema={addPlayerValidationSchema}\n        onSubmit={\n          (values) => {\n            dispatch(addPlayer({\n              name: values.name,\n              maxHP: values.maxHP,\n              currentHP: values.maxHP,\n              tempHP: 0,\n              initiative: rollDice(Dice.d20),\n              initiativeMod: values.initiativeMod,\n              armourClass: values.armourClass,\n              conditions: [],\n              displayOnTurnOrder: true,\n              notes: '',\n              externalNotes: [],\n              passedDeathSaves: 0,\n              failedDeathSaves: 0,\n            }));\n          }\n        }\n      >\n        <Form>\n          <HStack>\n            {\n              addFormFields.map(([label, key, IC]) => (\n                <IC\n                  hideError\n                  mt={4}\n                  mb={4}\n                  name={key}\n                  label={label}\n                  key={key}\n                />\n              ))\n            }\n          </HStack>\n          <Button\n            mb={4}\n            width=\"100%\"\n            type=\"submit\"\n            variant=\"solid\"\n            colorScheme=\"green\"\n            rightIcon={<Icon as={AddIcon} />}\n          >\n            Add Player\n          </Button>\n        </Form>\n      </Formik>\n    );\n  };\n\n  return (\n    <>\n      {!params.id && <AddPlayerForm />}\n      <PlayerFormList players={players} />\n    </>\n  );\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\ninterface CampaignState {\n  currentTurnId: string;\n  campaignTitle: string,\n  notes: string\n}\n\nconst initialState: CampaignState = {\n  currentTurnId: '',\n  campaignTitle: 'D&D Tracker',\n  notes: '',\n};\n\nexport const campaignSlice = createSlice({\n  name: 'campaign',\n  initialState,\n  reducers: {\n    setTurn: (state, action: PayloadAction<string>) => {\n      const modState = state;\n      modState.currentTurnId = action.payload;\n    },\n    setCampaignTitle: (state, action: PayloadAction<string>) => {\n      const modState = state;\n      modState.campaignTitle = action.payload;\n    },\n    setCampaignNotes: (state, action: PayloadAction<string>) => {\n      const modState = state;\n      modState.notes = action.payload;\n    },\n  },\n});\n\nexport const { setTurn, setCampaignTitle, setCampaignNotes } = campaignSlice.actions;\n\nexport default campaignSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport playerReducer from './playerSlice';\nimport campaignReducer from './campaignSlice';\nimport npcReducer from './npcSlice';\n\nexport const STORE_KEY = 'persistantState';\nexport const APP_VERSION = '0.0.3';\n\nexport const loadFromLocalStorage = () => {\n  try {\n    const serialisedState = localStorage.getItem(`persistantState_${APP_VERSION}`);\n    if (serialisedState === null) return undefined;\n    return JSON.parse(serialisedState);\n  } catch (e) {\n    console.warn(e);\n    return undefined;\n  }\n};\n\nexport const store = configureStore({\n  reducer: {\n    players: playerReducer,\n    campaign: campaignReducer,\n    npcs: npcReducer,\n  },\n  preloadedState: loadFromLocalStorage(),\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nfunction saveToLocalStorage(state: RootState) {\n  try {\n    const serialisedState = JSON.stringify(state);\n    localStorage.setItem(`persistantState_${APP_VERSION}`, serialisedState);\n  } catch (e) {\n    console.warn(e);\n  }\n}\n\nstore.subscribe(() => {\n  if (document.hasFocus()) {\n    saveToLocalStorage(store.getState());\n  }\n});\n","import {\n  Badge, Box, Grid, HStack, Icon, Text,\n} from '@chakra-ui/react';\nimport React from 'react';\nimport { BsHeartFill } from 'react-icons/bs';\nimport { GiCheckedShield, GiDiceTwentyFacesTwenty, GiWalkingBoot } from 'react-icons/gi';\nimport { characterTypeColours } from '../App';\nimport { NPC } from '../Characters/NPC.interfaces';\n\ninterface NPCTurnProps {\n  npc: NPC;\n  isActive: boolean;\n  tinyMode: string | null;\n  onClick: () => void;\n}\n\nexport function NPCTurn({\n  npc, isActive, tinyMode, onClick,\n}: NPCTurnProps) {\n  const tempHP = npc.tempHP ? ` (${npc.tempHP})` : '';\n\n  let formColour = characterTypeColours.neutral;\n\n  if (npc.isHostile) {\n    formColour = characterTypeColours.enemy;\n  } else if (npc.isFriendly) {\n    formColour = characterTypeColours.friendly;\n  }\n\n  return (\n    <Box\n      className=\"turn-block turn-block-npc\"\n      p={tinyMode ? '0.1em' : '0.5em'}\n      border={`${isActive && !tinyMode ? '0.4em' : '0.2em'} solid ${formColour}${isActive ? 'FF' : 22}`}\n      borderRadius=\"0.4em\"\n      opacity={isActive ? '100%' : '80%'}\n      cursor=\"pointer\"\n      onClick={onClick}\n    >\n      <Grid templateColumns=\"repeat(4, 1fr)\" fontSize={tinyMode ? 'xs' : 'sm'}>\n        <Text fontWeight=\"bold\">{npc.showName ? npc.name : '???'}</Text>\n        {\n          npc.showAC\n          && (\n          <Text>\n            <Icon as={GiCheckedShield} />\n            {' '}\n            {npc.armourClass}\n          </Text>\n          )\n        }\n        {\n          npc.showHealth\n            ? (\n              <Text>\n                <Icon as={BsHeartFill} />\n                {' '}\n                {npc.currentHP}\n                {' '}\n                {tempHP}\n                {' '}\n                /\n                {' '}\n                {npc.maxHP}\n              </Text>\n            )\n            : (\n              <Text>\n                <Icon as={BsHeartFill} />\n                {' '}\n                Damage Taken:\n                {' '}\n                {Math.max(npc.maxHP - npc.currentHP, 0)}\n              </Text>\n            )\n        }\n        {\n          npc.showInitiative\n          && (\n          <Text>\n            <Icon as={GiWalkingBoot} />\n            {' '}\n            {npc.initiative + npc.initiativeMod}\n            {' '}\n            (\n            {npc.initiative}\n            <Icon as={GiDiceTwentyFacesTwenty} />\n            {' '}\n            {npc.initiativeMod >= 0 ? '+' : '-'}\n            {' '}\n            {Math.abs(npc.initiativeMod)}\n            )\n          </Text>\n          )\n        }\n      </Grid>\n      {\n        npc.conditions.length > 0 && (\n        <HStack>\n          {npc.conditions.map((i) => (\n            <Badge\n              variant=\"solid\"\n              key={npc.conditions.findIndex((j) => i === j)}\n            >\n              {i}\n            </Badge>\n          ))}\n        </HStack>\n        )\n      }\n    </Box>\n  );\n}\n","import {\n  Center, Divider, Icon, IconButton,\n} from '@chakra-ui/react';\nimport React from 'react';\nimport { RiSkull2Fill, RiSkull2Line } from 'react-icons/ri';\nimport { HiPlus, HiPlusCircle } from 'react-icons/hi';\n// import { TiPlus, TiPlusOutline } from 'react-icons/ti';\nimport { Player } from '../Characters/Player.interfaces';\nimport { useAppDispatch } from '../common/hooks';\nimport { modifyPlayer } from '../common/playerSlice';\n\ninterface DeathSaveCounterProps {\n  player: Player;\n  size?: 'xs' | 'sm' | 'md' | 'lg';\n  disableAction?: boolean;\n}\n\nexport const DeathSaveCounter = ({ player, size, disableAction }: DeathSaveCounterProps) => {\n  const dispatch = useAppDispatch();\n\n  const setDeathSaveThrowAction = (count: number, type: 'pass' | 'fail') => {\n    if (disableAction) return;\n    let prop: keyof Player = 'failedDeathSaves';\n\n    if (type === 'pass') {\n      prop = 'passedDeathSaves';\n    }\n    dispatch(modifyPlayer({\n      id: player.id,\n      [prop]: count,\n    }));\n  };\n\n  const DeathSaveFailedIcon = (saveCount: number) => (\n    player.failedDeathSaves >= saveCount\n      ? <Icon as={RiSkull2Fill} color=\"darkred\" />\n      : <Icon as={RiSkull2Line} />\n  );\n  const DeathSaveSuccessIcon = (saveCount: number) => (\n    player.passedDeathSaves >= saveCount\n      ? <Icon as={HiPlusCircle} color=\"green\" />\n      : <Icon as={HiPlus} />\n  );\n\n  const numberArray = [3, 2, 1];\n  const reversedNumberArray = [1, 2, 3];\n\n  return (\n    <Center>\n      {\n        numberArray.map((saveCount) => (\n          <IconButton\n            size={size || 'xs'}\n            variant=\"ghost\"\n            aria-label=\"Death Save Failed\"\n            key={`failed-save-${saveCount}`}\n            icon={DeathSaveFailedIcon(saveCount)}\n            cursor={disableAction ? 'default' : 'auto'}\n            pointerEvents={disableAction ? 'none' : 'auto'}\n            onClick={() => {\n              if (player.failedDeathSaves === saveCount) {\n                return setDeathSaveThrowAction(Math.max(saveCount - 1, 0), 'fail');\n              }\n              return setDeathSaveThrowAction(Math.max(saveCount, 0), 'fail');\n            }}\n            hidden={disableAction && player.failedDeathSaves < saveCount}\n            minW={!disableAction ? '24px' : 0}\n          />\n        ))\n      }\n      <Divider orientation=\"vertical\" />\n      {\n        reversedNumberArray.map((saveCount) => (\n          <IconButton\n            size={size || 'xs'}\n            variant=\"ghost\"\n            aria-label=\"Death Save Suceeded\"\n            key={`passed-save-${saveCount}`}\n            icon={DeathSaveSuccessIcon(saveCount)}\n            cursor={disableAction ? 'default' : 'auto'}\n            pointerEvents={disableAction ? 'none' : 'auto'}\n            onClick={() => {\n              if (player.passedDeathSaves === saveCount) {\n                return setDeathSaveThrowAction(Math.max(saveCount - 1, 0), 'pass');\n              }\n              return setDeathSaveThrowAction(Math.max(saveCount, 0), 'pass');\n            }}\n            minW={!disableAction ? '24px' : 0}\n            hidden={disableAction && player.passedDeathSaves < saveCount}\n          />\n        ))\n      }\n    </Center>\n  );\n};\n","import {\n  Badge, Box, Grid, HStack, Icon, Text,\n} from '@chakra-ui/react';\nimport React from 'react';\nimport { BsHeartFill } from 'react-icons/bs';\nimport { GiCheckedShield, GiDiceTwentyFacesTwenty, GiWalkingBoot } from 'react-icons/gi';\nimport { Player } from '../Characters/Player.interfaces';\nimport { DeathSaveCounter } from '../DMScreen/DeathSaveCounter';\n\ninterface PlayerTurnProps {\n  player: Player;\n  isActive: boolean;\n  tinyMode: string | null;\n  onClick: () => void;\n}\n\nexport function PlayerTurn({\n  player, isActive, tinyMode, onClick,\n}: PlayerTurnProps) {\n  const tempHP = player.tempHP ? ` (${player.tempHP})` : '';\n\n  return (\n    <Box\n      onClick={onClick}\n      className=\"turn-block turn-block-player\"\n      p={tinyMode ? '0.1em' : '0.5em'}\n      border={`${isActive && !tinyMode ? '0.4em' : '0.2em'} solid #00AA00${isActive ? 'FF' : 22}`}\n      borderRadius=\"0.4em\"\n      opacity={isActive ? '100%' : '80%'}\n      cursor=\"pointer\"\n    >\n      {\n        player.conditions.map((c) => c.toLowerCase()).includes('dying')\n          && (\n            <DeathSaveCounter player={player} size={tinyMode ? 'xs' : 'sm'} disableAction />\n          )\n      }\n      <Grid templateColumns=\"repeat(4, 1fr)\" fontSize={tinyMode ? 'xs' : 'sm'}>\n        <Text fontWeight=\"bold\">{player.name}</Text>\n        <Text>\n          <Icon as={GiCheckedShield} />\n          {' '}\n          {player.armourClass}\n        </Text>\n        <Text>\n          <Icon as={BsHeartFill} />\n          {' '}\n          {player.currentHP}\n          {' '}\n          {tempHP}\n          {' '}\n          /\n          {' '}\n          {player.maxHP}\n        </Text>\n        <Text>\n          <Icon as={GiWalkingBoot} />\n          {' '}\n          {player.initiative + player.initiativeMod}\n          {' '}\n          (\n          {player.initiative}\n          <Icon as={GiDiceTwentyFacesTwenty} />\n          {' '}\n          {player.initiativeMod >= 0 ? '+' : '-'}\n          {' '}\n          {Math.abs(player.initiativeMod)}\n          )\n        </Text>\n      </Grid>\n      {\n        player.conditions.length > 0 && (\n        <HStack>\n          {player.conditions.map((i) => <Badge variant=\"solid\" key={player.conditions.findIndex((j) => i === j)}>{i}</Badge>)}\n        </HStack>\n        )\n      }\n    </Box>\n  );\n}\n","import {\n  Box,\n  Button, HStack, Icon, StackDivider, VStack,\n} from '@chakra-ui/react';\nimport React from 'react';\nimport { GiDiceTwentyFacesTwenty } from 'react-icons/gi';\nimport { useHistory } from 'react-router-dom';\nimport { Character } from '../Characters/Character.interfaces';\nimport { NPC } from '../Characters/NPC.interfaces';\nimport { Player } from '../Characters/Player.interfaces';\nimport { useAppDispatch, useAppSelector } from '../common/hooks';\nimport { setTurn } from '../common/campaignSlice';\nimport { rollAllPlayerInitiative } from '../common/playerSlice';\nimport { NPCTurn } from './NPCTurn';\nimport './Initiative.css';\nimport { PlayerTurn } from './PlayerTurn';\n\ntype CharacterType = 'player' | 'npc';\n\ntype SortedTurnsArray<T = CharacterType> = Array<{\n  character: Character;\n  type: T;\n}>\n\nexport const getSortedTurns = (\n  {\n    players,\n    npcs,\n    showAllTurns,\n    currentTurnId,\n  } : {\n    players: Player[];\n    npcs: NPC[];\n    showAllTurns?: boolean;\n    currentTurnId?: string;\n  },\n) => {\n  const formattedPlayers: SortedTurnsArray<'player'> = players.map((i) => ({\n    character: i,\n    type: 'player',\n  }));\n\n  const formattedNPCs: SortedTurnsArray<'npc'> = npcs.map((i) => ({\n    character: i,\n    type: 'npc',\n  }));\n\n  const sortedTurns: SortedTurnsArray = [\n    ...formattedPlayers,\n    ...formattedNPCs,\n  ]\n    .filter((i) => showAllTurns || i.character.displayOnTurnOrder)\n    .sort((a, b) => {\n      const aChar = a.character;\n      const bChar = b.character;\n      return (bChar.initiative + bChar.initiativeMod) - (aChar.initiative + aChar.initiativeMod);\n    });\n\n  const returnValue = (array: SortedTurnsArray): Array<{\n    isActive: boolean;\n    character: Character;\n    type: CharacterType\n  }> => array.map((i, idx) => ({\n    isActive: idx === 0,\n    character: i.character,\n    type: i.type,\n  }));\n\n  if (!currentTurnId) {\n    return returnValue(sortedTurns);\n  }\n\n  const currentTurnIndex = sortedTurns.findIndex((i) => i.character.id === currentTurnId) || 0;\n  const getSortedByNextActiveTurn = () => [\n    ...sortedTurns\n      .slice(currentTurnIndex + 1, sortedTurns.length),\n    ...sortedTurns\n      .slice(0, currentTurnIndex + 1),\n  ];\n\n  return returnValue(getSortedByNextActiveTurn());\n};\n\ninterface InitiativeProps {\n  tinyMode: string | null;\n}\n\nexport function Initiative({ tinyMode }: InitiativeProps) {\n  const history = useHistory();\n\n  const changePageMethod = ({ type, id }: {\n    type: string;\n    id: string\n  }): void => {\n    const historyObj = tinyMode ? (window.opener as any)?.appHistory as typeof history : history;\n    if (!historyObj) return;\n    historyObj.push(`/${type}/${id}`);\n    const maxAttempt = 20;\n    const findFocus = (iter = 0) => {\n      if (iter >= maxAttempt) return;\n      const element = document.querySelector(`#currentHP-${id}`) as HTMLInputElement | null;\n\n      if (!element) {\n        setTimeout(() => {\n          findFocus(iter + 1);\n        }, 50);\n      } else {\n        element.focus();\n      }\n    };\n    findFocus();\n  };\n\n  const players = useAppSelector<Player[]>((state) => state.players.players);\n  const npcs = useAppSelector<NPC[]>((state) => state.npcs.npcs);\n  const currentTurnId = useAppSelector<string>((state) => state.campaign.currentTurnId);\n\n  const dispatch = useAppDispatch();\n\n  const turns = getSortedTurns({\n    players,\n    npcs,\n    showAllTurns: false,\n    currentTurnId,\n  });\n\n  const rollInitiativesAction = () => {\n    dispatch(rollAllPlayerInitiative());\n    dispatch(setTurn(''));\n  };\n\n  const setTurnAction = () => {\n    if (turns.length < 1) {\n      return;\n    }\n\n    if (!currentTurnId) {\n      dispatch(setTurn(turns[0].character.id));\n      return;\n    }\n\n    const currentTurnCharacter = turns.findIndex((i) => i.character.id === currentTurnId);\n\n    if (!currentTurnCharacter) {\n      dispatch(setTurn(turns[1].character.id));\n      return;\n    }\n    const nextCharacter = turns[(currentTurnCharacter + 1) % turns.length];\n    dispatch(setTurn(nextCharacter.character.id));\n  };\n\n  return (\n    <Box>\n      <VStack\n        divider={tinyMode ? undefined : <StackDivider color=\"gray.200\" />}\n        mb={tinyMode ? 0 : 2}\n        spacing={tinyMode ? 0 : 2}\n      >\n        {turns.map(({ character, isActive, type }) => {\n          if (type === 'player') {\n            const player = character as Player;\n            return (\n              <PlayerTurn\n                onClick={() => changePageMethod({ type: 'players', id: character.id })}\n                isActive={isActive}\n                player={player}\n                key={character.id}\n                tinyMode={tinyMode}\n              />\n            );\n          } if (type === 'npc') {\n            const npc = character as NPC;\n            return (\n              <NPCTurn\n                onClick={() => changePageMethod({\n                  type: npc.isHostile ? 'enemies' : 'npcs',\n                  id: character.id,\n                })}\n                isActive={isActive}\n                npc={npc}\n                key={character.id}\n                tinyMode={tinyMode}\n              />\n            );\n          }\n\n          return false;\n        })}\n        ;\n      </VStack>\n      <HStack\n        position=\"sticky\"\n        backgroundColor=\"white\"\n        bottom=\"0\"\n        width=\"100%\"\n      >\n        <Button\n          onClick={rollInitiativesAction}\n          width=\"100%\"\n          size={tinyMode ? 'xs' : 'sm'}\n          variant=\"outline\"\n        >\n          Roll Initiative\n          <Icon as={GiDiceTwentyFacesTwenty} />\n        </Button>\n        <Button\n          onClick={setTurnAction}\n          width=\"100%\"\n          size={tinyMode ? 'xs' : 'sm'}\n          variant=\"outline\"\n        >\n          Next Turn\n        </Button>\n        { !tinyMode && (\n          <Button\n            width=\"100%\"\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => window.open('/dndtracker/?tinymode=true', 'dndtracker_turns', 'resizable,width=500,height=300')}\n          >\n            Display in Compact Mode\n          </Button>\n        )}\n      </HStack>\n    </Box>\n  );\n}\n","import {\n  Grid, Flex, Button, useDisclosure, AlertDialog,\n  AlertDialogBody, AlertDialogContent, AlertDialogFooter,\n  AlertDialogHeader, AlertDialogOverlay,\n} from '@chakra-ui/react';\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useAppSelector } from '../common/hooks';\nimport { APP_VERSION, RootState, STORE_KEY } from '../common/store';\n\ninterface StateFormat {\n  version: string;\n  date: number;\n  state: RootState;\n}\n\nconst AlertDeleteState = ({ confirmAction }: { confirmAction: () => void }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const cancelRef = useRef(null);\n  return (\n    <>\n      <Button\n        width=\"100%\"\n        colorScheme=\"red\"\n        onClick={onOpen}\n      >\n        Clear State\n      </Button>\n      <AlertDialog\n        isOpen={isOpen}\n        leastDestructiveRef={cancelRef}\n        onClose={onClose}\n      >\n        <AlertDialogOverlay>\n          <AlertDialogContent>\n            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\n              Clear State\n            </AlertDialogHeader>\n            <AlertDialogBody>\n              Are you sure? This action cannot be undone.\n            </AlertDialogBody>\n            <AlertDialogFooter>\n              <Button ref={cancelRef} onClick={onClose}>\n                Cancel\n              </Button>\n              <Button\n                colorScheme=\"red\"\n                onClick={() => {\n                  onClose();\n                  confirmAction();\n                }}\n                ml={3}\n              >\n                Delete\n              </Button>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialogOverlay>\n      </AlertDialog>\n    </>\n  );\n};\n\nexport const Settings = () => {\n  const state = useAppSelector((s) => s);\n\n  const exportStateFormat = (): StateFormat => ({\n    version: APP_VERSION,\n    state,\n    date: Date.now(),\n  });\n\n  const [exportStateLink, setExportStateLink] = useState('');\n\n  const exportStateRef = useRef<HTMLAnchorElement>(null);\n  const importStateRef = useRef<HTMLInputElement>(null);\n  const makeExportStateFileName = () => `${Date.now()}_${APP_VERSION}_${state.campaign.campaignTitle}.json`;\n  const makeExportStateFile = () => {\n    // This creates the file.\n    // In my case, I have an array, and each item in\n    // the array should be on a new line, which is why\n    // I use .join('\\n') here.\n    const data = new Blob([JSON.stringify(exportStateFormat())], { type: 'application/json' });\n\n    // this part avoids Memory Leaks\n    if (exportStateLink !== '') window.URL.revokeObjectURL(exportStateLink);\n\n    // update the download link state\n    setExportStateLink(window.URL.createObjectURL(data));\n  };\n\n  const clearState = () => {\n    localStorage.removeItem(`${STORE_KEY}_${APP_VERSION}`);\n    window.location.reload();\n  };\n\n  const importState = (importedState: string) => {\n    try {\n      const parsedImportedState: StateFormat = JSON.parse(importedState);\n      localStorage.setItem(`${STORE_KEY}_${APP_VERSION}`, JSON.stringify(parsedImportedState.state));\n      window.location.reload();\n    } catch (e) {\n      console.error('Failed to import state');\n    }\n  };\n\n  useEffect(() => {\n    makeExportStateFile();\n  }, [state]);\n\n  return (\n    <Grid\n      templateColumns=\"repeat(1, 1fr)\"\n      gap={5}\n    >\n      <Flex>\n        <input\n          type=\"file\"\n          accept=\"application/json\"\n          onChange={async (e) => {\n            e.preventDefault();\n            const reader = new FileReader();\n            reader.onload = async (_e) => {\n              const text = _e?.target?.result;\n              if (typeof text === 'string') {\n                importState(text as string);\n              }\n            };\n            reader.readAsText(importStateRef.current?.files?.[0] as Blob);\n          }}\n          ref={importStateRef}\n          hidden\n        />\n        <Button\n          width=\"100%\"\n          onClick={() => {\n            importStateRef.current?.click();\n          }}\n        >\n          Import Saved State\n        </Button>\n      </Flex>\n      {/* <Flex>\n        <Button width=\"100%\">Import Characters</Button>\n      </Flex> */}\n      <Flex>\n        <a\n          hidden\n          download={makeExportStateFileName()}\n          href={exportStateLink}\n          ref={exportStateRef}\n        >\n          Export\n        </a>\n        <Button width=\"100%\" onClick={() => exportStateRef.current?.click()}>Export Save State</Button>\n      </Flex>\n      <AlertDeleteState confirmAction={clearState} />\n    </Grid>\n  );\n};\n","import {\n  Flex, Heading, IconButton, Icon, Input,\n} from '@chakra-ui/react';\nimport React, { useState } from 'react';\nimport { GoPencil } from 'react-icons/go';\nimport { ImRedo } from 'react-icons/im';\nimport { IoMdSave } from 'react-icons/io';\nimport { setCampaignTitle } from '../common/campaignSlice';\nimport { useAppSelector, useAppDispatch } from '../common/hooks';\n\nexport const CampaignTitle = () => {\n  const campaignTitle = useAppSelector((state) => state.campaign.campaignTitle);\n  const dispatch = useAppDispatch();\n  const setTitleAction = (ct: string) => dispatch(setCampaignTitle(ct));\n  const [editableCampaignTitle, setEditableCampaignTitle] = useState(campaignTitle);\n  const [editTitleEnabled, setEditTitleEnabled] = useState(false);\n\n  const editTitleRef = React.useRef<HTMLInputElement>(null);\n  return (\n    <Flex\n      mb={4}\n      width=\"100%\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n    >\n      {\n        !editTitleEnabled && (\n          <Flex\n            justifyContent=\"center\"\n            alignItems=\"center\"\n          >\n            <Heading>{campaignTitle}</Heading>\n            <IconButton\n              ml={2}\n              aria-label=\"Edit Title\"\n              icon={<Icon as={GoPencil} />}\n              onClick={() => {\n                setEditTitleEnabled(true);\n                setTimeout(() => {\n                  editTitleRef.current?.focus();\n                }, 100);\n              }}\n            />\n          </Flex>\n        )\n      }\n      {\n        editTitleEnabled && (\n          <Flex\n            justifyContent=\"center\"\n            alignItems=\"center\"\n          >\n            <Input\n              ref={editTitleRef}\n              onChange={(e) => setEditableCampaignTitle(e.target.value)}\n              onKeyPress={(e) => {\n                if (e.code === 'Enter') {\n                  setEditTitleEnabled(false);\n                  setTitleAction(editableCampaignTitle);\n                }\n              }}\n            />\n            <IconButton\n              ml={2}\n              aria-label=\"Save\"\n              icon={<Icon as={IoMdSave} />}\n              onClick={() => {\n                setEditTitleEnabled(false);\n                setTitleAction(editableCampaignTitle);\n              }}\n            />\n            <IconButton\n              ml={2}\n              aria-label=\"Reset\"\n              icon={<Icon as={ImRedo} />}\n              onClick={() => setEditTitleEnabled(false)}\n            />\n          </Flex>\n        )\n      }\n    </Flex>\n  );\n};\n","import { useHistory, useRouteMatch } from 'react-router-dom';\nimport { Flex, Text, Icon } from '@chakra-ui/react';\nimport React from 'react';\nimport { IconType } from 'react-icons';\n\ninterface MenuItemLinkProps {\n  to: string;\n  label: string;\n  activeOnlyWhenExact?: boolean;\n  icon?: IconType;\n}\n\nexport const MenuItemLink = ({\n  to, label, activeOnlyWhenExact, icon,\n}: MenuItemLinkProps) => {\n  const history = useHistory();\n  const match = useRouteMatch({\n    path: to,\n    exact: activeOnlyWhenExact,\n  });\n\n  function handleClick() {\n    history.push(to);\n  }\n\n  return (\n    <Flex\n      cursor=\"pointer\"\n      width=\"100%\"\n      textAlign=\"left\"\n      borderRadius={10}\n      backgroundColor={match ? 'gray' : undefined}\n      p={2}\n      fontWeight=\"bold\"\n      color={match ? 'white' : 'black'}\n      onClick={handleClick}\n      alignItems=\"center\"\n    >\n      <Flex width=\"10%\">\n        {icon && <Icon as={icon} />}\n      </Flex>\n      <Text>{label}</Text>\n    </Flex>\n  );\n};\n","import {\n  Box, Drawer, DrawerBody, DrawerCloseButton,\n  DrawerContent, DrawerFooter, DrawerHeader, DrawerOverlay,\n  Icon, useDisclosure, VStack,\n} from '@chakra-ui/react';\nimport React, { ReactElement, useEffect } from 'react';\nimport { IconType } from 'react-icons';\nimport { GiHamburgerMenu } from 'react-icons/gi';\nimport { MenuItemLink } from './MenuItemLink';\n\ninterface SidebarProps {\n  routes: Array<{\n    component: ReactElement,\n    basePath: string,\n    path: string,\n    exact?: boolean,\n    pageTitle: string,\n    icon?: IconType,\n  }>;\n}\n\nfunction useWindowSize() {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = React.useState<{\n    width: number;\n    height: number;\n  }>({\n    width: 0,\n    height: 0,\n  });\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n    // Add event listener\n    window.addEventListener('resize', handleResize);\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n    // Remove event listener on cleanup\n    return () => window.removeEventListener('resize', handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n  return windowSize;\n}\n\nexport const Sidebar = ({ routes }: SidebarProps) => {\n  const size = useWindowSize();\n  const minWidth = 1400;\n  const isLargerThanMinWidth = size.width > minWidth;\n\n  const { isOpen, onOpen, onClose } = useDisclosure({\n    defaultIsOpen: isLargerThanMinWidth,\n  });\n\n  return (\n    <>\n      <div className=\"drawer-button\">\n        <Box pt={3} pb={3} pl={4} pr={4} cursor=\"pointer\" onClick={onOpen}>\n          <Icon as={GiHamburgerMenu} />\n        </Box>\n      </div>\n      <Drawer\n        isOpen={isLargerThanMinWidth || isOpen}\n        placement=\"left\"\n        onClose={() => {\n          if (!isLargerThanMinWidth) {\n            onClose();\n          }\n        }}\n        blockScrollOnMount={!isLargerThanMinWidth}\n        variant={isLargerThanMinWidth ? 'alwaysOpen' : undefined}\n        trapFocus={!isLargerThanMinWidth}\n      >\n        {!isLargerThanMinWidth && <DrawerOverlay />}\n        <DrawerContent>\n          {!isLargerThanMinWidth && <DrawerCloseButton />}\n          <DrawerHeader>Menu</DrawerHeader>\n\n          <DrawerBody>\n            <VStack spacing={0}>\n              {routes.map(({\n                pageTitle, path, exact, icon,\n              }) => (\n                <MenuItemLink\n                  to={path}\n                  label={pageTitle}\n                  activeOnlyWhenExact={exact}\n                  key={pageTitle}\n                  icon={icon}\n                />\n              ))}\n            </VStack>\n          </DrawerBody>\n\n          <DrawerFooter />\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n};\n","import {\n  Badge, Box, Button, Center, Checkbox, CheckboxGroup, Divider, Flex, Grid,\n  Heading, HStack, Icon, IconButton, Input, NumberInput, Text,\n  NumberInputField, Select, Slide, useCheckboxGroup, useDisclosure, VStack,\n} from '@chakra-ui/react';\nimport React, { useRef, useState } from 'react';\nimport { AiOutlineLink } from 'react-icons/ai';\nimport { BsHeartFill } from 'react-icons/bs';\nimport { GiCheckedShield, GiDiceTwentyFacesTwenty, GiWalkingBoot } from 'react-icons/gi';\nimport { useHistory } from 'react-router-dom';\nimport { characterTypeColours } from '../App';\nimport { Character } from '../Characters/Character.interfaces';\nimport { NPC } from '../Characters/NPC.interfaces';\nimport { Player } from '../Characters/Player.interfaces';\nimport { setTurn } from '../common/campaignSlice';\nimport { useAppDispatch, useAppSelector } from '../common/hooks';\nimport { modifyNPC } from '../common/npcSlice';\nimport { modifyPlayer, rollAllPlayerInitiative } from '../common/playerSlice';\nimport { getSortedTurns } from '../Initiative';\nimport { DeathSaveCounter } from './DeathSaveCounter';\n\nexport function DMScreen() {\n  const history = useHistory();\n\n  const {\n    value: selectedCharacters,\n    setValue: setSelectedCharacters,\n  } = useCheckboxGroup({\n    defaultValue: [] as string[],\n  });\n\n  const changePageMethod = ({ type, id }: {\n    type: string;\n    id: string\n  }): void => {\n    history.push(`/${type}/${id}`);\n    const maxAttempt = 20;\n    const findFocus = (iter = 0) => {\n      if (iter >= maxAttempt) return;\n      const element = document.querySelector(`#currentHP-${id}`) as HTMLInputElement | null;\n\n      if (!element) {\n        setTimeout(() => {\n          findFocus(iter + 1);\n        }, 50);\n      } else {\n        element.focus();\n      }\n    };\n    findFocus();\n  };\n\n  const {\n    isOpen,\n    onOpen,\n    onClose,\n  } = useDisclosure();\n\n  const editPanelRef = useRef<HTMLDivElement>(null);\n\n  const players = useAppSelector<Player[]>((state) => state.players.players);\n  const npcs = useAppSelector<NPC[]>((state) => state.npcs.npcs);\n  const currentTurnId = useAppSelector<string>((state) => state.campaign.currentTurnId);\n\n  const characters = getSortedTurns({\n    players,\n    npcs,\n    showAllTurns: false,\n    currentTurnId,\n  });\n\n  const availablePlayers = characters.filter((i) => i.type === 'player').map((i) => i.character);\n  const availableEnemies = characters.filter((i) => i.type === 'npc' && (i.character as NPC).isHostile).map((i) => i.character);\n\n  const dispatch = useAppDispatch();\n\n  const rollInitiativesAction = () => {\n    dispatch(rollAllPlayerInitiative());\n    dispatch(setTurn(''));\n  };\n\n  const setTurnAction = () => {\n    if (characters.length < 1) {\n      return;\n    }\n\n    if (!currentTurnId) {\n      dispatch(setTurn(characters[0].character.id));\n      return;\n    }\n\n    const currentTurnCharacter = characters.findIndex((i) => i.character.id === currentTurnId);\n\n    if (!currentTurnCharacter) {\n      dispatch(setTurn(characters[1].character.id));\n      return;\n    }\n    const nextCharacter = characters[(currentTurnCharacter + 1) % characters.length];\n    dispatch(setTurn(nextCharacter.character.id));\n  };\n\n  // Set Health/THP funcs\n  const [healthMod, setHealthMod] = useState(0);\n  const [thpMod, setThpMod] = useState(0);\n\n  const hPModPanels: Array<{\n    title: string;\n    prop: 'currentHP' | 'tempHP';\n    value: number;\n    setMethod: (value: number) => void;\n  }> = [\n    {\n      title: 'Modify Health',\n      prop: 'currentHP',\n      value: healthMod,\n      setMethod: setHealthMod,\n    },\n    {\n      title: 'Modify THP',\n      prop: 'tempHP',\n      value: thpMod,\n      setMethod: setThpMod,\n    },\n  ];\n\n  const modifyHPValue = (value: number, prop: 'currentHP' | 'tempHP', reset?: boolean) => {\n    if (value === 0 && !reset) return;\n\n    const dispatchActions: unknown[] = [];\n    const selectedPlayers = players.filter((i) => selectedCharacters.includes(i.id));\n\n    const resetProps = (character: Character) => ({\n      id: character.id,\n      tempHP: prop === 'tempHP' ? 0 : Math.max(character.tempHP, 0),\n      currentHP: prop === 'currentHP' ? character.maxHP : character.currentHP,\n    });\n\n    const modProps = (character: Character) => ({\n      id: character.id,\n      [prop]: prop === 'tempHP'\n        ? Math.max(character[prop] + value, 0)\n        : Math.min(\n          character[prop] + value,\n          character.maxHP,\n        ),\n    });\n\n    const propMethod = reset ? resetProps : modProps;\n\n    selectedPlayers.forEach((player) => {\n      dispatchActions.push(modifyPlayer(propMethod(player)));\n    });\n\n    const selectedNPCs = npcs.filter((i) => selectedCharacters.includes(i.id));\n    selectedNPCs.forEach((npc) => {\n      dispatchActions.push(modifyNPC(propMethod(npc)));\n    });\n\n    if (dispatchActions.length) dispatchActions.map(dispatch);\n  };\n\n  const allExistingConditions = [...players, ...npcs].reduce((p, v) => {\n    if (v.conditions.length) {\n      v.conditions.forEach((c) => {\n        if (!p.includes(c)) p.push(c);\n      });\n    }\n    return p;\n  }, [] as string[]);\n\n  const [conditionToRemove, setConditionToRemove] = useState('');\n  const [conditionToAdd, setConditionToAdd] = useState('');\n\n  const modifyCondValue = (value: string, action: 'remove' | 'add') => {\n    if (!value) return;\n\n    const dispatchActions: unknown[] = [];\n    const selectedPlayers = players.filter((i) => selectedCharacters.includes(i.id));\n\n    const modConditionValue = (conditions: string[]) => {\n      const modifiedCondition = [...conditions];\n      const conditionIndex = modifiedCondition.indexOf(value);\n      const conditionAlreadyExists = conditionIndex > -1;\n      if (action === 'remove' && conditionAlreadyExists) {\n        modifiedCondition.splice(conditionIndex, 1);\n      }\n\n      if (action === 'add' && !conditionAlreadyExists) {\n        modifiedCondition.push(value);\n      }\n\n      return modifiedCondition;\n    };\n\n    selectedPlayers.forEach((player) => {\n      dispatchActions.push(modifyPlayer({\n        id: player.id,\n        conditions: modConditionValue(player.conditions),\n      }));\n    });\n\n    const selectedNPCs = npcs.filter((i) => selectedCharacters.includes(i.id));\n    selectedNPCs.forEach((npc) => {\n      dispatchActions.push(modifyNPC({\n        id: npc.id,\n        conditions: modConditionValue(npc.conditions),\n      }));\n    });\n\n    if (dispatchActions.length) dispatchActions.map(dispatch);\n  };\n\n  return (\n    <Flex>\n      <VStack width=\"100%\">\n        <HStack\n          width=\"100%\"\n        >\n          <Button\n            flexGrow={1}\n            disabled={selectedCharacters.length === 0}\n            size=\"xs\"\n            onClick={() => setSelectedCharacters([])}\n          >\n            Deselect All Characters\n          </Button>\n          <Button\n            flexGrow={1}\n            onClick={() => setSelectedCharacters(availablePlayers.map((i) => i.id))}\n            size=\"xs\"\n          >\n            Select All Players\n          </Button>\n          <Button\n            flexGrow={1}\n            onClick={() => setSelectedCharacters(\n              availableEnemies\n                .map((i) => i.id),\n            )}\n            size=\"xs\"\n          >\n            Select All Enemies\n          </Button>\n        </HStack>\n        {/* Characters */}\n        <VStack width=\"100%\" spacing={1}>\n          <CheckboxGroup\n            defaultValue={[]}\n            value={selectedCharacters}\n            onChange={setSelectedCharacters}\n          >\n            {\n              characters.map((i) => {\n                const { character } = i;\n                const npc = character as NPC;\n                const player = character as Player;\n                const tempHP = character.tempHP ? ` (${character.tempHP})` : '';\n                let type: string = '';\n                if (i.type === 'player') {\n                  type = 'players';\n                } else if (i.type === 'npc') {\n                  type = npc.isHostile ? 'enemies' : 'npcs';\n                }\n\n                let borderColour: string = characterTypeColours.neutral;\n\n                if (type === 'players') {\n                  borderColour = characterTypeColours.player;\n                } else if (type === 'enemies') {\n                  borderColour = characterTypeColours.enemy;\n                } else if (npc.isFriendly) {\n                  borderColour = characterTypeColours.friendly;\n                }\n                return (\n                  <Box\n                    width=\"100%\"\n                    key={character.id}\n                    border={`0.1em solid ${borderColour}`}\n                    borderRadius={10}\n                  >\n                    {\n                      character.conditions.map((c) => c.toLowerCase()).includes('dying')\n                        && type === 'players' && (\n                          <DeathSaveCounter player={player} size=\"xs\" />\n                      )\n                    }\n                    <Grid\n                      key={character.id}\n                      alignItems=\"center\"\n                      templateColumns=\"repeat(5, 1fr)\"\n                      fontSize=\"xs\"\n                      pl={2}\n                      pr={2}\n                      gap={1}\n                    >\n                      <HStack>\n                        <Checkbox value={character.id} size=\"lg\" />\n                        {' '}\n                        <Text\n                          fontWeight=\"bold\"\n                          fontSize=\"xs\"\n                        >\n                          {character.name}\n                        </Text>\n                      </HStack>\n                      <Box>\n                        <Icon as={GiCheckedShield} />\n                        {' '}\n                        {character.armourClass}\n                      </Box>\n                      <Box>\n                        <Icon as={BsHeartFill} />\n                        {' '}\n                        {character.currentHP}\n                        {' '}\n                        {tempHP}\n                        {' '}\n                        /\n                        {' '}\n                        {character.maxHP}\n                      </Box>\n                      <Box>\n                        <Icon as={GiWalkingBoot} />\n                        {' '}\n                        {character.initiative + character.initiativeMod}\n                        {' '}\n                        (\n                        {character.initiative}\n                        <Icon as={GiDiceTwentyFacesTwenty} />\n                        {' '}\n                        {character.initiativeMod >= 0 ? '+' : '-'}\n                        {' '}\n                        {Math.abs(character.initiativeMod)}\n                        )\n                      </Box>\n                      <Box>\n                        <IconButton\n                          aria-label=\"Go to character\"\n                          icon={<Icon as={AiOutlineLink} />}\n                          onClick={() => changePageMethod({\n                            id: character.id,\n                            type,\n                          })}\n                          size=\"xs\"\n                          m={1}\n                        />\n                      </Box>\n                    </Grid>\n                    {\n                      character.conditions.length > 0 && (\n                      <HStack pr={1} pl={1} pb={1}>\n                        {character.conditions.map((cond) => (\n                          <Badge variant=\"solid\" key={cond}>{cond}</Badge>\n                        ))}\n                      </HStack>\n                      )\n                    }\n                  </Box>\n                );\n              })\n            }\n          </CheckboxGroup>\n        </VStack>\n        {/* Spacer for edit panel height */}\n        <Flex\n          height={isOpen && editPanelRef.current ? `${editPanelRef.current.clientHeight}px` : 0}\n        />\n\n        {/* Controls */}\n        <VStack\n          width=\"100%\"\n          position=\"sticky\"\n          bottom=\"0\"\n          backgroundColor=\"white\"\n          p={2}\n        >\n          <Button width=\"100%\" onClick={onOpen} display={isOpen ? 'none' : 'visible'}>\n            Show Edit Panel\n          </Button>\n\n          {/* Edit Panel */}\n          <Slide\n            direction=\"bottom\"\n            in={isOpen}\n            ref={editPanelRef}\n          >\n            <Center>\n              <VStack\n                p={2}\n                minW=\"650\"\n                maxW=\"800\"\n                backgroundColor=\"white\"\n              >\n                <Center><Heading size=\"md\">Edit Panel</Heading></Center>\n                <Divider />\n                <Button\n                  width=\"100%\"\n                  onClick={onClose}\n                  size=\"xs\"\n                >\n                  Hide This Panel\n                </Button>\n                <Divider />\n                <HStack\n                  backgroundColor=\"white\"\n                  width=\"100%\"\n                >\n                  <Button onClick={rollInitiativesAction} width=\"100%\">\n                    Roll Initiative\n                    <Icon as={GiDiceTwentyFacesTwenty} />\n                  </Button>\n                  <Button onClick={setTurnAction} width=\"100%\">Next Turn</Button>\n                </HStack>\n                <Divider />\n                <HStack\n                  width=\"100%\"\n                >\n                  {\n                    hPModPanels.map(({\n                      title, prop, value, setMethod,\n                    }) => (\n                      <VStack\n                        width=\"50%\"\n                        key={title}\n                      >\n                        <Flex\n                          flexGrow={1}\n                        >\n                          <Heading size=\"s\">{title}</Heading>\n                        </Flex>\n                        <HStack>\n                          {\n                            [\n                              -10,\n                              -5,\n                              -1,\n                              1,\n                              5,\n                              10,\n                            ].map((i) => (\n                              <Button\n                                size=\"xs\"\n                                onClick={() => modifyHPValue(i, prop)}\n                                variant=\"outline\"\n                                disabled={!selectedCharacters.length}\n                                key={i}\n                              >\n                                {i > 0 && '+'}\n                                {i}\n                              </Button>\n                            ))\n                          }\n                        </HStack>\n                        <HStack>\n                          <Button\n                            variant=\"outline\"\n                            disabled={!selectedCharacters.length}\n                            onClick={() => modifyHPValue(-value, prop)}\n                          >\n                            -\n                          </Button>\n                          <NumberInput\n                            value={value}\n                            onChange={(e) => setMethod(Number(e) || 0)}\n                            width=\"6em\"\n                            disabled={!selectedCharacters.length}\n                          >\n                            <NumberInputField />\n                          </NumberInput>\n                          <Button\n                            variant=\"outline\"\n                            disabled={!selectedCharacters.length}\n                            onClick={() => modifyHPValue(value, prop)}\n                          >\n                            +\n                          </Button>\n                        </HStack>\n                        <Button\n                          size=\"xs\"\n                          variant=\"outline\"\n                          disabled={!selectedCharacters.length}\n                          onClick={() => modifyHPValue(0, prop, true)}\n                        >\n                          Reset\n                        </Button>\n                      </VStack>\n                    ))\n                  }\n                </HStack>\n                <Divider />\n                <VStack width=\"100%\">\n                  <Heading size=\"s\">\n                    Modify Conditions\n                  </Heading>\n                  <HStack\n                    width=\"100%\"\n                  >\n                    <VStack\n                      width=\"50%\"\n                    >\n                      <Input\n                        placeholder=\"Name of condition\"\n                        disabled={!selectedCharacters.length}\n                        value={conditionToAdd}\n                        onChange={(e) => setConditionToAdd(e.target.value)}\n                      />\n                      <Button\n                        width=\"100%\"\n                        disabled={!selectedCharacters.length}\n                        onClick={() => modifyCondValue(conditionToAdd, 'add')}\n                      >\n                        Add Condition\n                      </Button>\n                    </VStack>\n                    <VStack\n                      width=\"50%\"\n                    >\n                      <Select\n                        placeholder=\"Select condition to remove\"\n                        disabled={!selectedCharacters.length || !allExistingConditions.length}\n                        value={conditionToRemove}\n                        onChange={(e) => setConditionToRemove(e.target.value)}\n                      >\n                        {\n                          allExistingConditions.map((c) => (\n                            <option value={c} key={c}>{c}</option>\n                          ))\n                        }\n                      </Select>\n                      <Button\n                        width=\"100%\"\n                        disabled={!selectedCharacters.length || !allExistingConditions.length}\n                        onClick={() => modifyCondValue(conditionToRemove, 'remove')}\n                      >\n                        Remove Condition\n                      </Button>\n                    </VStack>\n                  </HStack>\n                </VStack>\n              </VStack>\n            </Center>\n          </Slide>\n          {/* End Edit Panel */}\n\n        </VStack>\n      </VStack>\n    </Flex>\n  );\n}\n","import {\n  Box,\n  Center, Container, Divider, Heading,\n} from '@chakra-ui/react';\nimport { FaBars, FaCog, FaRegMap } from 'react-icons/fa';\nimport React, { ReactElement } from 'react';\nimport {\n  Route, Switch, useHistory, useLocation,\n} from 'react-router-dom';\nimport { IconType } from 'react-icons';\nimport { BsPersonFill } from 'react-icons/bs';\nimport { GiBirdClaw } from 'react-icons/gi';\nimport { AiFillRobot, AiOutlineFileText } from 'react-icons/ai';\nimport { NPCs } from '../Characters/NPCs';\nimport { Players } from '../Characters/Players';\nimport { setCampaignTitle, setTurn } from '../common/campaignSlice';\nimport { useAppDispatch } from '../common/hooks';\nimport { refreshNPCs } from '../common/npcSlice';\nimport { refreshPlayers } from '../common/playerSlice';\nimport { loadFromLocalStorage, RootState } from '../common/store';\nimport { Initiative } from '../Initiative';\nimport { Settings } from '../Settings';\nimport { CampaignTitle } from './CampaignTitle';\nimport { Sidebar } from './Sidebar';\nimport './App.css';\nimport { DMScreen } from '../DMScreen';\nimport { CampaignNotes } from '../DMScreen/CampaignNotes';\n\nexport function App() {\n  const dispatch = useAppDispatch();\n  const location = useLocation();\n  const history = useHistory();\n  const qps = new window.URLSearchParams(location.search);\n\n  (window as any).appHistory = history;\n\n  const tinyMode = qps.get('tinymode');\n  const [appMinW, appMaxW] = tinyMode ? [400, 500] : [650, 800];\n\n  window.addEventListener('storage', () => {\n    const persistedStorage: RootState = loadFromLocalStorage();\n\n    if (!document.hasFocus()) {\n      const refreshActions = [\n        refreshPlayers(persistedStorage?.players?.players || []),\n        refreshNPCs(persistedStorage?.npcs?.npcs || []),\n        setCampaignTitle(persistedStorage?.campaign?.campaignTitle || ''),\n        setTurn(persistedStorage?.campaign?.currentTurnId || ''),\n      ];\n      refreshActions.map(dispatch);\n    }\n  });\n\n  const routes: Array<{\n    component: ReactElement,\n    basePath: string,\n    path: string,\n    exact?: boolean,\n    pageTitle: string,\n    icon?: IconType,\n  }> = [\n    {\n      component: <Initiative tinyMode={tinyMode} />,\n      path: '/',\n      basePath: '/',\n      exact: true,\n      pageTitle: 'Turn Order',\n      icon: FaBars,\n    },\n    {\n      component: <DMScreen />,\n      path: '/screen',\n      basePath: '/screen',\n      pageTitle: 'Multi Edit',\n      icon: FaRegMap,\n    },\n    {\n      component: <Players />,\n      path: '/players',\n      basePath: '/players/:id?',\n      pageTitle: 'Players',\n      icon: BsPersonFill,\n    },\n    {\n      component: <NPCs showHostile />,\n      path: '/enemies',\n      basePath: '/enemies/:id?',\n      pageTitle: 'Enemies',\n      icon: GiBirdClaw,\n    },\n    {\n      component: <NPCs showFriendly showNeutral />,\n      path: '/npcs',\n      basePath: '/npcs/:id?',\n      pageTitle: 'Other NPCs',\n      icon: AiFillRobot,\n    },\n    // {\n    //   component: <CampaignNotes />,\n    //   path: '/notes',\n    //   basePath: '/notes',\n    //   pageTitle: 'Campaign Notes',\n    //   icon: AiOutlineFileText,\n    // },\n    {\n      component: <Settings />,\n      path: '/settings',\n      basePath: '/settings',\n      pageTitle: 'Settings',\n      icon: FaCog,\n    },\n  ];\n\n  return (\n    <Box\n      className=\"App\"\n      pt={tinyMode ? '0' : '2em'}\n    >\n      {!tinyMode && <Sidebar routes={routes} />}\n      <Container maxW={appMaxW} minW={appMinW}>\n        {!tinyMode && <CampaignTitle />}\n        <Switch>\n          {\n            routes.map(({\n              component, basePath, pageTitle, exact,\n            }) => (\n              <Route\n                path={basePath}\n                exact={exact}\n                key={pageTitle}\n              >\n                {\n                  !tinyMode && (\n                    <Box>\n                      <Center><Heading size=\"md\">{pageTitle}</Heading></Center>\n                      <Divider mt={4} mb={4} />\n                    </Box>\n                  )\n                }\n                {component}\n              </Route>\n            ))\n          }\n        </Switch>\n      </Container>\n    </Box>\n  );\n}\n","import { extendTheme } from '@chakra-ui/react';\n\nexport const theme = extendTheme({\n  components: {\n    Drawer: {\n      variants: {\n        alwaysOpen: {\n          dialog: {\n            pointerEvents: 'auto',\n          },\n          dialogContainer: {\n            pointerEvents: 'none',\n          },\n        },\n      },\n    },\n  },\n});\n\nexport const characterTypeColours = {\n  enemy: '#AA0000',\n  friendly: '#AAAA00',\n  neutral: '#AAAAAA',\n  player: '#00AA00',\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ChakraProvider } from '@chakra-ui/react';\nimport { Provider } from 'react-redux';\nimport {\n  BrowserRouter as Router,\n} from 'react-router-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { App, theme } from './App';\nimport { store } from './common/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <ChakraProvider theme={theme}>\n      <React.StrictMode>\n        <Router\n          basename=\"/dndtracker\"\n        >\n          <App />\n        </Router>\n      </React.StrictMode>\n    </ChakraProvider>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}